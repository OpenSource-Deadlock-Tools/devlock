// @generated by protobuf-ts 2.9.4 with parameter use_proto_field_name
// @generated from protobuf file "citadel_gcmessages_common.proto" (syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { EGCPlatform } from "./steammessages.js";
import { CExtraMsgBlock } from "./gcsdk_gcmessages.js";
/**
 * @generated from protobuf message CSOCitadelLobby
 */
export interface CSOCitadelLobby {
  /**
   * @generated from protobuf field: optional uint64 lobby_id = 1;
   */
  lobby_id?: bigint;
  /**
   * @generated from protobuf field: optional uint64 match_id = 2;
   */
  match_id?: bigint;
  /**
   * @generated from protobuf field: optional ECitadelMatchMode match_mode = 3;
   */
  match_mode?: ECitadelMatchMode;
  /**
   * @generated from protobuf field: optional ECitadelGameMode game_mode = 4;
   */
  game_mode?: ECitadelGameMode;
  /**
   * @generated from protobuf field: optional uint32 compatibility_version = 5;
   */
  compatibility_version?: number;
  /**
   * @generated from protobuf field: repeated CExtraMsgBlock extra_messages = 6;
   */
  extra_messages: CExtraMsgBlock[];
  /**
   * @generated from protobuf field: optional fixed64 server_steam_id = 7;
   */
  server_steam_id?: bigint;
  /**
   * @generated from protobuf field: optional ELobbyServerState server_state = 8;
   */
  server_state?: ELobbyServerState;
  /**
   * @generated from protobuf field: optional uint32 udp_connect_ip = 9;
   */
  udp_connect_ip?: number;
  /**
   * @generated from protobuf field: optional uint32 udp_connect_port = 10;
   */
  udp_connect_port?: number;
  /**
   * @generated from protobuf field: optional bytes sdr_address = 12;
   */
  sdr_address?: Uint8Array;
  /**
   * @generated from protobuf field: optional uint32 server_version = 13;
   */
  server_version?: number;
  /**
   * @generated from protobuf field: optional bool safe_to_abandon = 14;
   */
  safe_to_abandon?: boolean;
}
/**
 * @generated from protobuf message CLobbyData_PostMatchSurvey
 */
export interface CLobbyData_PostMatchSurvey {
  /**
   * @generated from protobuf field: repeated CLobbyData_PostMatchSurvey.PlayerSurvey surveys = 1;
   */
  surveys: CLobbyData_PostMatchSurvey_PlayerSurvey[];
}
/**
 * @generated from protobuf message CLobbyData_PostMatchSurvey.PlayerSurvey
 */
export interface CLobbyData_PostMatchSurvey_PlayerSurvey {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  account_id?: number;
  /**
   * @generated from protobuf field: optional uint32 question_id = 2;
   */
  question_id?: number;
}
/**
 * @generated from protobuf message CMsgHeroSelectionMatchInfo
 */
export interface CMsgHeroSelectionMatchInfo {
  /**
   * @generated from protobuf field: repeated CMsgHeroSelectionMatchInfo.Hero hero_selections = 1;
   */
  hero_selections: CMsgHeroSelectionMatchInfo_Hero[];
}
/**
 * @generated from protobuf message CMsgHeroSelectionMatchInfo.Hero
 */
export interface CMsgHeroSelectionMatchInfo_Hero {
  /**
   * @generated from protobuf field: optional uint32 hero_id = 1;
   */
  hero_id?: number;
  /**
   * @generated from protobuf field: optional uint32 priority = 2;
   */
  priority?: number;
}
/**
 * @generated from protobuf message CMsgStartFindingMatchInfo
 */
export interface CMsgStartFindingMatchInfo {
  /**
   * @generated from protobuf field: optional string server_search_key = 1;
   */
  server_search_key?: string;
  /**
   * @generated from protobuf field: optional string server_command_string = 2;
   */
  server_command_string?: string;
  /**
   * @generated from protobuf field: optional ECitadelMatchMode match_mode = 3;
   */
  match_mode?: ECitadelMatchMode;
  /**
   * @generated from protobuf field: optional ECitadelGameMode game_mode = 5;
   */
  game_mode?: ECitadelGameMode;
  /**
   * @generated from protobuf field: optional bool solo_match = 6;
   */
  solo_match?: boolean;
  /**
   * @generated from protobuf field: optional ECitadelBotDifficulty bot_difficulty = 7;
   */
  bot_difficulty?: ECitadelBotDifficulty;
  /**
   * @generated from protobuf field: optional ECitadelRegionMode region_mode = 8;
   */
  region_mode?: ECitadelRegionMode;
}
/**
 * @generated from protobuf message CMsgAnyToGCReportAsserts
 */
export interface CMsgAnyToGCReportAsserts {
  /**
   * @generated from protobuf field: optional uint32 version = 1;
   */
  version?: number;
  /**
   * @generated from protobuf field: repeated CMsgAnyToGCReportAsserts.TrackedAssert asserts = 2;
   */
  asserts: CMsgAnyToGCReportAsserts_TrackedAssert[];
}
/**
 * @generated from protobuf message CMsgAnyToGCReportAsserts.TrackedAssert
 */
export interface CMsgAnyToGCReportAsserts_TrackedAssert {
  /**
   * @generated from protobuf field: optional string filename = 1;
   */
  filename?: string;
  /**
   * @generated from protobuf field: optional uint32 line_number = 2;
   */
  line_number?: number;
  /**
   * @generated from protobuf field: optional string sample_msg = 3;
   */
  sample_msg?: string;
  /**
   * @generated from protobuf field: optional string sample_stack = 4;
   */
  sample_stack?: string;
  /**
   * @generated from protobuf field: optional uint32 times_fired = 5;
   */
  times_fired?: number;
  /**
   * @generated from protobuf field: optional string function_name = 6;
   */
  function_name?: string;
  /**
   * @generated from protobuf field: optional string condition = 7;
   */
  condition?: string;
  /**
   * @generated from protobuf field: optional uint32 total_times_fired = 8;
   */
  total_times_fired?: number;
}
/**
 * @generated from protobuf message CMsgAnyToGCReportAssertsResponse
 */
export interface CMsgAnyToGCReportAssertsResponse {
  /**
   * @generated from protobuf field: optional bool success = 1;
   */
  success?: boolean;
}
/**
 * @generated from protobuf message CMsgRegionPingTimesClient
 */
export interface CMsgRegionPingTimesClient {
  /**
   * @generated from protobuf field: repeated fixed32 data_center_codes = 1 [packed = true];
   */
  data_center_codes: number[];
  /**
   * @generated from protobuf field: repeated uint32 ping_times = 2 [packed = true];
   */
  ping_times: number[];
}
/**
 * @generated from protobuf message CSOCitadelParty
 */
export interface CSOCitadelParty {
  /**
   * @generated from protobuf field: optional uint64 party_id = 1;
   */
  party_id?: bigint;
  /**
   * @generated from protobuf field: repeated CSOCitadelParty.Member members = 2;
   */
  members: CSOCitadelParty_Member[];
  /**
   * @generated from protobuf field: repeated CSOCitadelParty.Invite invites = 3;
   */
  invites: CSOCitadelParty_Invite[];
  /**
   * @generated from protobuf field: optional string dev_server_command = 4;
   */
  dev_server_command?: string;
  /**
   * @generated from protobuf field: repeated CSOCitadelParty.LeftMember left_members = 5;
   */
  left_members: CSOCitadelParty_LeftMember[];
  /**
   * @generated from protobuf field: optional uint64 join_code = 6;
   */
  join_code?: bigint;
  /**
   * @generated from protobuf field: optional ECitadelBotDifficulty bot_difficulty = 7;
   */
  bot_difficulty?: ECitadelBotDifficulty;
  /**
   * @generated from protobuf field: optional ECitadelMatchMode match_mode = 9;
   */
  match_mode?: ECitadelMatchMode;
  /**
   * @generated from protobuf field: optional ECitadelGameMode game_mode = 10;
   */
  game_mode?: ECitadelGameMode;
  /**
   * @generated from protobuf field: optional uint32 match_making_start_time = 11;
   */
  match_making_start_time?: number;
  /**
   * @generated from protobuf field: optional string server_search_key = 12;
   */
  server_search_key?: string;
  /**
   * @generated from protobuf field: optional bool is_high_skill_range_party = 13;
   */
  is_high_skill_range_party?: boolean;
  /**
   * @generated from protobuf field: optional CSOCitadelParty.EChatMode chat_mode = 14;
   */
  chat_mode?: CSOCitadelParty_EChatMode;
  /**
   * @generated from protobuf field: optional ECitadelRegionMode region_mode = 15;
   */
  region_mode?: ECitadelRegionMode;
  /**
   * @generated from protobuf field: optional bool is_private_lobby = 16;
   */
  is_private_lobby?: boolean;
  /**
   * @generated from protobuf field: optional CSOCitadelParty.PrivateLobbySettings private_lobby_settings = 17;
   */
  private_lobby_settings?: CSOCitadelParty_PrivateLobbySettings;
}
/**
 * @generated from protobuf message CSOCitadelParty.PrivateLobbySlot
 */
export interface CSOCitadelParty_PrivateLobbySlot {
  /**
   * @generated from protobuf field: optional uint32 slot_id = 1;
   */
  slot_id?: number;
  /**
   * @generated from protobuf field: optional uint32 player_account_id = 2;
   */
  player_account_id?: number;
}
/**
 * @generated from protobuf message CSOCitadelParty.ServerRegion
 */
export interface CSOCitadelParty_ServerRegion {
  /**
   * @generated from protobuf field: optional uint32 region_id = 1;
   */
  region_id?: number;
}
/**
 * @generated from protobuf message CSOCitadelParty.PrivateLobbySettings
 */
export interface CSOCitadelParty_PrivateLobbySettings {
  /**
   * @generated from protobuf field: optional uint32 min_roster_size = 1;
   */
  min_roster_size?: number;
  /**
   * @generated from protobuf field: repeated CSOCitadelParty.PrivateLobbySlot match_slots = 2;
   */
  match_slots: CSOCitadelParty_PrivateLobbySlot[];
  /**
   * @generated from protobuf field: optional bool randomize_lanes = 3;
   */
  randomize_lanes?: boolean;
  /**
   * @generated from protobuf field: optional uint32 server_region = 4;
   */
  server_region?: number;
  /**
   * @generated from protobuf field: optional bool is_publicly_visible = 6;
   */
  is_publicly_visible?: boolean;
  /**
   * @generated from protobuf field: optional bool cheats_enabled = 7;
   */
  cheats_enabled?: boolean;
  /**
   * @generated from protobuf field: repeated CSOCitadelParty.ServerRegion available_regions = 8;
   */
  available_regions: CSOCitadelParty_ServerRegion[];
  /**
   * @generated from protobuf field: optional bool duplicate_heroes_enabled = 9;
   */
  duplicate_heroes_enabled?: boolean;
}
/**
 * @generated from protobuf message CSOCitadelParty.Member
 */
export interface CSOCitadelParty_Member {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  account_id?: number;
  /**
   * @generated from protobuf field: optional string persona_name = 2;
   */
  persona_name?: string;
  /**
   * @generated from protobuf field: optional uint32 rights_flags = 3;
   */
  rights_flags?: number;
  /**
   * @generated from protobuf field: optional bool is_ready = 4;
   */
  is_ready?: boolean;
  /**
   * @generated from protobuf field: optional CSOCitadelParty.EPlayerType player_type = 5;
   */
  player_type?: CSOCitadelParty_EPlayerType;
  /**
   * @generated from protobuf field: optional uint32 compatibility_version = 6;
   */
  compatibility_version?: number;
  /**
   * @generated from protobuf field: optional EGCPlatform platform = 7;
   */
  platform?: EGCPlatform;
  /**
   * @generated from protobuf field: optional uint32 team = 8;
   */
  team?: number;
  /**
   * @generated from protobuf field: optional CMsgHeroSelectionMatchInfo hero_roster = 9;
   */
  hero_roster?: CMsgHeroSelectionMatchInfo;
  /**
   * @generated from protobuf field: optional uint64 permissions = 10;
   */
  permissions?: bigint;
  /**
   * @generated from protobuf field: optional uint64 new_player_progress = 11;
   */
  new_player_progress?: bigint;
  /**
   * @generated from protobuf field: repeated uint32 owned_heroes = 12 [packed = true];
   */
  owned_heroes: number[];
}
/**
 * @generated from protobuf message CSOCitadelParty.LeftMember
 */
export interface CSOCitadelParty_LeftMember {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  account_id?: number;
  /**
   * @generated from protobuf field: optional uint32 rights_flags = 2;
   */
  rights_flags?: number;
  /**
   * @generated from protobuf field: optional CSOCitadelParty.EPlayerType player_type = 3;
   */
  player_type?: CSOCitadelParty_EPlayerType;
}
/**
 * @generated from protobuf message CSOCitadelParty.Invite
 */
export interface CSOCitadelParty_Invite {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  account_id?: number;
  /**
   * @generated from protobuf field: optional string persona_name = 2;
   */
  persona_name?: string;
  /**
   * @generated from protobuf field: optional uint32 invited_by = 3;
   */
  invited_by?: number;
}
/**
 * @generated from protobuf enum CSOCitadelParty.EMemberRights
 */
export enum CSOCitadelParty_EMemberRights {
  /**
   * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
   */
  UNSPECIFIED$ = 0,
  /**
   * @generated from protobuf enum value: k_eMemberRights_Admin = 1;
   */
  k_eMemberRights_Admin = 1,
  /**
   * @generated from protobuf enum value: k_eMemberRights_Creator = 2;
   */
  k_eMemberRights_Creator = 2,
}
/**
 * @generated from protobuf enum CSOCitadelParty.EPlayerType
 */
export enum CSOCitadelParty_EPlayerType {
  /**
   * @generated from protobuf enum value: k_ePlayerType_Player = 0;
   */
  k_ePlayerType_Player = 0,
  /**
   * @generated from protobuf enum value: k_ePlayerType_Spectator = 1;
   */
  k_ePlayerType_Spectator = 1,
}
/**
 * @generated from protobuf enum CSOCitadelParty.EChatMode
 */
export enum CSOCitadelParty_EChatMode {
  /**
   * @generated from protobuf enum value: k_eNone = 0;
   */
  k_eNone = 0,
  /**
   * @generated from protobuf enum value: k_ePartyChat = 1;
   */
  k_ePartyChat = 1,
  /**
   * @generated from protobuf enum value: k_eTeamChat = 2;
   */
  k_eTeamChat = 2,
}
/**
 * @generated from protobuf message CMsgMatchPlayerPathsData
 */
export interface CMsgMatchPlayerPathsData {
  /**
   * @generated from protobuf field: optional uint32 version = 1;
   */
  version?: number;
  /**
   * @generated from protobuf field: optional float interval_s = 2;
   */
  interval_s?: number;
  /**
   * @generated from protobuf field: optional uint32 x_resolution = 3;
   */
  x_resolution?: number;
  /**
   * @generated from protobuf field: optional uint32 y_resolution = 4;
   */
  y_resolution?: number;
  /**
   * @generated from protobuf field: repeated CMsgMatchPlayerPathsData.Path paths = 5;
   */
  paths: CMsgMatchPlayerPathsData_Path[];
}
/**
 * @generated from protobuf message CMsgMatchPlayerPathsData.Path
 */
export interface CMsgMatchPlayerPathsData_Path {
  /**
   * @generated from protobuf field: optional uint32 player_slot = 1;
   */
  player_slot?: number;
  /**
   * @generated from protobuf field: optional float x_min = 2;
   */
  x_min?: number;
  /**
   * @generated from protobuf field: optional float y_min = 3;
   */
  y_min?: number;
  /**
   * @generated from protobuf field: optional float x_max = 4;
   */
  x_max?: number;
  /**
   * @generated from protobuf field: optional float y_max = 5;
   */
  y_max?: number;
  /**
   * @generated from protobuf field: repeated uint32 x_pos = 6 [packed = true];
   */
  x_pos: number[];
  /**
   * @generated from protobuf field: repeated uint32 y_pos = 7 [packed = true];
   */
  y_pos: number[];
  /**
   * @generated from protobuf field: repeated bool alive = 8 [packed = true];
   */
  alive: boolean[];
  /**
   * @generated from protobuf field: repeated uint32 health = 9 [packed = true];
   */
  health: number[];
}
/**
 * @generated from protobuf message CMsgMatchPlayerDamageMatrix
 */
export interface CMsgMatchPlayerDamageMatrix {
  /**
   * @generated from protobuf field: repeated CMsgMatchPlayerDamageMatrix.DamageDealer damage_dealers = 1;
   */
  damage_dealers: CMsgMatchPlayerDamageMatrix_DamageDealer[];
  /**
   * @generated from protobuf field: repeated uint32 sample_time_s = 2 [packed = true];
   */
  sample_time_s: number[];
  /**
   * @generated from protobuf field: optional CMsgMatchPlayerDamageMatrix.SourceDetails source_details = 3;
   */
  source_details?: CMsgMatchPlayerDamageMatrix_SourceDetails;
}
/**
 * @generated from protobuf message CMsgMatchPlayerDamageMatrix.DamageToPlayer
 */
export interface CMsgMatchPlayerDamageMatrix_DamageToPlayer {
  /**
   * @generated from protobuf field: optional uint32 target_player_slot = 1;
   */
  target_player_slot?: number;
  /**
   * @generated from protobuf field: repeated uint32 damage = 2 [packed = true];
   */
  damage: number[];
}
/**
 * @generated from protobuf message CMsgMatchPlayerDamageMatrix.DamageSource
 */
export interface CMsgMatchPlayerDamageMatrix_DamageSource {
  /**
   * @generated from protobuf field: repeated CMsgMatchPlayerDamageMatrix.DamageToPlayer damage_to_players = 2;
   */
  damage_to_players: CMsgMatchPlayerDamageMatrix_DamageToPlayer[];
  /**
   * @generated from protobuf field: optional uint32 source_details_index = 4;
   */
  source_details_index?: number;
}
/**
 * @generated from protobuf message CMsgMatchPlayerDamageMatrix.DamageDealer
 */
export interface CMsgMatchPlayerDamageMatrix_DamageDealer {
  /**
   * @generated from protobuf field: optional uint32 dealer_player_slot = 1;
   */
  dealer_player_slot?: number;
  /**
   * @generated from protobuf field: repeated CMsgMatchPlayerDamageMatrix.DamageSource damage_sources = 2;
   */
  damage_sources: CMsgMatchPlayerDamageMatrix_DamageSource[];
}
/**
 * @generated from protobuf message CMsgMatchPlayerDamageMatrix.SourceDetails
 */
export interface CMsgMatchPlayerDamageMatrix_SourceDetails {
  /**
   * @generated from protobuf field: repeated CMsgMatchPlayerDamageMatrix.EStatType stat_type = 1 [packed = true];
   */
  stat_type: CMsgMatchPlayerDamageMatrix_EStatType[];
  /**
   * @generated from protobuf field: repeated string source_name = 2;
   */
  source_name: string[];
}
/**
 * @generated from protobuf enum CMsgMatchPlayerDamageMatrix.EStatType
 */
export enum CMsgMatchPlayerDamageMatrix_EStatType {
  /**
   * @generated from protobuf enum value: k_eType_Damage = 0;
   */
  k_eType_Damage = 0,
  /**
   * @generated from protobuf enum value: k_eType_Healing = 1;
   */
  k_eType_Healing = 1,
  /**
   * @generated from protobuf enum value: k_eType_HealPrevented = 2;
   */
  k_eType_HealPrevented = 2,
  /**
   * @generated from protobuf enum value: k_eType_Mitigated = 3;
   */
  k_eType_Mitigated = 3,
  /**
   * @generated from protobuf enum value: k_eType_LethalDamage = 4;
   */
  k_eType_LethalDamage = 4,
}
/**
 * @generated from protobuf message CMsgMatchMetaDataContents
 */
export interface CMsgMatchMetaDataContents {
  /**
   * @generated from protobuf field: optional CMsgMatchMetaDataContents.MatchInfo match_info = 2;
   */
  match_info?: CMsgMatchMetaDataContents_MatchInfo;
}
/**
 * @generated from protobuf message CMsgMatchMetaDataContents.Position
 */
export interface CMsgMatchMetaDataContents_Position {
  /**
   * @generated from protobuf field: optional float x = 1;
   */
  x?: number;
  /**
   * @generated from protobuf field: optional float y = 2;
   */
  y?: number;
  /**
   * @generated from protobuf field: optional float z = 3;
   */
  z?: number;
}
/**
 * @generated from protobuf message CMsgMatchMetaDataContents.Deaths
 */
export interface CMsgMatchMetaDataContents_Deaths {
  /**
   * @generated from protobuf field: optional uint32 game_time_s = 1;
   */
  game_time_s?: number;
  /**
   * @generated from protobuf field: optional uint32 killer_player_slot = 9;
   */
  killer_player_slot?: number;
  /**
   * @generated from protobuf field: optional CMsgMatchMetaDataContents.Position death_pos = 10;
   */
  death_pos?: CMsgMatchMetaDataContents_Position;
  /**
   * @generated from protobuf field: optional CMsgMatchMetaDataContents.Position killer_pos = 11;
   */
  killer_pos?: CMsgMatchMetaDataContents_Position;
  /**
   * @generated from protobuf field: optional uint32 death_duration_s = 12;
   */
  death_duration_s?: number;
}
/**
 * @generated from protobuf message CMsgMatchMetaDataContents.Items
 */
export interface CMsgMatchMetaDataContents_Items {
  /**
   * @generated from protobuf field: optional uint32 game_time_s = 1;
   */
  game_time_s?: number;
  /**
   * @generated from protobuf field: optional uint32 item_id = 2;
   */
  item_id?: number;
  /**
   * @generated from protobuf field: optional uint32 upgrade_id = 3;
   */
  upgrade_id?: number;
  /**
   * @generated from protobuf field: optional uint32 sold_time_s = 4;
   */
  sold_time_s?: number;
  /**
   * @generated from protobuf field: optional uint32 flags = 5;
   */
  flags?: number;
  /**
   * @generated from protobuf field: optional uint32 imbued_ability_id = 6;
   */
  imbued_ability_id?: number;
}
/**
 * @generated from protobuf message CMsgMatchMetaDataContents.Ping
 */
export interface CMsgMatchMetaDataContents_Ping {
  /**
   * @generated from protobuf field: optional uint32 ping_type = 1;
   */
  ping_type?: number;
  /**
   * @generated from protobuf field: optional uint32 ping_data = 2;
   */
  ping_data?: number;
  /**
   * @generated from protobuf field: optional uint32 game_time_s = 3;
   */
  game_time_s?: number;
}
/**
 * @generated from protobuf message CMsgMatchMetaDataContents.GoldSource
 */
export interface CMsgMatchMetaDataContents_GoldSource {
  /**
   * @generated from protobuf field: optional CMsgMatchMetaDataContents.EGoldSource source = 1;
   */
  source?: CMsgMatchMetaDataContents_EGoldSource;
  /**
   * @generated from protobuf field: optional uint32 kills = 2;
   */
  kills?: number;
  /**
   * @generated from protobuf field: optional uint32 damage = 3;
   */
  damage?: number;
  /**
   * @generated from protobuf field: optional uint32 gold = 4;
   */
  gold?: number;
  /**
   * @generated from protobuf field: optional uint32 gold_orbs = 5;
   */
  gold_orbs?: number;
}
/**
 * @generated from protobuf message CMsgMatchMetaDataContents.CustomUserStatInfo
 */
export interface CMsgMatchMetaDataContents_CustomUserStatInfo {
  /**
   * @generated from protobuf field: optional string name = 1;
   */
  name?: string;
  /**
   * @generated from protobuf field: optional uint32 id = 2;
   */
  id?: number;
}
/**
 * @generated from protobuf message CMsgMatchMetaDataContents.CustomUserStat
 */
export interface CMsgMatchMetaDataContents_CustomUserStat {
  /**
   * @generated from protobuf field: optional uint32 value = 2;
   */
  value?: number;
  /**
   * @generated from protobuf field: optional uint32 id = 3;
   */
  id?: number;
}
/**
 * @generated from protobuf message CMsgMatchMetaDataContents.PlayerStats
 */
export interface CMsgMatchMetaDataContents_PlayerStats {
  /**
   * @generated from protobuf field: optional uint32 time_stamp_s = 1;
   */
  time_stamp_s?: number;
  /**
   * @generated from protobuf field: optional uint32 net_worth = 2;
   */
  net_worth?: number;
  /**
   * @generated from protobuf field: optional uint32 gold_player = 3;
   */
  gold_player?: number;
  /**
   * @generated from protobuf field: optional uint32 gold_player_orbs = 4;
   */
  gold_player_orbs?: number;
  /**
   * @generated from protobuf field: optional uint32 gold_lane_creep_orbs = 5;
   */
  gold_lane_creep_orbs?: number;
  /**
   * @generated from protobuf field: optional uint32 gold_neutral_creep_orbs = 6;
   */
  gold_neutral_creep_orbs?: number;
  /**
   * @generated from protobuf field: optional uint32 gold_boss = 7;
   */
  gold_boss?: number;
  /**
   * @generated from protobuf field: optional uint32 gold_boss_orb = 8;
   */
  gold_boss_orb?: number;
  /**
   * @generated from protobuf field: optional uint32 gold_treasure = 9;
   */
  gold_treasure?: number;
  /**
   * @generated from protobuf field: optional uint32 gold_denied = 10;
   */
  gold_denied?: number;
  /**
   * @generated from protobuf field: optional uint32 gold_death_loss = 11;
   */
  gold_death_loss?: number;
  /**
   * @generated from protobuf field: optional uint32 gold_lane_creep = 12;
   */
  gold_lane_creep?: number;
  /**
   * @generated from protobuf field: optional uint32 gold_neutral_creep = 13;
   */
  gold_neutral_creep?: number;
  /**
   * @generated from protobuf field: optional uint32 kills = 14;
   */
  kills?: number;
  /**
   * @generated from protobuf field: optional uint32 deaths = 15;
   */
  deaths?: number;
  /**
   * @generated from protobuf field: optional uint32 assists = 16;
   */
  assists?: number;
  /**
   * @generated from protobuf field: optional uint32 creep_kills = 17;
   */
  creep_kills?: number;
  /**
   * @generated from protobuf field: optional uint32 neutral_kills = 18;
   */
  neutral_kills?: number;
  /**
   * @generated from protobuf field: optional uint32 possible_creeps = 19;
   */
  possible_creeps?: number;
  /**
   * @generated from protobuf field: optional uint32 creep_damage = 20;
   */
  creep_damage?: number;
  /**
   * @generated from protobuf field: optional uint32 player_damage = 21;
   */
  player_damage?: number;
  /**
   * @generated from protobuf field: optional uint32 neutral_damage = 22;
   */
  neutral_damage?: number;
  /**
   * @generated from protobuf field: optional uint32 boss_damage = 23;
   */
  boss_damage?: number;
  /**
   * @generated from protobuf field: optional uint32 denies = 24;
   */
  denies?: number;
  /**
   * @generated from protobuf field: optional uint32 player_healing = 25;
   */
  player_healing?: number;
  /**
   * @generated from protobuf field: optional uint32 ability_points = 26;
   */
  ability_points?: number;
  /**
   * @generated from protobuf field: optional uint32 self_healing = 27;
   */
  self_healing?: number;
  /**
   * @generated from protobuf field: optional uint32 player_damage_taken = 28;
   */
  player_damage_taken?: number;
  /**
   * @generated from protobuf field: optional uint32 max_health = 29;
   */
  max_health?: number;
  /**
   * @generated from protobuf field: optional uint32 weapon_power = 30;
   */
  weapon_power?: number;
  /**
   * @generated from protobuf field: optional uint32 tech_power = 31;
   */
  tech_power?: number;
  /**
   * @generated from protobuf field: optional uint32 shots_hit = 32;
   */
  shots_hit?: number;
  /**
   * @generated from protobuf field: optional uint32 shots_missed = 33;
   */
  shots_missed?: number;
  /**
   * @generated from protobuf field: optional uint32 damage_absorbed = 34;
   */
  damage_absorbed?: number;
  /**
   * @generated from protobuf field: optional uint32 absorption_provided = 35;
   */
  absorption_provided?: number;
  /**
   * @generated from protobuf field: optional uint32 hero_bullets_hit = 36;
   */
  hero_bullets_hit?: number;
  /**
   * @generated from protobuf field: optional uint32 hero_bullets_hit_crit = 37;
   */
  hero_bullets_hit_crit?: number;
  /**
   * @generated from protobuf field: optional uint32 heal_prevented = 38;
   */
  heal_prevented?: number;
  /**
   * @generated from protobuf field: optional uint32 heal_lost = 39;
   */
  heal_lost?: number;
  /**
   * @generated from protobuf field: repeated CMsgMatchMetaDataContents.GoldSource gold_sources = 40;
   */
  gold_sources: CMsgMatchMetaDataContents_GoldSource[];
  /**
   * @generated from protobuf field: repeated CMsgMatchMetaDataContents.CustomUserStat custom_user_stats = 41;
   */
  custom_user_stats: CMsgMatchMetaDataContents_CustomUserStat[];
  /**
   * @generated from protobuf field: optional uint32 damage_mitigated = 42;
   */
  damage_mitigated?: number;
  /**
   * @generated from protobuf field: optional uint32 level = 43;
   */
  level?: number;
}
/**
 * @generated from protobuf message CMsgMatchMetaDataContents.AbilityStat
 */
export interface CMsgMatchMetaDataContents_AbilityStat {
  /**
   * @generated from protobuf field: optional uint32 ability_id = 1;
   */
  ability_id?: number;
  /**
   * @generated from protobuf field: optional uint32 ability_value = 2;
   */
  ability_value?: number;
}
/**
 * @generated from protobuf message CMsgMatchMetaDataContents.BookReward
 */
export interface CMsgMatchMetaDataContents_BookReward {
  /**
   * @generated from protobuf field: optional uint32 book_id = 1;
   */
  book_id?: number;
  /**
   * @generated from protobuf field: optional uint32 xp_amount = 2;
   */
  xp_amount?: number;
  /**
   * @generated from protobuf field: optional uint32 starting_xp = 3;
   */
  starting_xp?: number;
}
/**
 * @generated from protobuf message CMsgMatchMetaDataContents.Players
 */
export interface CMsgMatchMetaDataContents_Players {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  account_id?: number;
  /**
   * @generated from protobuf field: optional uint32 player_slot = 2;
   */
  player_slot?: number;
  /**
   * @generated from protobuf field: repeated CMsgMatchMetaDataContents.Deaths death_details = 3;
   */
  death_details: CMsgMatchMetaDataContents_Deaths[];
  /**
   * @generated from protobuf field: repeated CMsgMatchMetaDataContents.Items items = 4;
   */
  items: CMsgMatchMetaDataContents_Items[];
  /**
   * @generated from protobuf field: repeated CMsgMatchMetaDataContents.PlayerStats stats = 5;
   */
  stats: CMsgMatchMetaDataContents_PlayerStats[];
  /**
   * @generated from protobuf field: optional ECitadelLobbyTeam team = 6;
   */
  team?: ECitadelLobbyTeam;
  /**
   * @generated from protobuf field: optional uint32 kills = 8;
   */
  kills?: number;
  /**
   * @generated from protobuf field: optional uint32 deaths = 9;
   */
  deaths?: number;
  /**
   * @generated from protobuf field: optional uint32 assists = 10;
   */
  assists?: number;
  /**
   * @generated from protobuf field: optional uint32 net_worth = 11;
   */
  net_worth?: number;
  /**
   * @generated from protobuf field: optional uint32 hero_id = 12;
   */
  hero_id?: number;
  /**
   * @generated from protobuf field: optional uint32 last_hits = 13;
   */
  last_hits?: number;
  /**
   * @generated from protobuf field: optional uint32 denies = 14;
   */
  denies?: number;
  /**
   * @generated from protobuf field: optional uint32 ability_points = 15;
   */
  ability_points?: number;
  /**
   * @generated from protobuf field: optional uint32 party = 16;
   */
  party?: number;
  /**
   * @generated from protobuf field: optional uint32 assigned_lane = 17;
   */
  assigned_lane?: number;
  /**
   * @generated from protobuf field: optional uint32 level = 18;
   */
  level?: number;
  /**
   * @generated from protobuf field: repeated CMsgMatchMetaDataContents.Ping pings = 19;
   */
  pings: CMsgMatchMetaDataContents_Ping[];
  /**
   * @generated from protobuf field: repeated CMsgMatchMetaDataContents.AbilityStat ability_stats = 20;
   */
  ability_stats: CMsgMatchMetaDataContents_AbilityStat[];
  /**
   * @generated from protobuf field: repeated float stats_type_stat = 21 [packed = true];
   */
  stats_type_stat: number[];
  /**
   * @generated from protobuf field: repeated CMsgMatchMetaDataContents.BookReward book_rewards = 22;
   */
  book_rewards: CMsgMatchMetaDataContents_BookReward[];
  /**
   * @generated from protobuf field: optional uint32 abandon_match_time_s = 23;
   */
  abandon_match_time_s?: number;
}
/**
 * @generated from protobuf message CMsgMatchMetaDataContents.Objective
 */
export interface CMsgMatchMetaDataContents_Objective {
  /**
   * @generated from protobuf field: optional ECitadelObjective legacy_objective_id = 1;
   */
  legacy_objective_id?: ECitadelObjective;
  /**
   * @generated from protobuf field: optional uint32 destroyed_time_s = 2;
   */
  destroyed_time_s?: number;
  /**
   * @generated from protobuf field: optional uint32 creep_damage = 4;
   */
  creep_damage?: number;
  /**
   * @generated from protobuf field: optional uint32 creep_damage_mitigated = 5;
   */
  creep_damage_mitigated?: number;
  /**
   * @generated from protobuf field: optional uint32 player_damage = 6;
   */
  player_damage?: number;
  /**
   * @generated from protobuf field: optional uint32 player_damage_mitigated = 7;
   */
  player_damage_mitigated?: number;
  /**
   * @generated from protobuf field: optional uint32 first_damage_time_s = 8;
   */
  first_damage_time_s?: number;
  /**
   * @generated from protobuf field: optional ECitadelTeamObjective team_objective_id = 9;
   */
  team_objective_id?: ECitadelTeamObjective;
  /**
   * @generated from protobuf field: optional ECitadelLobbyTeam team = 10;
   */
  team?: ECitadelLobbyTeam;
}
/**
 * @generated from protobuf message CMsgMatchMetaDataContents.MidBoss
 */
export interface CMsgMatchMetaDataContents_MidBoss {
  /**
   * @generated from protobuf field: optional ECitadelLobbyTeam team_killed = 1;
   */
  team_killed?: ECitadelLobbyTeam;
  /**
   * @generated from protobuf field: optional ECitadelLobbyTeam team_claimed = 2;
   */
  team_claimed?: ECitadelLobbyTeam;
  /**
   * @generated from protobuf field: optional uint32 destroyed_time_s = 3;
   */
  destroyed_time_s?: number;
}
/**
 * @generated from protobuf message CMsgMatchMetaDataContents.Pause
 */
export interface CMsgMatchMetaDataContents_Pause {
  /**
   * @generated from protobuf field: optional uint32 game_time_s = 1;
   */
  game_time_s?: number;
  /**
   * @generated from protobuf field: optional uint32 pause_duration_s = 2;
   */
  pause_duration_s?: number;
  /**
   * @generated from protobuf field: optional uint32 player_slot = 3;
   */
  player_slot?: number;
}
/**
 * @generated from protobuf message CMsgMatchMetaDataContents.WatchedDeathReplay
 */
export interface CMsgMatchMetaDataContents_WatchedDeathReplay {
  /**
   * @generated from protobuf field: optional uint32 game_time_s = 1;
   */
  game_time_s?: number;
  /**
   * @generated from protobuf field: optional uint32 player_slot = 2;
   */
  player_slot?: number;
}
/**
 * @generated from protobuf message CMsgMatchMetaDataContents.MatchInfo
 */
export interface CMsgMatchMetaDataContents_MatchInfo {
  /**
   * @generated from protobuf field: optional uint32 duration_s = 1;
   */
  duration_s?: number;
  /**
   * @generated from protobuf field: optional CMsgMatchMetaDataContents.EMatchOutcome match_outcome = 2;
   */
  match_outcome?: CMsgMatchMetaDataContents_EMatchOutcome;
  /**
   * @generated from protobuf field: optional ECitadelLobbyTeam winning_team = 3;
   */
  winning_team?: ECitadelLobbyTeam;
  /**
   * @generated from protobuf field: repeated CMsgMatchMetaDataContents.Players players = 4;
   */
  players: CMsgMatchMetaDataContents_Players[];
  /**
   * @generated from protobuf field: optional uint32 start_time = 5;
   */
  start_time?: number;
  /**
   * @generated from protobuf field: optional uint64 match_id = 6;
   */
  match_id?: bigint;
  /**
   * @generated from protobuf field: optional uint32 legacy_objectives_mask = 8;
   */
  legacy_objectives_mask?: number;
  /**
   * @generated from protobuf field: optional ECitadelGameMode game_mode = 9;
   */
  game_mode?: ECitadelGameMode;
  /**
   * @generated from protobuf field: optional ECitadelMatchMode match_mode = 10;
   */
  match_mode?: ECitadelMatchMode;
  /**
   * @generated from protobuf field: repeated CMsgMatchMetaDataContents.Objective objectives = 11;
   */
  objectives: CMsgMatchMetaDataContents_Objective[];
  /**
   * @generated from protobuf field: optional CMsgMatchPlayerPathsData match_paths = 12;
   */
  match_paths?: CMsgMatchPlayerPathsData;
  /**
   * @generated from protobuf field: optional CMsgMatchPlayerDamageMatrix damage_matrix = 13;
   */
  damage_matrix?: CMsgMatchPlayerDamageMatrix;
  /**
   * @generated from protobuf field: repeated CMsgMatchMetaDataContents.Pause match_pauses = 14;
   */
  match_pauses: CMsgMatchMetaDataContents_Pause[];
  /**
   * @generated from protobuf field: repeated CMsgMatchMetaDataContents.CustomUserStatInfo custom_user_stats = 15;
   */
  custom_user_stats: CMsgMatchMetaDataContents_CustomUserStatInfo[];
  /**
   * @generated from protobuf field: repeated CMsgMatchMetaDataContents.WatchedDeathReplay watched_death_replays = 16;
   */
  watched_death_replays: CMsgMatchMetaDataContents_WatchedDeathReplay[];
  /**
   * @generated from protobuf field: optional uint64 objectives_mask_team0 = 17;
   */
  objectives_mask_team0?: bigint;
  /**
   * @generated from protobuf field: optional uint64 objectives_mask_team1 = 18;
   */
  objectives_mask_team1?: bigint;
  /**
   * @generated from protobuf field: repeated CMsgMatchMetaDataContents.MidBoss mid_boss = 19;
   */
  mid_boss: CMsgMatchMetaDataContents_MidBoss[];
}
/**
 * @generated from protobuf enum CMsgMatchMetaDataContents.EMatchOutcome
 */
export enum CMsgMatchMetaDataContents_EMatchOutcome {
  /**
   * @generated from protobuf enum value: k_eOutcome_TeamWin = 0;
   */
  k_eOutcome_TeamWin = 0,
  /**
   * @generated from protobuf enum value: k_eOutcome_Error = 1;
   */
  k_eOutcome_Error = 1,
}
/**
 * @generated from protobuf enum CMsgMatchMetaDataContents.EGoldSource
 */
export enum CMsgMatchMetaDataContents_EGoldSource {
  /**
   * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
   */
  UNSPECIFIED$ = 0,
  /**
   * @generated from protobuf enum value: k_ePlayers = 1;
   */
  k_ePlayers = 1,
  /**
   * @generated from protobuf enum value: k_eLaneCreeps = 2;
   */
  k_eLaneCreeps = 2,
  /**
   * @generated from protobuf enum value: k_eNeutrals = 3;
   */
  k_eNeutrals = 3,
  /**
   * @generated from protobuf enum value: k_eBosses = 4;
   */
  k_eBosses = 4,
  /**
   * @generated from protobuf enum value: k_eTreasure = 5;
   */
  k_eTreasure = 5,
  /**
   * @generated from protobuf enum value: k_eAssists = 6;
   */
  k_eAssists = 6,
  /**
   * @generated from protobuf enum value: k_eDenies = 7;
   */
  k_eDenies = 7,
}
/**
 * @generated from protobuf message CMsgMatchMetaData
 */
export interface CMsgMatchMetaData {
  /**
   * @generated from protobuf field: optional uint32 version = 1;
   */
  version?: number;
  /**
   * @generated from protobuf field: optional bytes match_details = 2;
   */
  match_details?: Uint8Array;
  /**
   * @generated from protobuf field: optional uint64 match_id = 3;
   */
  match_id?: bigint;
}
/**
 * @generated from protobuf message CMsgMapLine
 */
export interface CMsgMapLine {
  /**
   * @generated from protobuf field: optional int32 x = 1;
   */
  x?: number;
  /**
   * @generated from protobuf field: optional int32 y = 2;
   */
  y?: number;
  /**
   * @generated from protobuf field: optional bool initial = 3;
   */
  initial?: boolean;
}
/**
 * @generated from protobuf message CMsgAccountHeroStats
 */
export interface CMsgAccountHeroStats {
  /**
   * @generated from protobuf field: optional uint32 hero_id = 1;
   */
  hero_id?: number;
  /**
   * @generated from protobuf field: repeated uint32 stat_id = 2;
   */
  stat_id: number[];
  /**
   * @generated from protobuf field: repeated uint64 total_value = 3;
   */
  total_value: bigint[];
  /**
   * @generated from protobuf field: repeated uint32 medals_bronze = 4;
   */
  medals_bronze: number[];
  /**
   * @generated from protobuf field: repeated uint32 medals_silver = 5;
   */
  medals_silver: number[];
  /**
   * @generated from protobuf field: repeated uint32 medals_gold = 6;
   */
  medals_gold: number[];
}
/**
 * @generated from protobuf message CMsgAccountBookStats
 */
export interface CMsgAccountBookStats {
  /**
   * @generated from protobuf field: optional uint32 book_id = 1;
   */
  book_id?: number;
  /**
   * @generated from protobuf field: optional uint32 book_xp = 2;
   */
  book_xp?: number;
  /**
   * @generated from protobuf field: optional uint32 book_max_xp = 3;
   */
  book_max_xp?: number;
}
/**
 * @generated from protobuf message CMsgAccountStats
 */
export interface CMsgAccountStats {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  account_id?: number;
  /**
   * @generated from protobuf field: repeated CMsgAccountHeroStats stats = 2;
   */
  stats: CMsgAccountHeroStats[];
}
/**
 * @generated from protobuf message CMsgGCAccountData
 */
export interface CMsgGCAccountData {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  account_id?: number;
  /**
   * @generated from protobuf field: optional float cheater_report_score = 2;
   */
  cheater_report_score?: number;
}
/**
 * @generated from protobuf enum CMsgLaneColor
 */
export enum CMsgLaneColor {
  /**
   * @generated from protobuf enum value: k_ELaneColor_Invalid = 0;
   */
  k_ELaneColor_Invalid = 0,
  /**
   * @generated from protobuf enum value: k_ELaneColor_Yellow = 1;
   */
  k_ELaneColor_Yellow = 1,
  /**
   * @generated from protobuf enum value: k_ELaneColor_Green = 3;
   */
  k_ELaneColor_Green = 3,
  /**
   * @generated from protobuf enum value: k_ELaneColor_Blue = 4;
   */
  k_ELaneColor_Blue = 4,
  /**
   * @generated from protobuf enum value: k_ELaneColor_Purple = 6;
   */
  k_ELaneColor_Purple = 6,
}
/**
 * @generated from protobuf enum EGCCitadelCommonMessages
 */
export enum EGCCitadelCommonMessages {
  /**
   * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
   */
  UNSPECIFIED$ = 0,
  /**
   * @generated from protobuf enum value: k_EMsgAnyToGCReportAsserts = 7000;
   */
  k_EMsgAnyToGCReportAsserts = 7000,
  /**
   * @generated from protobuf enum value: k_EMsgAnyToGCReportAssertsResponse = 7001;
   */
  k_EMsgAnyToGCReportAssertsResponse = 7001,
}
/**
 * @generated from protobuf enum ECitadelMatchMode
 */
export enum ECitadelMatchMode {
  /**
   * @generated from protobuf enum value: k_ECitadelMatchMode_Invalid = 0;
   */
  k_ECitadelMatchMode_Invalid = 0,
  /**
   * @generated from protobuf enum value: k_ECitadelMatchMode_Unranked = 1;
   */
  k_ECitadelMatchMode_Unranked = 1,
  /**
   * @generated from protobuf enum value: k_ECitadelMatchMode_PrivateLobby = 2;
   */
  k_ECitadelMatchMode_PrivateLobby = 2,
  /**
   * @generated from protobuf enum value: k_ECitadelMatchMode_CoopBot = 3;
   */
  k_ECitadelMatchMode_CoopBot = 3,
  /**
   * @generated from protobuf enum value: k_ECitadelMatchMode_Ranked = 4;
   */
  k_ECitadelMatchMode_Ranked = 4,
  /**
   * @generated from protobuf enum value: k_ECitadelMatchMode_ServerTest = 5;
   */
  k_ECitadelMatchMode_ServerTest = 5,
  /**
   * @generated from protobuf enum value: k_ECitadelMatchMode_Tutorial = 6;
   */
  k_ECitadelMatchMode_Tutorial = 6,
}
/**
 * @generated from protobuf enum ECitadelLobbyTeam
 */
export enum ECitadelLobbyTeam {
  /**
   * @generated from protobuf enum value: k_ECitadelLobbyTeam_Team0 = 0;
   */
  k_ECitadelLobbyTeam_Team0 = 0,
  /**
   * @generated from protobuf enum value: k_ECitadelLobbyTeam_Team1 = 1;
   */
  k_ECitadelLobbyTeam_Team1 = 1,
  /**
   * @generated from protobuf enum value: k_ECitadelLobbyTeam_Spectator = 16;
   */
  k_ECitadelLobbyTeam_Spectator = 16,
}
/**
 * @generated from protobuf enum ECitadelAccountStatMedal
 */
export enum ECitadelAccountStatMedal {
  /**
   * @generated from protobuf enum value: k_eNone = 0;
   */
  k_eNone = 0,
  /**
   * @generated from protobuf enum value: k_eBronze = 1;
   */
  k_eBronze = 1,
  /**
   * @generated from protobuf enum value: k_eSilver = 2;
   */
  k_eSilver = 2,
  /**
   * @generated from protobuf enum value: k_eGold = 3;
   */
  k_eGold = 3,
}
/**
 * @generated from protobuf enum ECitadelObjective
 */
export enum ECitadelObjective {
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team0_Core = 0;
   */
  k_eCitadelObjective_Team0_Core = 0,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team0_Tier1_Lane1 = 1;
   */
  k_eCitadelObjective_Team0_Tier1_Lane1 = 1,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team0_Tier1_Lane2 = 2;
   */
  k_eCitadelObjective_Team0_Tier1_Lane2 = 2,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team0_Tier1_Lane3 = 3;
   */
  k_eCitadelObjective_Team0_Tier1_Lane3 = 3,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team0_Tier1_Lane4 = 4;
   */
  k_eCitadelObjective_Team0_Tier1_Lane4 = 4,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team0_Tier2_Lane1 = 5;
   */
  k_eCitadelObjective_Team0_Tier2_Lane1 = 5,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team0_Tier2_Lane2 = 6;
   */
  k_eCitadelObjective_Team0_Tier2_Lane2 = 6,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team0_Tier2_Lane3 = 7;
   */
  k_eCitadelObjective_Team0_Tier2_Lane3 = 7,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team0_Tier2_Lane4 = 8;
   */
  k_eCitadelObjective_Team0_Tier2_Lane4 = 8,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team0_Titan = 9;
   */
  k_eCitadelObjective_Team0_Titan = 9,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team0_TitanShieldGenerator_1 = 10;
   */
  k_eCitadelObjective_Team0_TitanShieldGenerator_1 = 10,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team0_TitanShieldGenerator_2 = 11;
   */
  k_eCitadelObjective_Team0_TitanShieldGenerator_2 = 11,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team0_BarrackBoss_Lane1 = 12;
   */
  k_eCitadelObjective_Team0_BarrackBoss_Lane1 = 12,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team0_BarrackBoss_Lane2 = 13;
   */
  k_eCitadelObjective_Team0_BarrackBoss_Lane2 = 13,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team0_BarrackBoss_Lane3 = 14;
   */
  k_eCitadelObjective_Team0_BarrackBoss_Lane3 = 14,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team0_BarrackBoss_Lane4 = 15;
   */
  k_eCitadelObjective_Team0_BarrackBoss_Lane4 = 15,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team1_Core = 16;
   */
  k_eCitadelObjective_Team1_Core = 16,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team1_Tier1_Lane1 = 17;
   */
  k_eCitadelObjective_Team1_Tier1_Lane1 = 17,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team1_Tier1_Lane2 = 18;
   */
  k_eCitadelObjective_Team1_Tier1_Lane2 = 18,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team1_Tier1_Lane3 = 19;
   */
  k_eCitadelObjective_Team1_Tier1_Lane3 = 19,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team1_Tier1_Lane4 = 20;
   */
  k_eCitadelObjective_Team1_Tier1_Lane4 = 20,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team1_Tier2_Lane1 = 21;
   */
  k_eCitadelObjective_Team1_Tier2_Lane1 = 21,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team1_Tier2_Lane2 = 22;
   */
  k_eCitadelObjective_Team1_Tier2_Lane2 = 22,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team1_Tier2_Lane3 = 23;
   */
  k_eCitadelObjective_Team1_Tier2_Lane3 = 23,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team1_Tier2_Lane4 = 24;
   */
  k_eCitadelObjective_Team1_Tier2_Lane4 = 24,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team1_Titan = 25;
   */
  k_eCitadelObjective_Team1_Titan = 25,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team1_TitanShieldGenerator_1 = 26;
   */
  k_eCitadelObjective_Team1_TitanShieldGenerator_1 = 26,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team1_TitanShieldGenerator_2 = 27;
   */
  k_eCitadelObjective_Team1_TitanShieldGenerator_2 = 27,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team1_BarrackBoss_Lane1 = 28;
   */
  k_eCitadelObjective_Team1_BarrackBoss_Lane1 = 28,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team1_BarrackBoss_Lane2 = 29;
   */
  k_eCitadelObjective_Team1_BarrackBoss_Lane2 = 29,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team1_BarrackBoss_Lane3 = 30;
   */
  k_eCitadelObjective_Team1_BarrackBoss_Lane3 = 30,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Team1_BarrackBoss_Lane4 = 31;
   */
  k_eCitadelObjective_Team1_BarrackBoss_Lane4 = 31,
  /**
   * @generated from protobuf enum value: k_eCitadelObjective_Neutral_Mid = 32;
   */
  k_eCitadelObjective_Neutral_Mid = 32,
}
/**
 * @generated from protobuf enum ECitadelTeamObjective
 */
export enum ECitadelTeamObjective {
  /**
   * @generated from protobuf enum value: k_eCitadelTeamObjective_Core = 0;
   */
  k_eCitadelTeamObjective_Core = 0,
  /**
   * @generated from protobuf enum value: k_eCitadelTeamObjective_Tier1_Lane1 = 1;
   */
  k_eCitadelTeamObjective_Tier1_Lane1 = 1,
  /**
   * @generated from protobuf enum value: k_eCitadelTeamObjective_Tier1_Lane2 = 2;
   */
  k_eCitadelTeamObjective_Tier1_Lane2 = 2,
  /**
   * @generated from protobuf enum value: k_eCitadelTeamObjective_Tier1_Lane3 = 3;
   */
  k_eCitadelTeamObjective_Tier1_Lane3 = 3,
  /**
   * @generated from protobuf enum value: k_eCitadelTeamObjective_Tier1_Lane4 = 4;
   */
  k_eCitadelTeamObjective_Tier1_Lane4 = 4,
  /**
   * @generated from protobuf enum value: k_eCitadelTeamObjective_Tier2_Lane1 = 5;
   */
  k_eCitadelTeamObjective_Tier2_Lane1 = 5,
  /**
   * @generated from protobuf enum value: k_eCitadelTeamObjective_Tier2_Lane2 = 6;
   */
  k_eCitadelTeamObjective_Tier2_Lane2 = 6,
  /**
   * @generated from protobuf enum value: k_eCitadelTeamObjective_Tier2_Lane3 = 7;
   */
  k_eCitadelTeamObjective_Tier2_Lane3 = 7,
  /**
   * @generated from protobuf enum value: k_eCitadelTeamObjective_Tier2_Lane4 = 8;
   */
  k_eCitadelTeamObjective_Tier2_Lane4 = 8,
  /**
   * @generated from protobuf enum value: k_eCitadelTeamObjective_Titan = 9;
   */
  k_eCitadelTeamObjective_Titan = 9,
  /**
   * @generated from protobuf enum value: k_eCitadelTeamObjective_TitanShieldGenerator_1 = 10;
   */
  k_eCitadelTeamObjective_TitanShieldGenerator_1 = 10,
  /**
   * @generated from protobuf enum value: k_eCitadelTeamObjective_TitanShieldGenerator_2 = 11;
   */
  k_eCitadelTeamObjective_TitanShieldGenerator_2 = 11,
  /**
   * @generated from protobuf enum value: k_eCitadelTeamObjective_BarrackBoss_Lane1 = 12;
   */
  k_eCitadelTeamObjective_BarrackBoss_Lane1 = 12,
  /**
   * @generated from protobuf enum value: k_eCitadelTeamObjective_BarrackBoss_Lane2 = 13;
   */
  k_eCitadelTeamObjective_BarrackBoss_Lane2 = 13,
  /**
   * @generated from protobuf enum value: k_eCitadelTeamObjective_BarrackBoss_Lane3 = 14;
   */
  k_eCitadelTeamObjective_BarrackBoss_Lane3 = 14,
  /**
   * @generated from protobuf enum value: k_eCitadelTeamObjective_BarrackBoss_Lane4 = 15;
   */
  k_eCitadelTeamObjective_BarrackBoss_Lane4 = 15,
}
/**
 * @generated from protobuf enum ECitadelBotDifficulty
 */
export enum ECitadelBotDifficulty {
  /**
   * @generated from protobuf enum value: k_ECitadelBotDifficulty_None = 0;
   */
  k_ECitadelBotDifficulty_None = 0,
  /**
   * @generated from protobuf enum value: k_ECitadelBotDifficulty_Easy = 1;
   */
  k_ECitadelBotDifficulty_Easy = 1,
  /**
   * @generated from protobuf enum value: k_ECitadelBotDifficulty_Medium = 2;
   */
  k_ECitadelBotDifficulty_Medium = 2,
  /**
   * @generated from protobuf enum value: k_ECitadelBotDifficulty_Hard = 3;
   */
  k_ECitadelBotDifficulty_Hard = 3,
  /**
   * @generated from protobuf enum value: k_ECitadelBotDifficulty_Nightmare = 4;
   */
  k_ECitadelBotDifficulty_Nightmare = 4,
  /**
   * @generated from protobuf enum value: k_ECitadelBotDifficulty_Guided = 5;
   */
  k_ECitadelBotDifficulty_Guided = 5,
}
/**
 * @generated from protobuf enum ECitadelRegionMode
 */
export enum ECitadelRegionMode {
  /**
   * @generated from protobuf enum value: k_ECitadelRegionMode_ROW = 0;
   */
  k_ECitadelRegionMode_ROW = 0,
  /**
   * @generated from protobuf enum value: k_ECitadelRegionMode_Europe = 1;
   */
  k_ECitadelRegionMode_Europe = 1,
  /**
   * @generated from protobuf enum value: k_ECitadelRegionMode_SEAsia = 2;
   */
  k_ECitadelRegionMode_SEAsia = 2,
  /**
   * @generated from protobuf enum value: k_ECitadelRegionMode_SAmerica = 3;
   */
  k_ECitadelRegionMode_SAmerica = 3,
  /**
   * @generated from protobuf enum value: k_ECitadelRegionMode_Russia = 4;
   */
  k_ECitadelRegionMode_Russia = 4,
  /**
   * @generated from protobuf enum value: k_ECitadelRegionMode_Oceania = 5;
   */
  k_ECitadelRegionMode_Oceania = 5,
}
/**
 * @generated from protobuf enum ECitadelGameMode
 */
export enum ECitadelGameMode {
  /**
   * @generated from protobuf enum value: k_ECitadelGameMode_Invalid = 0;
   */
  k_ECitadelGameMode_Invalid = 0,
  /**
   * @generated from protobuf enum value: k_ECitadelGameMode_Normal = 1;
   */
  k_ECitadelGameMode_Normal = 1,
  /**
   * @generated from protobuf enum value: k_ECitadelGameMode_1v1Test = 2;
   */
  k_ECitadelGameMode_1v1Test = 2,
  /**
   * @generated from protobuf enum value: k_ECitadelGameMode_Sandbox = 3;
   */
  k_ECitadelGameMode_Sandbox = 3,
}
/**
 * @generated from protobuf enum ELobbyServerState
 */
export enum ELobbyServerState {
  /**
   * @generated from protobuf enum value: k_eLobbyServerState_Assign = 0;
   */
  k_eLobbyServerState_Assign = 0,
  /**
   * @generated from protobuf enum value: k_eLobbyServerState_InGame = 1;
   */
  k_eLobbyServerState_InGame = 1,
  /**
   * @generated from protobuf enum value: k_eLobbyServerState_PostMatch = 2;
   */
  k_eLobbyServerState_PostMatch = 2,
  /**
   * @generated from protobuf enum value: k_eLobbyServerState_SignedOut = 3;
   */
  k_eLobbyServerState_SignedOut = 3,
  /**
   * @generated from protobuf enum value: k_eLobbyServerState_Abandoned = 4;
   */
  k_eLobbyServerState_Abandoned = 4,
}
/**
 * @generated from protobuf enum EBannedFeature
 */
export enum EBannedFeature {
  /**
   * @generated from protobuf enum value: k_eBannedFeature_Invalid = 0;
   */
  k_eBannedFeature_Invalid = 0,
  /**
   * @generated from protobuf enum value: k_eBannedFeature_LowPriorityMatchmaking = 1;
   */
  k_eBannedFeature_LowPriorityMatchmaking = 1,
  /**
   * @generated from protobuf enum value: k_eBannedFeature_CommsRestricted = 2;
   */
  k_eBannedFeature_CommsRestricted = 2,
  /**
   * @generated from protobuf enum value: k_eBannedFeature_ReportingDisabled = 3;
   */
  k_eBannedFeature_ReportingDisabled = 3,
}
/**
 * @generated from protobuf enum EFeatureBanReason
 */
export enum EFeatureBanReason {
  /**
   * @generated from protobuf enum value: k_eFeatureBanReason_Invalid = 0;
   */
  k_eFeatureBanReason_Invalid = 0,
  /**
   * @generated from protobuf enum value: k_eFeatureBanReason_DevCommand = 1;
   */
  k_eFeatureBanReason_DevCommand = 1,
  /**
   * @generated from protobuf enum value: k_eFeatureBanReason_PlayerReports = 2;
   */
  k_eFeatureBanReason_PlayerReports = 2,
  /**
   * @generated from protobuf enum value: k_eFeatureBanReason_MatchAbandons = 3;
   */
  k_eFeatureBanReason_MatchAbandons = 3,
  /**
   * @generated from protobuf enum value: k_eFeatureBanReason_ExcessivePlayerReports = 4;
   */
  k_eFeatureBanReason_ExcessivePlayerReports = 4,
}
// @generated message type with reflection information, may provide speed optimized methods
class CSOCitadelLobby$Type extends MessageType<CSOCitadelLobby> {
  constructor() {
    super("CSOCitadelLobby", [
      {
        no: 1,
        name: "lobby_id",
        kind: "scalar",
        localName: "lobby_id",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 2,
        name: "match_id",
        kind: "scalar",
        localName: "match_id",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 3,
        name: "match_mode",
        kind: "enum",
        localName: "match_mode",
        opt: true,
        T: () => ["ECitadelMatchMode", ECitadelMatchMode],
      },
      {
        no: 4,
        name: "game_mode",
        kind: "enum",
        localName: "game_mode",
        opt: true,
        T: () => ["ECitadelGameMode", ECitadelGameMode],
      },
      {
        no: 5,
        name: "compatibility_version",
        kind: "scalar",
        localName: "compatibility_version",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "extra_messages",
        kind: "message",
        localName: "extra_messages",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CExtraMsgBlock,
      },
      {
        no: 7,
        name: "server_steam_id",
        kind: "scalar",
        localName: "server_steam_id",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 8,
        name: "server_state",
        kind: "enum",
        localName: "server_state",
        opt: true,
        T: () => ["ELobbyServerState", ELobbyServerState],
      },
      {
        no: 9,
        name: "udp_connect_ip",
        kind: "scalar",
        localName: "udp_connect_ip",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 10,
        name: "udp_connect_port",
        kind: "scalar",
        localName: "udp_connect_port",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 12,
        name: "sdr_address",
        kind: "scalar",
        localName: "sdr_address",
        opt: true,
        T: 12 /*ScalarType.BYTES*/,
      },
      {
        no: 13,
        name: "server_version",
        kind: "scalar",
        localName: "server_version",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 14,
        name: "safe_to_abandon",
        kind: "scalar",
        localName: "safe_to_abandon",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(value?: PartialMessage<CSOCitadelLobby>): CSOCitadelLobby {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.extra_messages = [];
    if (value !== undefined) reflectionMergePartial<CSOCitadelLobby>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CSOCitadelLobby,
  ): CSOCitadelLobby {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 lobby_id */ 1:
          message.lobby_id = reader.uint64().toBigInt();
          break;
        case /* optional uint64 match_id */ 2:
          message.match_id = reader.uint64().toBigInt();
          break;
        case /* optional ECitadelMatchMode match_mode */ 3:
          message.match_mode = reader.int32();
          break;
        case /* optional ECitadelGameMode game_mode */ 4:
          message.game_mode = reader.int32();
          break;
        case /* optional uint32 compatibility_version */ 5:
          message.compatibility_version = reader.uint32();
          break;
        case /* repeated CExtraMsgBlock extra_messages */ 6:
          message.extra_messages.push(CExtraMsgBlock.internalBinaryRead(reader, reader.uint32(), options));
          break;
        case /* optional fixed64 server_steam_id */ 7:
          message.server_steam_id = reader.fixed64().toBigInt();
          break;
        case /* optional ELobbyServerState server_state */ 8:
          message.server_state = reader.int32();
          break;
        case /* optional uint32 udp_connect_ip */ 9:
          message.udp_connect_ip = reader.uint32();
          break;
        case /* optional uint32 udp_connect_port */ 10:
          message.udp_connect_port = reader.uint32();
          break;
        case /* optional bytes sdr_address */ 12:
          message.sdr_address = reader.bytes();
          break;
        case /* optional uint32 server_version */ 13:
          message.server_version = reader.uint32();
          break;
        case /* optional bool safe_to_abandon */ 14:
          message.safe_to_abandon = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: CSOCitadelLobby, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* optional uint64 lobby_id = 1; */
    if (message.lobby_id !== undefined) writer.tag(1, WireType.Varint).uint64(message.lobby_id);
    /* optional uint64 match_id = 2; */
    if (message.match_id !== undefined) writer.tag(2, WireType.Varint).uint64(message.match_id);
    /* optional ECitadelMatchMode match_mode = 3; */
    if (message.match_mode !== undefined) writer.tag(3, WireType.Varint).int32(message.match_mode);
    /* optional ECitadelGameMode game_mode = 4; */
    if (message.game_mode !== undefined) writer.tag(4, WireType.Varint).int32(message.game_mode);
    /* optional uint32 compatibility_version = 5; */
    if (message.compatibility_version !== undefined)
      writer.tag(5, WireType.Varint).uint32(message.compatibility_version);
    /* repeated CExtraMsgBlock extra_messages = 6; */
    for (let i = 0; i < message.extra_messages.length; i++)
      CExtraMsgBlock.internalBinaryWrite(
        message.extra_messages[i],
        writer.tag(6, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional fixed64 server_steam_id = 7; */
    if (message.server_steam_id !== undefined) writer.tag(7, WireType.Bit64).fixed64(message.server_steam_id);
    /* optional ELobbyServerState server_state = 8; */
    if (message.server_state !== undefined) writer.tag(8, WireType.Varint).int32(message.server_state);
    /* optional uint32 udp_connect_ip = 9; */
    if (message.udp_connect_ip !== undefined) writer.tag(9, WireType.Varint).uint32(message.udp_connect_ip);
    /* optional uint32 udp_connect_port = 10; */
    if (message.udp_connect_port !== undefined) writer.tag(10, WireType.Varint).uint32(message.udp_connect_port);
    /* optional bytes sdr_address = 12; */
    if (message.sdr_address !== undefined) writer.tag(12, WireType.LengthDelimited).bytes(message.sdr_address);
    /* optional uint32 server_version = 13; */
    if (message.server_version !== undefined) writer.tag(13, WireType.Varint).uint32(message.server_version);
    /* optional bool safe_to_abandon = 14; */
    if (message.safe_to_abandon !== undefined) writer.tag(14, WireType.Varint).bool(message.safe_to_abandon);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CSOCitadelLobby
 */
export const CSOCitadelLobby = new CSOCitadelLobby$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CLobbyData_PostMatchSurvey$Type extends MessageType<CLobbyData_PostMatchSurvey> {
  constructor() {
    super("CLobbyData_PostMatchSurvey", [
      {
        no: 1,
        name: "surveys",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CLobbyData_PostMatchSurvey_PlayerSurvey,
      },
    ]);
  }
  create(value?: PartialMessage<CLobbyData_PostMatchSurvey>): CLobbyData_PostMatchSurvey {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.surveys = [];
    if (value !== undefined) reflectionMergePartial<CLobbyData_PostMatchSurvey>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CLobbyData_PostMatchSurvey,
  ): CLobbyData_PostMatchSurvey {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated CLobbyData_PostMatchSurvey.PlayerSurvey surveys */ 1:
          message.surveys.push(
            CLobbyData_PostMatchSurvey_PlayerSurvey.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CLobbyData_PostMatchSurvey,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated CLobbyData_PostMatchSurvey.PlayerSurvey surveys = 1; */
    for (let i = 0; i < message.surveys.length; i++)
      CLobbyData_PostMatchSurvey_PlayerSurvey.internalBinaryWrite(
        message.surveys[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CLobbyData_PostMatchSurvey
 */
export const CLobbyData_PostMatchSurvey = new CLobbyData_PostMatchSurvey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CLobbyData_PostMatchSurvey_PlayerSurvey$Type extends MessageType<CLobbyData_PostMatchSurvey_PlayerSurvey> {
  constructor() {
    super("CLobbyData_PostMatchSurvey.PlayerSurvey", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        localName: "account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "question_id",
        kind: "scalar",
        localName: "question_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CLobbyData_PostMatchSurvey_PlayerSurvey>): CLobbyData_PostMatchSurvey_PlayerSurvey {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CLobbyData_PostMatchSurvey_PlayerSurvey>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CLobbyData_PostMatchSurvey_PlayerSurvey,
  ): CLobbyData_PostMatchSurvey_PlayerSurvey {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.account_id = reader.uint32();
          break;
        case /* optional uint32 question_id */ 2:
          message.question_id = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CLobbyData_PostMatchSurvey_PlayerSurvey,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
    /* optional uint32 question_id = 2; */
    if (message.question_id !== undefined) writer.tag(2, WireType.Varint).uint32(message.question_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CLobbyData_PostMatchSurvey.PlayerSurvey
 */
export const CLobbyData_PostMatchSurvey_PlayerSurvey = new CLobbyData_PostMatchSurvey_PlayerSurvey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgHeroSelectionMatchInfo$Type extends MessageType<CMsgHeroSelectionMatchInfo> {
  constructor() {
    super("CMsgHeroSelectionMatchInfo", [
      {
        no: 1,
        name: "hero_selections",
        kind: "message",
        localName: "hero_selections",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgHeroSelectionMatchInfo_Hero,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgHeroSelectionMatchInfo>): CMsgHeroSelectionMatchInfo {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.hero_selections = [];
    if (value !== undefined) reflectionMergePartial<CMsgHeroSelectionMatchInfo>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgHeroSelectionMatchInfo,
  ): CMsgHeroSelectionMatchInfo {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated CMsgHeroSelectionMatchInfo.Hero hero_selections */ 1:
          message.hero_selections.push(
            CMsgHeroSelectionMatchInfo_Hero.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgHeroSelectionMatchInfo,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated CMsgHeroSelectionMatchInfo.Hero hero_selections = 1; */
    for (let i = 0; i < message.hero_selections.length; i++)
      CMsgHeroSelectionMatchInfo_Hero.internalBinaryWrite(
        message.hero_selections[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgHeroSelectionMatchInfo
 */
export const CMsgHeroSelectionMatchInfo = new CMsgHeroSelectionMatchInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgHeroSelectionMatchInfo_Hero$Type extends MessageType<CMsgHeroSelectionMatchInfo_Hero> {
  constructor() {
    super("CMsgHeroSelectionMatchInfo.Hero", [
      {
        no: 1,
        name: "hero_id",
        kind: "scalar",
        localName: "hero_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "priority",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgHeroSelectionMatchInfo_Hero>): CMsgHeroSelectionMatchInfo_Hero {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgHeroSelectionMatchInfo_Hero>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgHeroSelectionMatchInfo_Hero,
  ): CMsgHeroSelectionMatchInfo_Hero {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 hero_id */ 1:
          message.hero_id = reader.uint32();
          break;
        case /* optional uint32 priority */ 2:
          message.priority = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgHeroSelectionMatchInfo_Hero,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 hero_id = 1; */
    if (message.hero_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.hero_id);
    /* optional uint32 priority = 2; */
    if (message.priority !== undefined) writer.tag(2, WireType.Varint).uint32(message.priority);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgHeroSelectionMatchInfo.Hero
 */
export const CMsgHeroSelectionMatchInfo_Hero = new CMsgHeroSelectionMatchInfo_Hero$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgStartFindingMatchInfo$Type extends MessageType<CMsgStartFindingMatchInfo> {
  constructor() {
    super("CMsgStartFindingMatchInfo", [
      {
        no: 1,
        name: "server_search_key",
        kind: "scalar",
        localName: "server_search_key",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 2,
        name: "server_command_string",
        kind: "scalar",
        localName: "server_command_string",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 3,
        name: "match_mode",
        kind: "enum",
        localName: "match_mode",
        opt: true,
        T: () => ["ECitadelMatchMode", ECitadelMatchMode],
      },
      {
        no: 5,
        name: "game_mode",
        kind: "enum",
        localName: "game_mode",
        opt: true,
        T: () => ["ECitadelGameMode", ECitadelGameMode],
      },
      {
        no: 6,
        name: "solo_match",
        kind: "scalar",
        localName: "solo_match",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 7,
        name: "bot_difficulty",
        kind: "enum",
        localName: "bot_difficulty",
        opt: true,
        T: () => ["ECitadelBotDifficulty", ECitadelBotDifficulty],
      },
      {
        no: 8,
        name: "region_mode",
        kind: "enum",
        localName: "region_mode",
        opt: true,
        T: () => ["ECitadelRegionMode", ECitadelRegionMode],
      },
    ]);
  }
  create(value?: PartialMessage<CMsgStartFindingMatchInfo>): CMsgStartFindingMatchInfo {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgStartFindingMatchInfo>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgStartFindingMatchInfo,
  ): CMsgStartFindingMatchInfo {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string server_search_key */ 1:
          message.server_search_key = reader.string();
          break;
        case /* optional string server_command_string */ 2:
          message.server_command_string = reader.string();
          break;
        case /* optional ECitadelMatchMode match_mode */ 3:
          message.match_mode = reader.int32();
          break;
        case /* optional ECitadelGameMode game_mode */ 5:
          message.game_mode = reader.int32();
          break;
        case /* optional bool solo_match */ 6:
          message.solo_match = reader.bool();
          break;
        case /* optional ECitadelBotDifficulty bot_difficulty */ 7:
          message.bot_difficulty = reader.int32();
          break;
        case /* optional ECitadelRegionMode region_mode */ 8:
          message.region_mode = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgStartFindingMatchInfo,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional string server_search_key = 1; */
    if (message.server_search_key !== undefined)
      writer.tag(1, WireType.LengthDelimited).string(message.server_search_key);
    /* optional string server_command_string = 2; */
    if (message.server_command_string !== undefined)
      writer.tag(2, WireType.LengthDelimited).string(message.server_command_string);
    /* optional ECitadelMatchMode match_mode = 3; */
    if (message.match_mode !== undefined) writer.tag(3, WireType.Varint).int32(message.match_mode);
    /* optional ECitadelGameMode game_mode = 5; */
    if (message.game_mode !== undefined) writer.tag(5, WireType.Varint).int32(message.game_mode);
    /* optional bool solo_match = 6; */
    if (message.solo_match !== undefined) writer.tag(6, WireType.Varint).bool(message.solo_match);
    /* optional ECitadelBotDifficulty bot_difficulty = 7; */
    if (message.bot_difficulty !== undefined) writer.tag(7, WireType.Varint).int32(message.bot_difficulty);
    /* optional ECitadelRegionMode region_mode = 8; */
    if (message.region_mode !== undefined) writer.tag(8, WireType.Varint).int32(message.region_mode);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgStartFindingMatchInfo
 */
export const CMsgStartFindingMatchInfo = new CMsgStartFindingMatchInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgAnyToGCReportAsserts$Type extends MessageType<CMsgAnyToGCReportAsserts> {
  constructor() {
    super("CMsgAnyToGCReportAsserts", [
      {
        no: 1,
        name: "version",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "asserts",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgAnyToGCReportAsserts_TrackedAssert,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgAnyToGCReportAsserts>): CMsgAnyToGCReportAsserts {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.asserts = [];
    if (value !== undefined) reflectionMergePartial<CMsgAnyToGCReportAsserts>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgAnyToGCReportAsserts,
  ): CMsgAnyToGCReportAsserts {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 version */ 1:
          message.version = reader.uint32();
          break;
        case /* repeated CMsgAnyToGCReportAsserts.TrackedAssert asserts */ 2:
          message.asserts.push(
            CMsgAnyToGCReportAsserts_TrackedAssert.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgAnyToGCReportAsserts,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 version = 1; */
    if (message.version !== undefined) writer.tag(1, WireType.Varint).uint32(message.version);
    /* repeated CMsgAnyToGCReportAsserts.TrackedAssert asserts = 2; */
    for (let i = 0; i < message.asserts.length; i++)
      CMsgAnyToGCReportAsserts_TrackedAssert.internalBinaryWrite(
        message.asserts[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgAnyToGCReportAsserts
 */
export const CMsgAnyToGCReportAsserts = new CMsgAnyToGCReportAsserts$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgAnyToGCReportAsserts_TrackedAssert$Type extends MessageType<CMsgAnyToGCReportAsserts_TrackedAssert> {
  constructor() {
    super("CMsgAnyToGCReportAsserts.TrackedAssert", [
      {
        no: 1,
        name: "filename",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 2,
        name: "line_number",
        kind: "scalar",
        localName: "line_number",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "sample_msg",
        kind: "scalar",
        localName: "sample_msg",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 4,
        name: "sample_stack",
        kind: "scalar",
        localName: "sample_stack",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 5,
        name: "times_fired",
        kind: "scalar",
        localName: "times_fired",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "function_name",
        kind: "scalar",
        localName: "function_name",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 7,
        name: "condition",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 8,
        name: "total_times_fired",
        kind: "scalar",
        localName: "total_times_fired",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgAnyToGCReportAsserts_TrackedAssert>): CMsgAnyToGCReportAsserts_TrackedAssert {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgAnyToGCReportAsserts_TrackedAssert>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgAnyToGCReportAsserts_TrackedAssert,
  ): CMsgAnyToGCReportAsserts_TrackedAssert {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string filename */ 1:
          message.filename = reader.string();
          break;
        case /* optional uint32 line_number */ 2:
          message.line_number = reader.uint32();
          break;
        case /* optional string sample_msg */ 3:
          message.sample_msg = reader.string();
          break;
        case /* optional string sample_stack */ 4:
          message.sample_stack = reader.string();
          break;
        case /* optional uint32 times_fired */ 5:
          message.times_fired = reader.uint32();
          break;
        case /* optional string function_name */ 6:
          message.function_name = reader.string();
          break;
        case /* optional string condition */ 7:
          message.condition = reader.string();
          break;
        case /* optional uint32 total_times_fired */ 8:
          message.total_times_fired = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgAnyToGCReportAsserts_TrackedAssert,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional string filename = 1; */
    if (message.filename !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.filename);
    /* optional uint32 line_number = 2; */
    if (message.line_number !== undefined) writer.tag(2, WireType.Varint).uint32(message.line_number);
    /* optional string sample_msg = 3; */
    if (message.sample_msg !== undefined) writer.tag(3, WireType.LengthDelimited).string(message.sample_msg);
    /* optional string sample_stack = 4; */
    if (message.sample_stack !== undefined) writer.tag(4, WireType.LengthDelimited).string(message.sample_stack);
    /* optional uint32 times_fired = 5; */
    if (message.times_fired !== undefined) writer.tag(5, WireType.Varint).uint32(message.times_fired);
    /* optional string function_name = 6; */
    if (message.function_name !== undefined) writer.tag(6, WireType.LengthDelimited).string(message.function_name);
    /* optional string condition = 7; */
    if (message.condition !== undefined) writer.tag(7, WireType.LengthDelimited).string(message.condition);
    /* optional uint32 total_times_fired = 8; */
    if (message.total_times_fired !== undefined) writer.tag(8, WireType.Varint).uint32(message.total_times_fired);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgAnyToGCReportAsserts.TrackedAssert
 */
export const CMsgAnyToGCReportAsserts_TrackedAssert = new CMsgAnyToGCReportAsserts_TrackedAssert$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgAnyToGCReportAssertsResponse$Type extends MessageType<CMsgAnyToGCReportAssertsResponse> {
  constructor() {
    super("CMsgAnyToGCReportAssertsResponse", [
      {
        no: 1,
        name: "success",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgAnyToGCReportAssertsResponse>): CMsgAnyToGCReportAssertsResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgAnyToGCReportAssertsResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgAnyToGCReportAssertsResponse,
  ): CMsgAnyToGCReportAssertsResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional bool success */ 1:
          message.success = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgAnyToGCReportAssertsResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional bool success = 1; */
    if (message.success !== undefined) writer.tag(1, WireType.Varint).bool(message.success);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgAnyToGCReportAssertsResponse
 */
export const CMsgAnyToGCReportAssertsResponse = new CMsgAnyToGCReportAssertsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgRegionPingTimesClient$Type extends MessageType<CMsgRegionPingTimesClient> {
  constructor() {
    super("CMsgRegionPingTimesClient", [
      {
        no: 1,
        name: "data_center_codes",
        kind: "scalar",
        localName: "data_center_codes",
        repeat: 1 /*RepeatType.PACKED*/,
        T: 7 /*ScalarType.FIXED32*/,
      },
      {
        no: 2,
        name: "ping_times",
        kind: "scalar",
        localName: "ping_times",
        repeat: 1 /*RepeatType.PACKED*/,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgRegionPingTimesClient>): CMsgRegionPingTimesClient {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.data_center_codes = [];
    message.ping_times = [];
    if (value !== undefined) reflectionMergePartial<CMsgRegionPingTimesClient>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgRegionPingTimesClient,
  ): CMsgRegionPingTimesClient {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated fixed32 data_center_codes = 1 [packed = true];*/ 1:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.data_center_codes.push(reader.fixed32());
          else message.data_center_codes.push(reader.fixed32());
          break;
        case /* repeated uint32 ping_times = 2 [packed = true];*/ 2:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.ping_times.push(reader.uint32());
          else message.ping_times.push(reader.uint32());
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgRegionPingTimesClient,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated fixed32 data_center_codes = 1 [packed = true]; */
    if (message.data_center_codes.length) {
      writer.tag(1, WireType.LengthDelimited).fork();
      for (let i = 0; i < message.data_center_codes.length; i++) writer.fixed32(message.data_center_codes[i]);
      writer.join();
    }
    /* repeated uint32 ping_times = 2 [packed = true]; */
    if (message.ping_times.length) {
      writer.tag(2, WireType.LengthDelimited).fork();
      for (let i = 0; i < message.ping_times.length; i++) writer.uint32(message.ping_times[i]);
      writer.join();
    }
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgRegionPingTimesClient
 */
export const CMsgRegionPingTimesClient = new CMsgRegionPingTimesClient$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSOCitadelParty$Type extends MessageType<CSOCitadelParty> {
  constructor() {
    super("CSOCitadelParty", [
      {
        no: 1,
        name: "party_id",
        kind: "scalar",
        localName: "party_id",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 2,
        name: "members",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CSOCitadelParty_Member,
      },
      {
        no: 3,
        name: "invites",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CSOCitadelParty_Invite,
      },
      {
        no: 4,
        name: "dev_server_command",
        kind: "scalar",
        localName: "dev_server_command",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 5,
        name: "left_members",
        kind: "message",
        localName: "left_members",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CSOCitadelParty_LeftMember,
      },
      {
        no: 6,
        name: "join_code",
        kind: "scalar",
        localName: "join_code",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 7,
        name: "bot_difficulty",
        kind: "enum",
        localName: "bot_difficulty",
        opt: true,
        T: () => ["ECitadelBotDifficulty", ECitadelBotDifficulty],
      },
      {
        no: 9,
        name: "match_mode",
        kind: "enum",
        localName: "match_mode",
        opt: true,
        T: () => ["ECitadelMatchMode", ECitadelMatchMode],
      },
      {
        no: 10,
        name: "game_mode",
        kind: "enum",
        localName: "game_mode",
        opt: true,
        T: () => ["ECitadelGameMode", ECitadelGameMode],
      },
      {
        no: 11,
        name: "match_making_start_time",
        kind: "scalar",
        localName: "match_making_start_time",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 12,
        name: "server_search_key",
        kind: "scalar",
        localName: "server_search_key",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 13,
        name: "is_high_skill_range_party",
        kind: "scalar",
        localName: "is_high_skill_range_party",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 14,
        name: "chat_mode",
        kind: "enum",
        localName: "chat_mode",
        opt: true,
        T: () => ["CSOCitadelParty.EChatMode", CSOCitadelParty_EChatMode],
      },
      {
        no: 15,
        name: "region_mode",
        kind: "enum",
        localName: "region_mode",
        opt: true,
        T: () => ["ECitadelRegionMode", ECitadelRegionMode],
      },
      {
        no: 16,
        name: "is_private_lobby",
        kind: "scalar",
        localName: "is_private_lobby",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 17,
        name: "private_lobby_settings",
        kind: "message",
        localName: "private_lobby_settings",
        T: () => CSOCitadelParty_PrivateLobbySettings,
      },
    ]);
  }
  create(value?: PartialMessage<CSOCitadelParty>): CSOCitadelParty {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.members = [];
    message.invites = [];
    message.left_members = [];
    if (value !== undefined) reflectionMergePartial<CSOCitadelParty>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CSOCitadelParty,
  ): CSOCitadelParty {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 party_id */ 1:
          message.party_id = reader.uint64().toBigInt();
          break;
        case /* repeated CSOCitadelParty.Member members */ 2:
          message.members.push(CSOCitadelParty_Member.internalBinaryRead(reader, reader.uint32(), options));
          break;
        case /* repeated CSOCitadelParty.Invite invites */ 3:
          message.invites.push(CSOCitadelParty_Invite.internalBinaryRead(reader, reader.uint32(), options));
          break;
        case /* optional string dev_server_command */ 4:
          message.dev_server_command = reader.string();
          break;
        case /* repeated CSOCitadelParty.LeftMember left_members */ 5:
          message.left_members.push(CSOCitadelParty_LeftMember.internalBinaryRead(reader, reader.uint32(), options));
          break;
        case /* optional uint64 join_code */ 6:
          message.join_code = reader.uint64().toBigInt();
          break;
        case /* optional ECitadelBotDifficulty bot_difficulty */ 7:
          message.bot_difficulty = reader.int32();
          break;
        case /* optional ECitadelMatchMode match_mode */ 9:
          message.match_mode = reader.int32();
          break;
        case /* optional ECitadelGameMode game_mode */ 10:
          message.game_mode = reader.int32();
          break;
        case /* optional uint32 match_making_start_time */ 11:
          message.match_making_start_time = reader.uint32();
          break;
        case /* optional string server_search_key */ 12:
          message.server_search_key = reader.string();
          break;
        case /* optional bool is_high_skill_range_party */ 13:
          message.is_high_skill_range_party = reader.bool();
          break;
        case /* optional CSOCitadelParty.EChatMode chat_mode */ 14:
          message.chat_mode = reader.int32();
          break;
        case /* optional ECitadelRegionMode region_mode */ 15:
          message.region_mode = reader.int32();
          break;
        case /* optional bool is_private_lobby */ 16:
          message.is_private_lobby = reader.bool();
          break;
        case /* optional CSOCitadelParty.PrivateLobbySettings private_lobby_settings */ 17:
          message.private_lobby_settings = CSOCitadelParty_PrivateLobbySettings.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.private_lobby_settings,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: CSOCitadelParty, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* optional uint64 party_id = 1; */
    if (message.party_id !== undefined) writer.tag(1, WireType.Varint).uint64(message.party_id);
    /* repeated CSOCitadelParty.Member members = 2; */
    for (let i = 0; i < message.members.length; i++)
      CSOCitadelParty_Member.internalBinaryWrite(
        message.members[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated CSOCitadelParty.Invite invites = 3; */
    for (let i = 0; i < message.invites.length; i++)
      CSOCitadelParty_Invite.internalBinaryWrite(
        message.invites[i],
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional string dev_server_command = 4; */
    if (message.dev_server_command !== undefined)
      writer.tag(4, WireType.LengthDelimited).string(message.dev_server_command);
    /* repeated CSOCitadelParty.LeftMember left_members = 5; */
    for (let i = 0; i < message.left_members.length; i++)
      CSOCitadelParty_LeftMember.internalBinaryWrite(
        message.left_members[i],
        writer.tag(5, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional uint64 join_code = 6; */
    if (message.join_code !== undefined) writer.tag(6, WireType.Varint).uint64(message.join_code);
    /* optional ECitadelBotDifficulty bot_difficulty = 7; */
    if (message.bot_difficulty !== undefined) writer.tag(7, WireType.Varint).int32(message.bot_difficulty);
    /* optional ECitadelMatchMode match_mode = 9; */
    if (message.match_mode !== undefined) writer.tag(9, WireType.Varint).int32(message.match_mode);
    /* optional ECitadelGameMode game_mode = 10; */
    if (message.game_mode !== undefined) writer.tag(10, WireType.Varint).int32(message.game_mode);
    /* optional uint32 match_making_start_time = 11; */
    if (message.match_making_start_time !== undefined)
      writer.tag(11, WireType.Varint).uint32(message.match_making_start_time);
    /* optional string server_search_key = 12; */
    if (message.server_search_key !== undefined)
      writer.tag(12, WireType.LengthDelimited).string(message.server_search_key);
    /* optional bool is_high_skill_range_party = 13; */
    if (message.is_high_skill_range_party !== undefined)
      writer.tag(13, WireType.Varint).bool(message.is_high_skill_range_party);
    /* optional CSOCitadelParty.EChatMode chat_mode = 14; */
    if (message.chat_mode !== undefined) writer.tag(14, WireType.Varint).int32(message.chat_mode);
    /* optional ECitadelRegionMode region_mode = 15; */
    if (message.region_mode !== undefined) writer.tag(15, WireType.Varint).int32(message.region_mode);
    /* optional bool is_private_lobby = 16; */
    if (message.is_private_lobby !== undefined) writer.tag(16, WireType.Varint).bool(message.is_private_lobby);
    /* optional CSOCitadelParty.PrivateLobbySettings private_lobby_settings = 17; */
    if (message.private_lobby_settings)
      CSOCitadelParty_PrivateLobbySettings.internalBinaryWrite(
        message.private_lobby_settings,
        writer.tag(17, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CSOCitadelParty
 */
export const CSOCitadelParty = new CSOCitadelParty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSOCitadelParty_PrivateLobbySlot$Type extends MessageType<CSOCitadelParty_PrivateLobbySlot> {
  constructor() {
    super("CSOCitadelParty.PrivateLobbySlot", [
      {
        no: 1,
        name: "slot_id",
        kind: "scalar",
        localName: "slot_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "player_account_id",
        kind: "scalar",
        localName: "player_account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CSOCitadelParty_PrivateLobbySlot>): CSOCitadelParty_PrivateLobbySlot {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CSOCitadelParty_PrivateLobbySlot>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CSOCitadelParty_PrivateLobbySlot,
  ): CSOCitadelParty_PrivateLobbySlot {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 slot_id */ 1:
          message.slot_id = reader.uint32();
          break;
        case /* optional uint32 player_account_id */ 2:
          message.player_account_id = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CSOCitadelParty_PrivateLobbySlot,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 slot_id = 1; */
    if (message.slot_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.slot_id);
    /* optional uint32 player_account_id = 2; */
    if (message.player_account_id !== undefined) writer.tag(2, WireType.Varint).uint32(message.player_account_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CSOCitadelParty.PrivateLobbySlot
 */
export const CSOCitadelParty_PrivateLobbySlot = new CSOCitadelParty_PrivateLobbySlot$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSOCitadelParty_ServerRegion$Type extends MessageType<CSOCitadelParty_ServerRegion> {
  constructor() {
    super("CSOCitadelParty.ServerRegion", [
      {
        no: 1,
        name: "region_id",
        kind: "scalar",
        localName: "region_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CSOCitadelParty_ServerRegion>): CSOCitadelParty_ServerRegion {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CSOCitadelParty_ServerRegion>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CSOCitadelParty_ServerRegion,
  ): CSOCitadelParty_ServerRegion {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 region_id */ 1:
          message.region_id = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CSOCitadelParty_ServerRegion,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 region_id = 1; */
    if (message.region_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.region_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CSOCitadelParty.ServerRegion
 */
export const CSOCitadelParty_ServerRegion = new CSOCitadelParty_ServerRegion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSOCitadelParty_PrivateLobbySettings$Type extends MessageType<CSOCitadelParty_PrivateLobbySettings> {
  constructor() {
    super("CSOCitadelParty.PrivateLobbySettings", [
      {
        no: 1,
        name: "min_roster_size",
        kind: "scalar",
        localName: "min_roster_size",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "match_slots",
        kind: "message",
        localName: "match_slots",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CSOCitadelParty_PrivateLobbySlot,
      },
      {
        no: 3,
        name: "randomize_lanes",
        kind: "scalar",
        localName: "randomize_lanes",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 4,
        name: "server_region",
        kind: "scalar",
        localName: "server_region",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "is_publicly_visible",
        kind: "scalar",
        localName: "is_publicly_visible",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 7,
        name: "cheats_enabled",
        kind: "scalar",
        localName: "cheats_enabled",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 8,
        name: "available_regions",
        kind: "message",
        localName: "available_regions",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CSOCitadelParty_ServerRegion,
      },
      {
        no: 9,
        name: "duplicate_heroes_enabled",
        kind: "scalar",
        localName: "duplicate_heroes_enabled",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(value?: PartialMessage<CSOCitadelParty_PrivateLobbySettings>): CSOCitadelParty_PrivateLobbySettings {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.match_slots = [];
    message.available_regions = [];
    if (value !== undefined) reflectionMergePartial<CSOCitadelParty_PrivateLobbySettings>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CSOCitadelParty_PrivateLobbySettings,
  ): CSOCitadelParty_PrivateLobbySettings {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 min_roster_size */ 1:
          message.min_roster_size = reader.uint32();
          break;
        case /* repeated CSOCitadelParty.PrivateLobbySlot match_slots */ 2:
          message.match_slots.push(
            CSOCitadelParty_PrivateLobbySlot.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* optional bool randomize_lanes */ 3:
          message.randomize_lanes = reader.bool();
          break;
        case /* optional uint32 server_region */ 4:
          message.server_region = reader.uint32();
          break;
        case /* optional bool is_publicly_visible */ 6:
          message.is_publicly_visible = reader.bool();
          break;
        case /* optional bool cheats_enabled */ 7:
          message.cheats_enabled = reader.bool();
          break;
        case /* repeated CSOCitadelParty.ServerRegion available_regions */ 8:
          message.available_regions.push(
            CSOCitadelParty_ServerRegion.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* optional bool duplicate_heroes_enabled */ 9:
          message.duplicate_heroes_enabled = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CSOCitadelParty_PrivateLobbySettings,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 min_roster_size = 1; */
    if (message.min_roster_size !== undefined) writer.tag(1, WireType.Varint).uint32(message.min_roster_size);
    /* repeated CSOCitadelParty.PrivateLobbySlot match_slots = 2; */
    for (let i = 0; i < message.match_slots.length; i++)
      CSOCitadelParty_PrivateLobbySlot.internalBinaryWrite(
        message.match_slots[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional bool randomize_lanes = 3; */
    if (message.randomize_lanes !== undefined) writer.tag(3, WireType.Varint).bool(message.randomize_lanes);
    /* optional uint32 server_region = 4; */
    if (message.server_region !== undefined) writer.tag(4, WireType.Varint).uint32(message.server_region);
    /* optional bool is_publicly_visible = 6; */
    if (message.is_publicly_visible !== undefined) writer.tag(6, WireType.Varint).bool(message.is_publicly_visible);
    /* optional bool cheats_enabled = 7; */
    if (message.cheats_enabled !== undefined) writer.tag(7, WireType.Varint).bool(message.cheats_enabled);
    /* repeated CSOCitadelParty.ServerRegion available_regions = 8; */
    for (let i = 0; i < message.available_regions.length; i++)
      CSOCitadelParty_ServerRegion.internalBinaryWrite(
        message.available_regions[i],
        writer.tag(8, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional bool duplicate_heroes_enabled = 9; */
    if (message.duplicate_heroes_enabled !== undefined)
      writer.tag(9, WireType.Varint).bool(message.duplicate_heroes_enabled);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CSOCitadelParty.PrivateLobbySettings
 */
export const CSOCitadelParty_PrivateLobbySettings = new CSOCitadelParty_PrivateLobbySettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSOCitadelParty_Member$Type extends MessageType<CSOCitadelParty_Member> {
  constructor() {
    super("CSOCitadelParty.Member", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        localName: "account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "persona_name",
        kind: "scalar",
        localName: "persona_name",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 3,
        name: "rights_flags",
        kind: "scalar",
        localName: "rights_flags",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "is_ready",
        kind: "scalar",
        localName: "is_ready",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 5,
        name: "player_type",
        kind: "enum",
        localName: "player_type",
        opt: true,
        T: () => ["CSOCitadelParty.EPlayerType", CSOCitadelParty_EPlayerType],
      },
      {
        no: 6,
        name: "compatibility_version",
        kind: "scalar",
        localName: "compatibility_version",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 7,
        name: "platform",
        kind: "enum",
        opt: true,
        T: () => ["EGCPlatform", EGCPlatform],
      },
      {
        no: 8,
        name: "team",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 9,
        name: "hero_roster",
        kind: "message",
        localName: "hero_roster",
        T: () => CMsgHeroSelectionMatchInfo,
      },
      {
        no: 10,
        name: "permissions",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 11,
        name: "new_player_progress",
        kind: "scalar",
        localName: "new_player_progress",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 12,
        name: "owned_heroes",
        kind: "scalar",
        localName: "owned_heroes",
        repeat: 1 /*RepeatType.PACKED*/,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CSOCitadelParty_Member>): CSOCitadelParty_Member {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.owned_heroes = [];
    if (value !== undefined) reflectionMergePartial<CSOCitadelParty_Member>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CSOCitadelParty_Member,
  ): CSOCitadelParty_Member {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.account_id = reader.uint32();
          break;
        case /* optional string persona_name */ 2:
          message.persona_name = reader.string();
          break;
        case /* optional uint32 rights_flags */ 3:
          message.rights_flags = reader.uint32();
          break;
        case /* optional bool is_ready */ 4:
          message.is_ready = reader.bool();
          break;
        case /* optional CSOCitadelParty.EPlayerType player_type */ 5:
          message.player_type = reader.int32();
          break;
        case /* optional uint32 compatibility_version */ 6:
          message.compatibility_version = reader.uint32();
          break;
        case /* optional EGCPlatform platform */ 7:
          message.platform = reader.int32();
          break;
        case /* optional uint32 team */ 8:
          message.team = reader.uint32();
          break;
        case /* optional CMsgHeroSelectionMatchInfo hero_roster */ 9:
          message.hero_roster = CMsgHeroSelectionMatchInfo.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.hero_roster,
          );
          break;
        case /* optional uint64 permissions */ 10:
          message.permissions = reader.uint64().toBigInt();
          break;
        case /* optional uint64 new_player_progress */ 11:
          message.new_player_progress = reader.uint64().toBigInt();
          break;
        case /* repeated uint32 owned_heroes = 12 [packed = true];*/ 12:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.owned_heroes.push(reader.uint32());
          else message.owned_heroes.push(reader.uint32());
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CSOCitadelParty_Member,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
    /* optional string persona_name = 2; */
    if (message.persona_name !== undefined) writer.tag(2, WireType.LengthDelimited).string(message.persona_name);
    /* optional uint32 rights_flags = 3; */
    if (message.rights_flags !== undefined) writer.tag(3, WireType.Varint).uint32(message.rights_flags);
    /* optional bool is_ready = 4; */
    if (message.is_ready !== undefined) writer.tag(4, WireType.Varint).bool(message.is_ready);
    /* optional CSOCitadelParty.EPlayerType player_type = 5; */
    if (message.player_type !== undefined) writer.tag(5, WireType.Varint).int32(message.player_type);
    /* optional uint32 compatibility_version = 6; */
    if (message.compatibility_version !== undefined)
      writer.tag(6, WireType.Varint).uint32(message.compatibility_version);
    /* optional EGCPlatform platform = 7; */
    if (message.platform !== undefined) writer.tag(7, WireType.Varint).int32(message.platform);
    /* optional uint32 team = 8; */
    if (message.team !== undefined) writer.tag(8, WireType.Varint).uint32(message.team);
    /* optional CMsgHeroSelectionMatchInfo hero_roster = 9; */
    if (message.hero_roster)
      CMsgHeroSelectionMatchInfo.internalBinaryWrite(
        message.hero_roster,
        writer.tag(9, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional uint64 permissions = 10; */
    if (message.permissions !== undefined) writer.tag(10, WireType.Varint).uint64(message.permissions);
    /* optional uint64 new_player_progress = 11; */
    if (message.new_player_progress !== undefined) writer.tag(11, WireType.Varint).uint64(message.new_player_progress);
    /* repeated uint32 owned_heroes = 12 [packed = true]; */
    if (message.owned_heroes.length) {
      writer.tag(12, WireType.LengthDelimited).fork();
      for (let i = 0; i < message.owned_heroes.length; i++) writer.uint32(message.owned_heroes[i]);
      writer.join();
    }
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CSOCitadelParty.Member
 */
export const CSOCitadelParty_Member = new CSOCitadelParty_Member$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSOCitadelParty_LeftMember$Type extends MessageType<CSOCitadelParty_LeftMember> {
  constructor() {
    super("CSOCitadelParty.LeftMember", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        localName: "account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "rights_flags",
        kind: "scalar",
        localName: "rights_flags",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "player_type",
        kind: "enum",
        localName: "player_type",
        opt: true,
        T: () => ["CSOCitadelParty.EPlayerType", CSOCitadelParty_EPlayerType],
      },
    ]);
  }
  create(value?: PartialMessage<CSOCitadelParty_LeftMember>): CSOCitadelParty_LeftMember {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CSOCitadelParty_LeftMember>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CSOCitadelParty_LeftMember,
  ): CSOCitadelParty_LeftMember {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.account_id = reader.uint32();
          break;
        case /* optional uint32 rights_flags */ 2:
          message.rights_flags = reader.uint32();
          break;
        case /* optional CSOCitadelParty.EPlayerType player_type */ 3:
          message.player_type = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CSOCitadelParty_LeftMember,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
    /* optional uint32 rights_flags = 2; */
    if (message.rights_flags !== undefined) writer.tag(2, WireType.Varint).uint32(message.rights_flags);
    /* optional CSOCitadelParty.EPlayerType player_type = 3; */
    if (message.player_type !== undefined) writer.tag(3, WireType.Varint).int32(message.player_type);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CSOCitadelParty.LeftMember
 */
export const CSOCitadelParty_LeftMember = new CSOCitadelParty_LeftMember$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSOCitadelParty_Invite$Type extends MessageType<CSOCitadelParty_Invite> {
  constructor() {
    super("CSOCitadelParty.Invite", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        localName: "account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "persona_name",
        kind: "scalar",
        localName: "persona_name",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 3,
        name: "invited_by",
        kind: "scalar",
        localName: "invited_by",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CSOCitadelParty_Invite>): CSOCitadelParty_Invite {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CSOCitadelParty_Invite>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CSOCitadelParty_Invite,
  ): CSOCitadelParty_Invite {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.account_id = reader.uint32();
          break;
        case /* optional string persona_name */ 2:
          message.persona_name = reader.string();
          break;
        case /* optional uint32 invited_by */ 3:
          message.invited_by = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CSOCitadelParty_Invite,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
    /* optional string persona_name = 2; */
    if (message.persona_name !== undefined) writer.tag(2, WireType.LengthDelimited).string(message.persona_name);
    /* optional uint32 invited_by = 3; */
    if (message.invited_by !== undefined) writer.tag(3, WireType.Varint).uint32(message.invited_by);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CSOCitadelParty.Invite
 */
export const CSOCitadelParty_Invite = new CSOCitadelParty_Invite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchPlayerPathsData$Type extends MessageType<CMsgMatchPlayerPathsData> {
  constructor() {
    super("CMsgMatchPlayerPathsData", [
      {
        no: 1,
        name: "version",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "interval_s",
        kind: "scalar",
        localName: "interval_s",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 3,
        name: "x_resolution",
        kind: "scalar",
        localName: "x_resolution",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "y_resolution",
        kind: "scalar",
        localName: "y_resolution",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "paths",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgMatchPlayerPathsData_Path,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgMatchPlayerPathsData>): CMsgMatchPlayerPathsData {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.paths = [];
    if (value !== undefined) reflectionMergePartial<CMsgMatchPlayerPathsData>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchPlayerPathsData,
  ): CMsgMatchPlayerPathsData {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 version */ 1:
          message.version = reader.uint32();
          break;
        case /* optional float interval_s */ 2:
          message.interval_s = reader.float();
          break;
        case /* optional uint32 x_resolution */ 3:
          message.x_resolution = reader.uint32();
          break;
        case /* optional uint32 y_resolution */ 4:
          message.y_resolution = reader.uint32();
          break;
        case /* repeated CMsgMatchPlayerPathsData.Path paths */ 5:
          message.paths.push(CMsgMatchPlayerPathsData_Path.internalBinaryRead(reader, reader.uint32(), options));
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgMatchPlayerPathsData,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 version = 1; */
    if (message.version !== undefined) writer.tag(1, WireType.Varint).uint32(message.version);
    /* optional float interval_s = 2; */
    if (message.interval_s !== undefined) writer.tag(2, WireType.Bit32).float(message.interval_s);
    /* optional uint32 x_resolution = 3; */
    if (message.x_resolution !== undefined) writer.tag(3, WireType.Varint).uint32(message.x_resolution);
    /* optional uint32 y_resolution = 4; */
    if (message.y_resolution !== undefined) writer.tag(4, WireType.Varint).uint32(message.y_resolution);
    /* repeated CMsgMatchPlayerPathsData.Path paths = 5; */
    for (let i = 0; i < message.paths.length; i++)
      CMsgMatchPlayerPathsData_Path.internalBinaryWrite(
        message.paths[i],
        writer.tag(5, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchPlayerPathsData
 */
export const CMsgMatchPlayerPathsData = new CMsgMatchPlayerPathsData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchPlayerPathsData_Path$Type extends MessageType<CMsgMatchPlayerPathsData_Path> {
  constructor() {
    super("CMsgMatchPlayerPathsData.Path", [
      {
        no: 1,
        name: "player_slot",
        kind: "scalar",
        localName: "player_slot",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "x_min",
        kind: "scalar",
        localName: "x_min",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 3,
        name: "y_min",
        kind: "scalar",
        localName: "y_min",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 4,
        name: "x_max",
        kind: "scalar",
        localName: "x_max",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 5,
        name: "y_max",
        kind: "scalar",
        localName: "y_max",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 6,
        name: "x_pos",
        kind: "scalar",
        localName: "x_pos",
        repeat: 1 /*RepeatType.PACKED*/,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 7,
        name: "y_pos",
        kind: "scalar",
        localName: "y_pos",
        repeat: 1 /*RepeatType.PACKED*/,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 8,
        name: "alive",
        kind: "scalar",
        repeat: 1 /*RepeatType.PACKED*/,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 9,
        name: "health",
        kind: "scalar",
        repeat: 1 /*RepeatType.PACKED*/,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgMatchPlayerPathsData_Path>): CMsgMatchPlayerPathsData_Path {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.x_pos = [];
    message.y_pos = [];
    message.alive = [];
    message.health = [];
    if (value !== undefined) reflectionMergePartial<CMsgMatchPlayerPathsData_Path>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchPlayerPathsData_Path,
  ): CMsgMatchPlayerPathsData_Path {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 player_slot */ 1:
          message.player_slot = reader.uint32();
          break;
        case /* optional float x_min */ 2:
          message.x_min = reader.float();
          break;
        case /* optional float y_min */ 3:
          message.y_min = reader.float();
          break;
        case /* optional float x_max */ 4:
          message.x_max = reader.float();
          break;
        case /* optional float y_max */ 5:
          message.y_max = reader.float();
          break;
        case /* repeated uint32 x_pos = 6 [packed = true];*/ 6:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.x_pos.push(reader.uint32());
          else message.x_pos.push(reader.uint32());
          break;
        case /* repeated uint32 y_pos = 7 [packed = true];*/ 7:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.y_pos.push(reader.uint32());
          else message.y_pos.push(reader.uint32());
          break;
        case /* repeated bool alive = 8 [packed = true];*/ 8:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.alive.push(reader.bool());
          else message.alive.push(reader.bool());
          break;
        case /* repeated uint32 health = 9 [packed = true];*/ 9:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.health.push(reader.uint32());
          else message.health.push(reader.uint32());
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgMatchPlayerPathsData_Path,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 player_slot = 1; */
    if (message.player_slot !== undefined) writer.tag(1, WireType.Varint).uint32(message.player_slot);
    /* optional float x_min = 2; */
    if (message.x_min !== undefined) writer.tag(2, WireType.Bit32).float(message.x_min);
    /* optional float y_min = 3; */
    if (message.y_min !== undefined) writer.tag(3, WireType.Bit32).float(message.y_min);
    /* optional float x_max = 4; */
    if (message.x_max !== undefined) writer.tag(4, WireType.Bit32).float(message.x_max);
    /* optional float y_max = 5; */
    if (message.y_max !== undefined) writer.tag(5, WireType.Bit32).float(message.y_max);
    /* repeated uint32 x_pos = 6 [packed = true]; */
    if (message.x_pos.length) {
      writer.tag(6, WireType.LengthDelimited).fork();
      for (let i = 0; i < message.x_pos.length; i++) writer.uint32(message.x_pos[i]);
      writer.join();
    }
    /* repeated uint32 y_pos = 7 [packed = true]; */
    if (message.y_pos.length) {
      writer.tag(7, WireType.LengthDelimited).fork();
      for (let i = 0; i < message.y_pos.length; i++) writer.uint32(message.y_pos[i]);
      writer.join();
    }
    /* repeated bool alive = 8 [packed = true]; */
    if (message.alive.length) {
      writer.tag(8, WireType.LengthDelimited).fork();
      for (let i = 0; i < message.alive.length; i++) writer.bool(message.alive[i]);
      writer.join();
    }
    /* repeated uint32 health = 9 [packed = true]; */
    if (message.health.length) {
      writer.tag(9, WireType.LengthDelimited).fork();
      for (let i = 0; i < message.health.length; i++) writer.uint32(message.health[i]);
      writer.join();
    }
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchPlayerPathsData.Path
 */
export const CMsgMatchPlayerPathsData_Path = new CMsgMatchPlayerPathsData_Path$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchPlayerDamageMatrix$Type extends MessageType<CMsgMatchPlayerDamageMatrix> {
  constructor() {
    super("CMsgMatchPlayerDamageMatrix", [
      {
        no: 1,
        name: "damage_dealers",
        kind: "message",
        localName: "damage_dealers",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgMatchPlayerDamageMatrix_DamageDealer,
      },
      {
        no: 2,
        name: "sample_time_s",
        kind: "scalar",
        localName: "sample_time_s",
        repeat: 1 /*RepeatType.PACKED*/,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "source_details",
        kind: "message",
        localName: "source_details",
        T: () => CMsgMatchPlayerDamageMatrix_SourceDetails,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgMatchPlayerDamageMatrix>): CMsgMatchPlayerDamageMatrix {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.damage_dealers = [];
    message.sample_time_s = [];
    if (value !== undefined) reflectionMergePartial<CMsgMatchPlayerDamageMatrix>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchPlayerDamageMatrix,
  ): CMsgMatchPlayerDamageMatrix {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated CMsgMatchPlayerDamageMatrix.DamageDealer damage_dealers */ 1:
          message.damage_dealers.push(
            CMsgMatchPlayerDamageMatrix_DamageDealer.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* repeated uint32 sample_time_s = 2 [packed = true];*/ 2:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.sample_time_s.push(reader.uint32());
          else message.sample_time_s.push(reader.uint32());
          break;
        case /* optional CMsgMatchPlayerDamageMatrix.SourceDetails source_details */ 3:
          message.source_details = CMsgMatchPlayerDamageMatrix_SourceDetails.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.source_details,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgMatchPlayerDamageMatrix,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated CMsgMatchPlayerDamageMatrix.DamageDealer damage_dealers = 1; */
    for (let i = 0; i < message.damage_dealers.length; i++)
      CMsgMatchPlayerDamageMatrix_DamageDealer.internalBinaryWrite(
        message.damage_dealers[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated uint32 sample_time_s = 2 [packed = true]; */
    if (message.sample_time_s.length) {
      writer.tag(2, WireType.LengthDelimited).fork();
      for (let i = 0; i < message.sample_time_s.length; i++) writer.uint32(message.sample_time_s[i]);
      writer.join();
    }
    /* optional CMsgMatchPlayerDamageMatrix.SourceDetails source_details = 3; */
    if (message.source_details)
      CMsgMatchPlayerDamageMatrix_SourceDetails.internalBinaryWrite(
        message.source_details,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchPlayerDamageMatrix
 */
export const CMsgMatchPlayerDamageMatrix = new CMsgMatchPlayerDamageMatrix$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchPlayerDamageMatrix_DamageToPlayer$Type extends MessageType<CMsgMatchPlayerDamageMatrix_DamageToPlayer> {
  constructor() {
    super("CMsgMatchPlayerDamageMatrix.DamageToPlayer", [
      {
        no: 1,
        name: "target_player_slot",
        kind: "scalar",
        localName: "target_player_slot",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "damage",
        kind: "scalar",
        repeat: 1 /*RepeatType.PACKED*/,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgMatchPlayerDamageMatrix_DamageToPlayer>,
  ): CMsgMatchPlayerDamageMatrix_DamageToPlayer {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.damage = [];
    if (value !== undefined) reflectionMergePartial<CMsgMatchPlayerDamageMatrix_DamageToPlayer>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchPlayerDamageMatrix_DamageToPlayer,
  ): CMsgMatchPlayerDamageMatrix_DamageToPlayer {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 target_player_slot */ 1:
          message.target_player_slot = reader.uint32();
          break;
        case /* repeated uint32 damage = 2 [packed = true];*/ 2:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.damage.push(reader.uint32());
          else message.damage.push(reader.uint32());
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgMatchPlayerDamageMatrix_DamageToPlayer,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 target_player_slot = 1; */
    if (message.target_player_slot !== undefined) writer.tag(1, WireType.Varint).uint32(message.target_player_slot);
    /* repeated uint32 damage = 2 [packed = true]; */
    if (message.damage.length) {
      writer.tag(2, WireType.LengthDelimited).fork();
      for (let i = 0; i < message.damage.length; i++) writer.uint32(message.damage[i]);
      writer.join();
    }
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchPlayerDamageMatrix.DamageToPlayer
 */
export const CMsgMatchPlayerDamageMatrix_DamageToPlayer = new CMsgMatchPlayerDamageMatrix_DamageToPlayer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchPlayerDamageMatrix_DamageSource$Type extends MessageType<CMsgMatchPlayerDamageMatrix_DamageSource> {
  constructor() {
    super("CMsgMatchPlayerDamageMatrix.DamageSource", [
      {
        no: 2,
        name: "damage_to_players",
        kind: "message",
        localName: "damage_to_players",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgMatchPlayerDamageMatrix_DamageToPlayer,
      },
      {
        no: 4,
        name: "source_details_index",
        kind: "scalar",
        localName: "source_details_index",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgMatchPlayerDamageMatrix_DamageSource>): CMsgMatchPlayerDamageMatrix_DamageSource {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.damage_to_players = [];
    if (value !== undefined) reflectionMergePartial<CMsgMatchPlayerDamageMatrix_DamageSource>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchPlayerDamageMatrix_DamageSource,
  ): CMsgMatchPlayerDamageMatrix_DamageSource {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated CMsgMatchPlayerDamageMatrix.DamageToPlayer damage_to_players */ 2:
          message.damage_to_players.push(
            CMsgMatchPlayerDamageMatrix_DamageToPlayer.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* optional uint32 source_details_index */ 4:
          message.source_details_index = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgMatchPlayerDamageMatrix_DamageSource,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated CMsgMatchPlayerDamageMatrix.DamageToPlayer damage_to_players = 2; */
    for (let i = 0; i < message.damage_to_players.length; i++)
      CMsgMatchPlayerDamageMatrix_DamageToPlayer.internalBinaryWrite(
        message.damage_to_players[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional uint32 source_details_index = 4; */
    if (message.source_details_index !== undefined) writer.tag(4, WireType.Varint).uint32(message.source_details_index);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchPlayerDamageMatrix.DamageSource
 */
export const CMsgMatchPlayerDamageMatrix_DamageSource = new CMsgMatchPlayerDamageMatrix_DamageSource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchPlayerDamageMatrix_DamageDealer$Type extends MessageType<CMsgMatchPlayerDamageMatrix_DamageDealer> {
  constructor() {
    super("CMsgMatchPlayerDamageMatrix.DamageDealer", [
      {
        no: 1,
        name: "dealer_player_slot",
        kind: "scalar",
        localName: "dealer_player_slot",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "damage_sources",
        kind: "message",
        localName: "damage_sources",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgMatchPlayerDamageMatrix_DamageSource,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgMatchPlayerDamageMatrix_DamageDealer>): CMsgMatchPlayerDamageMatrix_DamageDealer {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.damage_sources = [];
    if (value !== undefined) reflectionMergePartial<CMsgMatchPlayerDamageMatrix_DamageDealer>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchPlayerDamageMatrix_DamageDealer,
  ): CMsgMatchPlayerDamageMatrix_DamageDealer {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 dealer_player_slot */ 1:
          message.dealer_player_slot = reader.uint32();
          break;
        case /* repeated CMsgMatchPlayerDamageMatrix.DamageSource damage_sources */ 2:
          message.damage_sources.push(
            CMsgMatchPlayerDamageMatrix_DamageSource.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgMatchPlayerDamageMatrix_DamageDealer,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 dealer_player_slot = 1; */
    if (message.dealer_player_slot !== undefined) writer.tag(1, WireType.Varint).uint32(message.dealer_player_slot);
    /* repeated CMsgMatchPlayerDamageMatrix.DamageSource damage_sources = 2; */
    for (let i = 0; i < message.damage_sources.length; i++)
      CMsgMatchPlayerDamageMatrix_DamageSource.internalBinaryWrite(
        message.damage_sources[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchPlayerDamageMatrix.DamageDealer
 */
export const CMsgMatchPlayerDamageMatrix_DamageDealer = new CMsgMatchPlayerDamageMatrix_DamageDealer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchPlayerDamageMatrix_SourceDetails$Type extends MessageType<CMsgMatchPlayerDamageMatrix_SourceDetails> {
  constructor() {
    super("CMsgMatchPlayerDamageMatrix.SourceDetails", [
      {
        no: 1,
        name: "stat_type",
        kind: "enum",
        localName: "stat_type",
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => ["CMsgMatchPlayerDamageMatrix.EStatType", CMsgMatchPlayerDamageMatrix_EStatType],
      },
      {
        no: 2,
        name: "source_name",
        kind: "scalar",
        localName: "source_name",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgMatchPlayerDamageMatrix_SourceDetails>): CMsgMatchPlayerDamageMatrix_SourceDetails {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.stat_type = [];
    message.source_name = [];
    if (value !== undefined) reflectionMergePartial<CMsgMatchPlayerDamageMatrix_SourceDetails>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchPlayerDamageMatrix_SourceDetails,
  ): CMsgMatchPlayerDamageMatrix_SourceDetails {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated CMsgMatchPlayerDamageMatrix.EStatType stat_type = 1 [packed = true];*/ 1:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.stat_type.push(reader.int32());
          else message.stat_type.push(reader.int32());
          break;
        case /* repeated string source_name */ 2:
          message.source_name.push(reader.string());
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgMatchPlayerDamageMatrix_SourceDetails,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated CMsgMatchPlayerDamageMatrix.EStatType stat_type = 1 [packed = true]; */
    if (message.stat_type.length) {
      writer.tag(1, WireType.LengthDelimited).fork();
      for (let i = 0; i < message.stat_type.length; i++) writer.int32(message.stat_type[i]);
      writer.join();
    }
    /* repeated string source_name = 2; */
    for (let i = 0; i < message.source_name.length; i++)
      writer.tag(2, WireType.LengthDelimited).string(message.source_name[i]);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchPlayerDamageMatrix.SourceDetails
 */
export const CMsgMatchPlayerDamageMatrix_SourceDetails = new CMsgMatchPlayerDamageMatrix_SourceDetails$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchMetaDataContents$Type extends MessageType<CMsgMatchMetaDataContents> {
  constructor() {
    super("CMsgMatchMetaDataContents", [
      {
        no: 2,
        name: "match_info",
        kind: "message",
        localName: "match_info",
        T: () => CMsgMatchMetaDataContents_MatchInfo,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgMatchMetaDataContents>): CMsgMatchMetaDataContents {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgMatchMetaDataContents>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchMetaDataContents,
  ): CMsgMatchMetaDataContents {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgMatchMetaDataContents.MatchInfo match_info */ 2:
          message.match_info = CMsgMatchMetaDataContents_MatchInfo.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.match_info,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgMatchMetaDataContents,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgMatchMetaDataContents.MatchInfo match_info = 2; */
    if (message.match_info)
      CMsgMatchMetaDataContents_MatchInfo.internalBinaryWrite(
        message.match_info,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchMetaDataContents
 */
export const CMsgMatchMetaDataContents = new CMsgMatchMetaDataContents$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchMetaDataContents_Position$Type extends MessageType<CMsgMatchMetaDataContents_Position> {
  constructor() {
    super("CMsgMatchMetaDataContents.Position", [
      {
        no: 1,
        name: "x",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 2,
        name: "y",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 3,
        name: "z",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgMatchMetaDataContents_Position>): CMsgMatchMetaDataContents_Position {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgMatchMetaDataContents_Position>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchMetaDataContents_Position,
  ): CMsgMatchMetaDataContents_Position {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional float x */ 1:
          message.x = reader.float();
          break;
        case /* optional float y */ 2:
          message.y = reader.float();
          break;
        case /* optional float z */ 3:
          message.z = reader.float();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgMatchMetaDataContents_Position,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional float x = 1; */
    if (message.x !== undefined) writer.tag(1, WireType.Bit32).float(message.x);
    /* optional float y = 2; */
    if (message.y !== undefined) writer.tag(2, WireType.Bit32).float(message.y);
    /* optional float z = 3; */
    if (message.z !== undefined) writer.tag(3, WireType.Bit32).float(message.z);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchMetaDataContents.Position
 */
export const CMsgMatchMetaDataContents_Position = new CMsgMatchMetaDataContents_Position$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchMetaDataContents_Deaths$Type extends MessageType<CMsgMatchMetaDataContents_Deaths> {
  constructor() {
    super("CMsgMatchMetaDataContents.Deaths", [
      {
        no: 1,
        name: "game_time_s",
        kind: "scalar",
        localName: "game_time_s",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 9,
        name: "killer_player_slot",
        kind: "scalar",
        localName: "killer_player_slot",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 10,
        name: "death_pos",
        kind: "message",
        localName: "death_pos",
        T: () => CMsgMatchMetaDataContents_Position,
      },
      {
        no: 11,
        name: "killer_pos",
        kind: "message",
        localName: "killer_pos",
        T: () => CMsgMatchMetaDataContents_Position,
      },
      {
        no: 12,
        name: "death_duration_s",
        kind: "scalar",
        localName: "death_duration_s",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgMatchMetaDataContents_Deaths>): CMsgMatchMetaDataContents_Deaths {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgMatchMetaDataContents_Deaths>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchMetaDataContents_Deaths,
  ): CMsgMatchMetaDataContents_Deaths {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 game_time_s */ 1:
          message.game_time_s = reader.uint32();
          break;
        case /* optional uint32 killer_player_slot */ 9:
          message.killer_player_slot = reader.uint32();
          break;
        case /* optional CMsgMatchMetaDataContents.Position death_pos */ 10:
          message.death_pos = CMsgMatchMetaDataContents_Position.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.death_pos,
          );
          break;
        case /* optional CMsgMatchMetaDataContents.Position killer_pos */ 11:
          message.killer_pos = CMsgMatchMetaDataContents_Position.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.killer_pos,
          );
          break;
        case /* optional uint32 death_duration_s */ 12:
          message.death_duration_s = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgMatchMetaDataContents_Deaths,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 game_time_s = 1; */
    if (message.game_time_s !== undefined) writer.tag(1, WireType.Varint).uint32(message.game_time_s);
    /* optional uint32 killer_player_slot = 9; */
    if (message.killer_player_slot !== undefined) writer.tag(9, WireType.Varint).uint32(message.killer_player_slot);
    /* optional CMsgMatchMetaDataContents.Position death_pos = 10; */
    if (message.death_pos)
      CMsgMatchMetaDataContents_Position.internalBinaryWrite(
        message.death_pos,
        writer.tag(10, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional CMsgMatchMetaDataContents.Position killer_pos = 11; */
    if (message.killer_pos)
      CMsgMatchMetaDataContents_Position.internalBinaryWrite(
        message.killer_pos,
        writer.tag(11, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional uint32 death_duration_s = 12; */
    if (message.death_duration_s !== undefined) writer.tag(12, WireType.Varint).uint32(message.death_duration_s);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchMetaDataContents.Deaths
 */
export const CMsgMatchMetaDataContents_Deaths = new CMsgMatchMetaDataContents_Deaths$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchMetaDataContents_Items$Type extends MessageType<CMsgMatchMetaDataContents_Items> {
  constructor() {
    super("CMsgMatchMetaDataContents.Items", [
      {
        no: 1,
        name: "game_time_s",
        kind: "scalar",
        localName: "game_time_s",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "item_id",
        kind: "scalar",
        localName: "item_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "upgrade_id",
        kind: "scalar",
        localName: "upgrade_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "sold_time_s",
        kind: "scalar",
        localName: "sold_time_s",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "flags",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "imbued_ability_id",
        kind: "scalar",
        localName: "imbued_ability_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgMatchMetaDataContents_Items>): CMsgMatchMetaDataContents_Items {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgMatchMetaDataContents_Items>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchMetaDataContents_Items,
  ): CMsgMatchMetaDataContents_Items {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 game_time_s */ 1:
          message.game_time_s = reader.uint32();
          break;
        case /* optional uint32 item_id */ 2:
          message.item_id = reader.uint32();
          break;
        case /* optional uint32 upgrade_id */ 3:
          message.upgrade_id = reader.uint32();
          break;
        case /* optional uint32 sold_time_s */ 4:
          message.sold_time_s = reader.uint32();
          break;
        case /* optional uint32 flags */ 5:
          message.flags = reader.uint32();
          break;
        case /* optional uint32 imbued_ability_id */ 6:
          message.imbued_ability_id = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgMatchMetaDataContents_Items,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 game_time_s = 1; */
    if (message.game_time_s !== undefined) writer.tag(1, WireType.Varint).uint32(message.game_time_s);
    /* optional uint32 item_id = 2; */
    if (message.item_id !== undefined) writer.tag(2, WireType.Varint).uint32(message.item_id);
    /* optional uint32 upgrade_id = 3; */
    if (message.upgrade_id !== undefined) writer.tag(3, WireType.Varint).uint32(message.upgrade_id);
    /* optional uint32 sold_time_s = 4; */
    if (message.sold_time_s !== undefined) writer.tag(4, WireType.Varint).uint32(message.sold_time_s);
    /* optional uint32 flags = 5; */
    if (message.flags !== undefined) writer.tag(5, WireType.Varint).uint32(message.flags);
    /* optional uint32 imbued_ability_id = 6; */
    if (message.imbued_ability_id !== undefined) writer.tag(6, WireType.Varint).uint32(message.imbued_ability_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchMetaDataContents.Items
 */
export const CMsgMatchMetaDataContents_Items = new CMsgMatchMetaDataContents_Items$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchMetaDataContents_Ping$Type extends MessageType<CMsgMatchMetaDataContents_Ping> {
  constructor() {
    super("CMsgMatchMetaDataContents.Ping", [
      {
        no: 1,
        name: "ping_type",
        kind: "scalar",
        localName: "ping_type",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "ping_data",
        kind: "scalar",
        localName: "ping_data",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "game_time_s",
        kind: "scalar",
        localName: "game_time_s",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgMatchMetaDataContents_Ping>): CMsgMatchMetaDataContents_Ping {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgMatchMetaDataContents_Ping>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchMetaDataContents_Ping,
  ): CMsgMatchMetaDataContents_Ping {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 ping_type */ 1:
          message.ping_type = reader.uint32();
          break;
        case /* optional uint32 ping_data */ 2:
          message.ping_data = reader.uint32();
          break;
        case /* optional uint32 game_time_s */ 3:
          message.game_time_s = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgMatchMetaDataContents_Ping,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 ping_type = 1; */
    if (message.ping_type !== undefined) writer.tag(1, WireType.Varint).uint32(message.ping_type);
    /* optional uint32 ping_data = 2; */
    if (message.ping_data !== undefined) writer.tag(2, WireType.Varint).uint32(message.ping_data);
    /* optional uint32 game_time_s = 3; */
    if (message.game_time_s !== undefined) writer.tag(3, WireType.Varint).uint32(message.game_time_s);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchMetaDataContents.Ping
 */
export const CMsgMatchMetaDataContents_Ping = new CMsgMatchMetaDataContents_Ping$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchMetaDataContents_GoldSource$Type extends MessageType<CMsgMatchMetaDataContents_GoldSource> {
  constructor() {
    super("CMsgMatchMetaDataContents.GoldSource", [
      {
        no: 1,
        name: "source",
        kind: "enum",
        opt: true,
        T: () => ["CMsgMatchMetaDataContents.EGoldSource", CMsgMatchMetaDataContents_EGoldSource],
      },
      {
        no: 2,
        name: "kills",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "damage",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "gold",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "gold_orbs",
        kind: "scalar",
        localName: "gold_orbs",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgMatchMetaDataContents_GoldSource>): CMsgMatchMetaDataContents_GoldSource {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgMatchMetaDataContents_GoldSource>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchMetaDataContents_GoldSource,
  ): CMsgMatchMetaDataContents_GoldSource {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgMatchMetaDataContents.EGoldSource source */ 1:
          message.source = reader.int32();
          break;
        case /* optional uint32 kills */ 2:
          message.kills = reader.uint32();
          break;
        case /* optional uint32 damage */ 3:
          message.damage = reader.uint32();
          break;
        case /* optional uint32 gold */ 4:
          message.gold = reader.uint32();
          break;
        case /* optional uint32 gold_orbs */ 5:
          message.gold_orbs = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgMatchMetaDataContents_GoldSource,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgMatchMetaDataContents.EGoldSource source = 1; */
    if (message.source !== undefined) writer.tag(1, WireType.Varint).int32(message.source);
    /* optional uint32 kills = 2; */
    if (message.kills !== undefined) writer.tag(2, WireType.Varint).uint32(message.kills);
    /* optional uint32 damage = 3; */
    if (message.damage !== undefined) writer.tag(3, WireType.Varint).uint32(message.damage);
    /* optional uint32 gold = 4; */
    if (message.gold !== undefined) writer.tag(4, WireType.Varint).uint32(message.gold);
    /* optional uint32 gold_orbs = 5; */
    if (message.gold_orbs !== undefined) writer.tag(5, WireType.Varint).uint32(message.gold_orbs);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchMetaDataContents.GoldSource
 */
export const CMsgMatchMetaDataContents_GoldSource = new CMsgMatchMetaDataContents_GoldSource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchMetaDataContents_CustomUserStatInfo$Type extends MessageType<CMsgMatchMetaDataContents_CustomUserStatInfo> {
  constructor() {
    super("CMsgMatchMetaDataContents.CustomUserStatInfo", [
      {
        no: 1,
        name: "name",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 2,
        name: "id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgMatchMetaDataContents_CustomUserStatInfo>,
  ): CMsgMatchMetaDataContents_CustomUserStatInfo {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgMatchMetaDataContents_CustomUserStatInfo>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchMetaDataContents_CustomUserStatInfo,
  ): CMsgMatchMetaDataContents_CustomUserStatInfo {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string name */ 1:
          message.name = reader.string();
          break;
        case /* optional uint32 id */ 2:
          message.id = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgMatchMetaDataContents_CustomUserStatInfo,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional string name = 1; */
    if (message.name !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.name);
    /* optional uint32 id = 2; */
    if (message.id !== undefined) writer.tag(2, WireType.Varint).uint32(message.id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchMetaDataContents.CustomUserStatInfo
 */
export const CMsgMatchMetaDataContents_CustomUserStatInfo = new CMsgMatchMetaDataContents_CustomUserStatInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchMetaDataContents_CustomUserStat$Type extends MessageType<CMsgMatchMetaDataContents_CustomUserStat> {
  constructor() {
    super("CMsgMatchMetaDataContents.CustomUserStat", [
      {
        no: 2,
        name: "value",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgMatchMetaDataContents_CustomUserStat>): CMsgMatchMetaDataContents_CustomUserStat {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgMatchMetaDataContents_CustomUserStat>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchMetaDataContents_CustomUserStat,
  ): CMsgMatchMetaDataContents_CustomUserStat {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 value */ 2:
          message.value = reader.uint32();
          break;
        case /* optional uint32 id */ 3:
          message.id = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgMatchMetaDataContents_CustomUserStat,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 value = 2; */
    if (message.value !== undefined) writer.tag(2, WireType.Varint).uint32(message.value);
    /* optional uint32 id = 3; */
    if (message.id !== undefined) writer.tag(3, WireType.Varint).uint32(message.id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchMetaDataContents.CustomUserStat
 */
export const CMsgMatchMetaDataContents_CustomUserStat = new CMsgMatchMetaDataContents_CustomUserStat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchMetaDataContents_PlayerStats$Type extends MessageType<CMsgMatchMetaDataContents_PlayerStats> {
  constructor() {
    super("CMsgMatchMetaDataContents.PlayerStats", [
      {
        no: 1,
        name: "time_stamp_s",
        kind: "scalar",
        localName: "time_stamp_s",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "net_worth",
        kind: "scalar",
        localName: "net_worth",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "gold_player",
        kind: "scalar",
        localName: "gold_player",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "gold_player_orbs",
        kind: "scalar",
        localName: "gold_player_orbs",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "gold_lane_creep_orbs",
        kind: "scalar",
        localName: "gold_lane_creep_orbs",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "gold_neutral_creep_orbs",
        kind: "scalar",
        localName: "gold_neutral_creep_orbs",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 7,
        name: "gold_boss",
        kind: "scalar",
        localName: "gold_boss",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 8,
        name: "gold_boss_orb",
        kind: "scalar",
        localName: "gold_boss_orb",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 9,
        name: "gold_treasure",
        kind: "scalar",
        localName: "gold_treasure",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 10,
        name: "gold_denied",
        kind: "scalar",
        localName: "gold_denied",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 11,
        name: "gold_death_loss",
        kind: "scalar",
        localName: "gold_death_loss",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 12,
        name: "gold_lane_creep",
        kind: "scalar",
        localName: "gold_lane_creep",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 13,
        name: "gold_neutral_creep",
        kind: "scalar",
        localName: "gold_neutral_creep",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 14,
        name: "kills",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 15,
        name: "deaths",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 16,
        name: "assists",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 17,
        name: "creep_kills",
        kind: "scalar",
        localName: "creep_kills",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 18,
        name: "neutral_kills",
        kind: "scalar",
        localName: "neutral_kills",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 19,
        name: "possible_creeps",
        kind: "scalar",
        localName: "possible_creeps",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 20,
        name: "creep_damage",
        kind: "scalar",
        localName: "creep_damage",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 21,
        name: "player_damage",
        kind: "scalar",
        localName: "player_damage",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 22,
        name: "neutral_damage",
        kind: "scalar",
        localName: "neutral_damage",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 23,
        name: "boss_damage",
        kind: "scalar",
        localName: "boss_damage",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 24,
        name: "denies",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 25,
        name: "player_healing",
        kind: "scalar",
        localName: "player_healing",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 26,
        name: "ability_points",
        kind: "scalar",
        localName: "ability_points",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 27,
        name: "self_healing",
        kind: "scalar",
        localName: "self_healing",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 28,
        name: "player_damage_taken",
        kind: "scalar",
        localName: "player_damage_taken",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 29,
        name: "max_health",
        kind: "scalar",
        localName: "max_health",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 30,
        name: "weapon_power",
        kind: "scalar",
        localName: "weapon_power",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 31,
        name: "tech_power",
        kind: "scalar",
        localName: "tech_power",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 32,
        name: "shots_hit",
        kind: "scalar",
        localName: "shots_hit",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 33,
        name: "shots_missed",
        kind: "scalar",
        localName: "shots_missed",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 34,
        name: "damage_absorbed",
        kind: "scalar",
        localName: "damage_absorbed",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 35,
        name: "absorption_provided",
        kind: "scalar",
        localName: "absorption_provided",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 36,
        name: "hero_bullets_hit",
        kind: "scalar",
        localName: "hero_bullets_hit",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 37,
        name: "hero_bullets_hit_crit",
        kind: "scalar",
        localName: "hero_bullets_hit_crit",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 38,
        name: "heal_prevented",
        kind: "scalar",
        localName: "heal_prevented",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 39,
        name: "heal_lost",
        kind: "scalar",
        localName: "heal_lost",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 40,
        name: "gold_sources",
        kind: "message",
        localName: "gold_sources",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgMatchMetaDataContents_GoldSource,
      },
      {
        no: 41,
        name: "custom_user_stats",
        kind: "message",
        localName: "custom_user_stats",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgMatchMetaDataContents_CustomUserStat,
      },
      {
        no: 42,
        name: "damage_mitigated",
        kind: "scalar",
        localName: "damage_mitigated",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 43,
        name: "level",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgMatchMetaDataContents_PlayerStats>): CMsgMatchMetaDataContents_PlayerStats {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.gold_sources = [];
    message.custom_user_stats = [];
    if (value !== undefined) reflectionMergePartial<CMsgMatchMetaDataContents_PlayerStats>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchMetaDataContents_PlayerStats,
  ): CMsgMatchMetaDataContents_PlayerStats {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 time_stamp_s */ 1:
          message.time_stamp_s = reader.uint32();
          break;
        case /* optional uint32 net_worth */ 2:
          message.net_worth = reader.uint32();
          break;
        case /* optional uint32 gold_player */ 3:
          message.gold_player = reader.uint32();
          break;
        case /* optional uint32 gold_player_orbs */ 4:
          message.gold_player_orbs = reader.uint32();
          break;
        case /* optional uint32 gold_lane_creep_orbs */ 5:
          message.gold_lane_creep_orbs = reader.uint32();
          break;
        case /* optional uint32 gold_neutral_creep_orbs */ 6:
          message.gold_neutral_creep_orbs = reader.uint32();
          break;
        case /* optional uint32 gold_boss */ 7:
          message.gold_boss = reader.uint32();
          break;
        case /* optional uint32 gold_boss_orb */ 8:
          message.gold_boss_orb = reader.uint32();
          break;
        case /* optional uint32 gold_treasure */ 9:
          message.gold_treasure = reader.uint32();
          break;
        case /* optional uint32 gold_denied */ 10:
          message.gold_denied = reader.uint32();
          break;
        case /* optional uint32 gold_death_loss */ 11:
          message.gold_death_loss = reader.uint32();
          break;
        case /* optional uint32 gold_lane_creep */ 12:
          message.gold_lane_creep = reader.uint32();
          break;
        case /* optional uint32 gold_neutral_creep */ 13:
          message.gold_neutral_creep = reader.uint32();
          break;
        case /* optional uint32 kills */ 14:
          message.kills = reader.uint32();
          break;
        case /* optional uint32 deaths */ 15:
          message.deaths = reader.uint32();
          break;
        case /* optional uint32 assists */ 16:
          message.assists = reader.uint32();
          break;
        case /* optional uint32 creep_kills */ 17:
          message.creep_kills = reader.uint32();
          break;
        case /* optional uint32 neutral_kills */ 18:
          message.neutral_kills = reader.uint32();
          break;
        case /* optional uint32 possible_creeps */ 19:
          message.possible_creeps = reader.uint32();
          break;
        case /* optional uint32 creep_damage */ 20:
          message.creep_damage = reader.uint32();
          break;
        case /* optional uint32 player_damage */ 21:
          message.player_damage = reader.uint32();
          break;
        case /* optional uint32 neutral_damage */ 22:
          message.neutral_damage = reader.uint32();
          break;
        case /* optional uint32 boss_damage */ 23:
          message.boss_damage = reader.uint32();
          break;
        case /* optional uint32 denies */ 24:
          message.denies = reader.uint32();
          break;
        case /* optional uint32 player_healing */ 25:
          message.player_healing = reader.uint32();
          break;
        case /* optional uint32 ability_points */ 26:
          message.ability_points = reader.uint32();
          break;
        case /* optional uint32 self_healing */ 27:
          message.self_healing = reader.uint32();
          break;
        case /* optional uint32 player_damage_taken */ 28:
          message.player_damage_taken = reader.uint32();
          break;
        case /* optional uint32 max_health */ 29:
          message.max_health = reader.uint32();
          break;
        case /* optional uint32 weapon_power */ 30:
          message.weapon_power = reader.uint32();
          break;
        case /* optional uint32 tech_power */ 31:
          message.tech_power = reader.uint32();
          break;
        case /* optional uint32 shots_hit */ 32:
          message.shots_hit = reader.uint32();
          break;
        case /* optional uint32 shots_missed */ 33:
          message.shots_missed = reader.uint32();
          break;
        case /* optional uint32 damage_absorbed */ 34:
          message.damage_absorbed = reader.uint32();
          break;
        case /* optional uint32 absorption_provided */ 35:
          message.absorption_provided = reader.uint32();
          break;
        case /* optional uint32 hero_bullets_hit */ 36:
          message.hero_bullets_hit = reader.uint32();
          break;
        case /* optional uint32 hero_bullets_hit_crit */ 37:
          message.hero_bullets_hit_crit = reader.uint32();
          break;
        case /* optional uint32 heal_prevented */ 38:
          message.heal_prevented = reader.uint32();
          break;
        case /* optional uint32 heal_lost */ 39:
          message.heal_lost = reader.uint32();
          break;
        case /* repeated CMsgMatchMetaDataContents.GoldSource gold_sources */ 40:
          message.gold_sources.push(
            CMsgMatchMetaDataContents_GoldSource.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* repeated CMsgMatchMetaDataContents.CustomUserStat custom_user_stats */ 41:
          message.custom_user_stats.push(
            CMsgMatchMetaDataContents_CustomUserStat.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* optional uint32 damage_mitigated */ 42:
          message.damage_mitigated = reader.uint32();
          break;
        case /* optional uint32 level */ 43:
          message.level = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgMatchMetaDataContents_PlayerStats,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 time_stamp_s = 1; */
    if (message.time_stamp_s !== undefined) writer.tag(1, WireType.Varint).uint32(message.time_stamp_s);
    /* optional uint32 net_worth = 2; */
    if (message.net_worth !== undefined) writer.tag(2, WireType.Varint).uint32(message.net_worth);
    /* optional uint32 gold_player = 3; */
    if (message.gold_player !== undefined) writer.tag(3, WireType.Varint).uint32(message.gold_player);
    /* optional uint32 gold_player_orbs = 4; */
    if (message.gold_player_orbs !== undefined) writer.tag(4, WireType.Varint).uint32(message.gold_player_orbs);
    /* optional uint32 gold_lane_creep_orbs = 5; */
    if (message.gold_lane_creep_orbs !== undefined) writer.tag(5, WireType.Varint).uint32(message.gold_lane_creep_orbs);
    /* optional uint32 gold_neutral_creep_orbs = 6; */
    if (message.gold_neutral_creep_orbs !== undefined)
      writer.tag(6, WireType.Varint).uint32(message.gold_neutral_creep_orbs);
    /* optional uint32 gold_boss = 7; */
    if (message.gold_boss !== undefined) writer.tag(7, WireType.Varint).uint32(message.gold_boss);
    /* optional uint32 gold_boss_orb = 8; */
    if (message.gold_boss_orb !== undefined) writer.tag(8, WireType.Varint).uint32(message.gold_boss_orb);
    /* optional uint32 gold_treasure = 9; */
    if (message.gold_treasure !== undefined) writer.tag(9, WireType.Varint).uint32(message.gold_treasure);
    /* optional uint32 gold_denied = 10; */
    if (message.gold_denied !== undefined) writer.tag(10, WireType.Varint).uint32(message.gold_denied);
    /* optional uint32 gold_death_loss = 11; */
    if (message.gold_death_loss !== undefined) writer.tag(11, WireType.Varint).uint32(message.gold_death_loss);
    /* optional uint32 gold_lane_creep = 12; */
    if (message.gold_lane_creep !== undefined) writer.tag(12, WireType.Varint).uint32(message.gold_lane_creep);
    /* optional uint32 gold_neutral_creep = 13; */
    if (message.gold_neutral_creep !== undefined) writer.tag(13, WireType.Varint).uint32(message.gold_neutral_creep);
    /* optional uint32 kills = 14; */
    if (message.kills !== undefined) writer.tag(14, WireType.Varint).uint32(message.kills);
    /* optional uint32 deaths = 15; */
    if (message.deaths !== undefined) writer.tag(15, WireType.Varint).uint32(message.deaths);
    /* optional uint32 assists = 16; */
    if (message.assists !== undefined) writer.tag(16, WireType.Varint).uint32(message.assists);
    /* optional uint32 creep_kills = 17; */
    if (message.creep_kills !== undefined) writer.tag(17, WireType.Varint).uint32(message.creep_kills);
    /* optional uint32 neutral_kills = 18; */
    if (message.neutral_kills !== undefined) writer.tag(18, WireType.Varint).uint32(message.neutral_kills);
    /* optional uint32 possible_creeps = 19; */
    if (message.possible_creeps !== undefined) writer.tag(19, WireType.Varint).uint32(message.possible_creeps);
    /* optional uint32 creep_damage = 20; */
    if (message.creep_damage !== undefined) writer.tag(20, WireType.Varint).uint32(message.creep_damage);
    /* optional uint32 player_damage = 21; */
    if (message.player_damage !== undefined) writer.tag(21, WireType.Varint).uint32(message.player_damage);
    /* optional uint32 neutral_damage = 22; */
    if (message.neutral_damage !== undefined) writer.tag(22, WireType.Varint).uint32(message.neutral_damage);
    /* optional uint32 boss_damage = 23; */
    if (message.boss_damage !== undefined) writer.tag(23, WireType.Varint).uint32(message.boss_damage);
    /* optional uint32 denies = 24; */
    if (message.denies !== undefined) writer.tag(24, WireType.Varint).uint32(message.denies);
    /* optional uint32 player_healing = 25; */
    if (message.player_healing !== undefined) writer.tag(25, WireType.Varint).uint32(message.player_healing);
    /* optional uint32 ability_points = 26; */
    if (message.ability_points !== undefined) writer.tag(26, WireType.Varint).uint32(message.ability_points);
    /* optional uint32 self_healing = 27; */
    if (message.self_healing !== undefined) writer.tag(27, WireType.Varint).uint32(message.self_healing);
    /* optional uint32 player_damage_taken = 28; */
    if (message.player_damage_taken !== undefined) writer.tag(28, WireType.Varint).uint32(message.player_damage_taken);
    /* optional uint32 max_health = 29; */
    if (message.max_health !== undefined) writer.tag(29, WireType.Varint).uint32(message.max_health);
    /* optional uint32 weapon_power = 30; */
    if (message.weapon_power !== undefined) writer.tag(30, WireType.Varint).uint32(message.weapon_power);
    /* optional uint32 tech_power = 31; */
    if (message.tech_power !== undefined) writer.tag(31, WireType.Varint).uint32(message.tech_power);
    /* optional uint32 shots_hit = 32; */
    if (message.shots_hit !== undefined) writer.tag(32, WireType.Varint).uint32(message.shots_hit);
    /* optional uint32 shots_missed = 33; */
    if (message.shots_missed !== undefined) writer.tag(33, WireType.Varint).uint32(message.shots_missed);
    /* optional uint32 damage_absorbed = 34; */
    if (message.damage_absorbed !== undefined) writer.tag(34, WireType.Varint).uint32(message.damage_absorbed);
    /* optional uint32 absorption_provided = 35; */
    if (message.absorption_provided !== undefined) writer.tag(35, WireType.Varint).uint32(message.absorption_provided);
    /* optional uint32 hero_bullets_hit = 36; */
    if (message.hero_bullets_hit !== undefined) writer.tag(36, WireType.Varint).uint32(message.hero_bullets_hit);
    /* optional uint32 hero_bullets_hit_crit = 37; */
    if (message.hero_bullets_hit_crit !== undefined)
      writer.tag(37, WireType.Varint).uint32(message.hero_bullets_hit_crit);
    /* optional uint32 heal_prevented = 38; */
    if (message.heal_prevented !== undefined) writer.tag(38, WireType.Varint).uint32(message.heal_prevented);
    /* optional uint32 heal_lost = 39; */
    if (message.heal_lost !== undefined) writer.tag(39, WireType.Varint).uint32(message.heal_lost);
    /* repeated CMsgMatchMetaDataContents.GoldSource gold_sources = 40; */
    for (let i = 0; i < message.gold_sources.length; i++)
      CMsgMatchMetaDataContents_GoldSource.internalBinaryWrite(
        message.gold_sources[i],
        writer.tag(40, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated CMsgMatchMetaDataContents.CustomUserStat custom_user_stats = 41; */
    for (let i = 0; i < message.custom_user_stats.length; i++)
      CMsgMatchMetaDataContents_CustomUserStat.internalBinaryWrite(
        message.custom_user_stats[i],
        writer.tag(41, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional uint32 damage_mitigated = 42; */
    if (message.damage_mitigated !== undefined) writer.tag(42, WireType.Varint).uint32(message.damage_mitigated);
    /* optional uint32 level = 43; */
    if (message.level !== undefined) writer.tag(43, WireType.Varint).uint32(message.level);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchMetaDataContents.PlayerStats
 */
export const CMsgMatchMetaDataContents_PlayerStats = new CMsgMatchMetaDataContents_PlayerStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchMetaDataContents_AbilityStat$Type extends MessageType<CMsgMatchMetaDataContents_AbilityStat> {
  constructor() {
    super("CMsgMatchMetaDataContents.AbilityStat", [
      {
        no: 1,
        name: "ability_id",
        kind: "scalar",
        localName: "ability_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "ability_value",
        kind: "scalar",
        localName: "ability_value",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgMatchMetaDataContents_AbilityStat>): CMsgMatchMetaDataContents_AbilityStat {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgMatchMetaDataContents_AbilityStat>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchMetaDataContents_AbilityStat,
  ): CMsgMatchMetaDataContents_AbilityStat {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 ability_id */ 1:
          message.ability_id = reader.uint32();
          break;
        case /* optional uint32 ability_value */ 2:
          message.ability_value = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgMatchMetaDataContents_AbilityStat,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 ability_id = 1; */
    if (message.ability_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.ability_id);
    /* optional uint32 ability_value = 2; */
    if (message.ability_value !== undefined) writer.tag(2, WireType.Varint).uint32(message.ability_value);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchMetaDataContents.AbilityStat
 */
export const CMsgMatchMetaDataContents_AbilityStat = new CMsgMatchMetaDataContents_AbilityStat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchMetaDataContents_BookReward$Type extends MessageType<CMsgMatchMetaDataContents_BookReward> {
  constructor() {
    super("CMsgMatchMetaDataContents.BookReward", [
      {
        no: 1,
        name: "book_id",
        kind: "scalar",
        localName: "book_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "xp_amount",
        kind: "scalar",
        localName: "xp_amount",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "starting_xp",
        kind: "scalar",
        localName: "starting_xp",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgMatchMetaDataContents_BookReward>): CMsgMatchMetaDataContents_BookReward {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgMatchMetaDataContents_BookReward>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchMetaDataContents_BookReward,
  ): CMsgMatchMetaDataContents_BookReward {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 book_id */ 1:
          message.book_id = reader.uint32();
          break;
        case /* optional uint32 xp_amount */ 2:
          message.xp_amount = reader.uint32();
          break;
        case /* optional uint32 starting_xp */ 3:
          message.starting_xp = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgMatchMetaDataContents_BookReward,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 book_id = 1; */
    if (message.book_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.book_id);
    /* optional uint32 xp_amount = 2; */
    if (message.xp_amount !== undefined) writer.tag(2, WireType.Varint).uint32(message.xp_amount);
    /* optional uint32 starting_xp = 3; */
    if (message.starting_xp !== undefined) writer.tag(3, WireType.Varint).uint32(message.starting_xp);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchMetaDataContents.BookReward
 */
export const CMsgMatchMetaDataContents_BookReward = new CMsgMatchMetaDataContents_BookReward$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchMetaDataContents_Players$Type extends MessageType<CMsgMatchMetaDataContents_Players> {
  constructor() {
    super("CMsgMatchMetaDataContents.Players", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        localName: "account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "player_slot",
        kind: "scalar",
        localName: "player_slot",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "death_details",
        kind: "message",
        localName: "death_details",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgMatchMetaDataContents_Deaths,
      },
      {
        no: 4,
        name: "items",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgMatchMetaDataContents_Items,
      },
      {
        no: 5,
        name: "stats",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgMatchMetaDataContents_PlayerStats,
      },
      {
        no: 6,
        name: "team",
        kind: "enum",
        opt: true,
        T: () => ["ECitadelLobbyTeam", ECitadelLobbyTeam],
      },
      {
        no: 8,
        name: "kills",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 9,
        name: "deaths",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 10,
        name: "assists",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 11,
        name: "net_worth",
        kind: "scalar",
        localName: "net_worth",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 12,
        name: "hero_id",
        kind: "scalar",
        localName: "hero_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 13,
        name: "last_hits",
        kind: "scalar",
        localName: "last_hits",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 14,
        name: "denies",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 15,
        name: "ability_points",
        kind: "scalar",
        localName: "ability_points",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 16,
        name: "party",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 17,
        name: "assigned_lane",
        kind: "scalar",
        localName: "assigned_lane",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 18,
        name: "level",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 19,
        name: "pings",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgMatchMetaDataContents_Ping,
      },
      {
        no: 20,
        name: "ability_stats",
        kind: "message",
        localName: "ability_stats",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgMatchMetaDataContents_AbilityStat,
      },
      {
        no: 21,
        name: "stats_type_stat",
        kind: "scalar",
        localName: "stats_type_stat",
        repeat: 1 /*RepeatType.PACKED*/,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 22,
        name: "book_rewards",
        kind: "message",
        localName: "book_rewards",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgMatchMetaDataContents_BookReward,
      },
      {
        no: 23,
        name: "abandon_match_time_s",
        kind: "scalar",
        localName: "abandon_match_time_s",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgMatchMetaDataContents_Players>): CMsgMatchMetaDataContents_Players {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.death_details = [];
    message.items = [];
    message.stats = [];
    message.pings = [];
    message.ability_stats = [];
    message.stats_type_stat = [];
    message.book_rewards = [];
    if (value !== undefined) reflectionMergePartial<CMsgMatchMetaDataContents_Players>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchMetaDataContents_Players,
  ): CMsgMatchMetaDataContents_Players {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.account_id = reader.uint32();
          break;
        case /* optional uint32 player_slot */ 2:
          message.player_slot = reader.uint32();
          break;
        case /* repeated CMsgMatchMetaDataContents.Deaths death_details */ 3:
          message.death_details.push(
            CMsgMatchMetaDataContents_Deaths.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* repeated CMsgMatchMetaDataContents.Items items */ 4:
          message.items.push(CMsgMatchMetaDataContents_Items.internalBinaryRead(reader, reader.uint32(), options));
          break;
        case /* repeated CMsgMatchMetaDataContents.PlayerStats stats */ 5:
          message.stats.push(
            CMsgMatchMetaDataContents_PlayerStats.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* optional ECitadelLobbyTeam team */ 6:
          message.team = reader.int32();
          break;
        case /* optional uint32 kills */ 8:
          message.kills = reader.uint32();
          break;
        case /* optional uint32 deaths */ 9:
          message.deaths = reader.uint32();
          break;
        case /* optional uint32 assists */ 10:
          message.assists = reader.uint32();
          break;
        case /* optional uint32 net_worth */ 11:
          message.net_worth = reader.uint32();
          break;
        case /* optional uint32 hero_id */ 12:
          message.hero_id = reader.uint32();
          break;
        case /* optional uint32 last_hits */ 13:
          message.last_hits = reader.uint32();
          break;
        case /* optional uint32 denies */ 14:
          message.denies = reader.uint32();
          break;
        case /* optional uint32 ability_points */ 15:
          message.ability_points = reader.uint32();
          break;
        case /* optional uint32 party */ 16:
          message.party = reader.uint32();
          break;
        case /* optional uint32 assigned_lane */ 17:
          message.assigned_lane = reader.uint32();
          break;
        case /* optional uint32 level */ 18:
          message.level = reader.uint32();
          break;
        case /* repeated CMsgMatchMetaDataContents.Ping pings */ 19:
          message.pings.push(CMsgMatchMetaDataContents_Ping.internalBinaryRead(reader, reader.uint32(), options));
          break;
        case /* repeated CMsgMatchMetaDataContents.AbilityStat ability_stats */ 20:
          message.ability_stats.push(
            CMsgMatchMetaDataContents_AbilityStat.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* repeated float stats_type_stat = 21 [packed = true];*/ 21:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.stats_type_stat.push(reader.float());
          else message.stats_type_stat.push(reader.float());
          break;
        case /* repeated CMsgMatchMetaDataContents.BookReward book_rewards */ 22:
          message.book_rewards.push(
            CMsgMatchMetaDataContents_BookReward.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* optional uint32 abandon_match_time_s */ 23:
          message.abandon_match_time_s = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgMatchMetaDataContents_Players,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
    /* optional uint32 player_slot = 2; */
    if (message.player_slot !== undefined) writer.tag(2, WireType.Varint).uint32(message.player_slot);
    /* repeated CMsgMatchMetaDataContents.Deaths death_details = 3; */
    for (let i = 0; i < message.death_details.length; i++)
      CMsgMatchMetaDataContents_Deaths.internalBinaryWrite(
        message.death_details[i],
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated CMsgMatchMetaDataContents.Items items = 4; */
    for (let i = 0; i < message.items.length; i++)
      CMsgMatchMetaDataContents_Items.internalBinaryWrite(
        message.items[i],
        writer.tag(4, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated CMsgMatchMetaDataContents.PlayerStats stats = 5; */
    for (let i = 0; i < message.stats.length; i++)
      CMsgMatchMetaDataContents_PlayerStats.internalBinaryWrite(
        message.stats[i],
        writer.tag(5, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional ECitadelLobbyTeam team = 6; */
    if (message.team !== undefined) writer.tag(6, WireType.Varint).int32(message.team);
    /* optional uint32 kills = 8; */
    if (message.kills !== undefined) writer.tag(8, WireType.Varint).uint32(message.kills);
    /* optional uint32 deaths = 9; */
    if (message.deaths !== undefined) writer.tag(9, WireType.Varint).uint32(message.deaths);
    /* optional uint32 assists = 10; */
    if (message.assists !== undefined) writer.tag(10, WireType.Varint).uint32(message.assists);
    /* optional uint32 net_worth = 11; */
    if (message.net_worth !== undefined) writer.tag(11, WireType.Varint).uint32(message.net_worth);
    /* optional uint32 hero_id = 12; */
    if (message.hero_id !== undefined) writer.tag(12, WireType.Varint).uint32(message.hero_id);
    /* optional uint32 last_hits = 13; */
    if (message.last_hits !== undefined) writer.tag(13, WireType.Varint).uint32(message.last_hits);
    /* optional uint32 denies = 14; */
    if (message.denies !== undefined) writer.tag(14, WireType.Varint).uint32(message.denies);
    /* optional uint32 ability_points = 15; */
    if (message.ability_points !== undefined) writer.tag(15, WireType.Varint).uint32(message.ability_points);
    /* optional uint32 party = 16; */
    if (message.party !== undefined) writer.tag(16, WireType.Varint).uint32(message.party);
    /* optional uint32 assigned_lane = 17; */
    if (message.assigned_lane !== undefined) writer.tag(17, WireType.Varint).uint32(message.assigned_lane);
    /* optional uint32 level = 18; */
    if (message.level !== undefined) writer.tag(18, WireType.Varint).uint32(message.level);
    /* repeated CMsgMatchMetaDataContents.Ping pings = 19; */
    for (let i = 0; i < message.pings.length; i++)
      CMsgMatchMetaDataContents_Ping.internalBinaryWrite(
        message.pings[i],
        writer.tag(19, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated CMsgMatchMetaDataContents.AbilityStat ability_stats = 20; */
    for (let i = 0; i < message.ability_stats.length; i++)
      CMsgMatchMetaDataContents_AbilityStat.internalBinaryWrite(
        message.ability_stats[i],
        writer.tag(20, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated float stats_type_stat = 21 [packed = true]; */
    if (message.stats_type_stat.length) {
      writer.tag(21, WireType.LengthDelimited).fork();
      for (let i = 0; i < message.stats_type_stat.length; i++) writer.float(message.stats_type_stat[i]);
      writer.join();
    }
    /* repeated CMsgMatchMetaDataContents.BookReward book_rewards = 22; */
    for (let i = 0; i < message.book_rewards.length; i++)
      CMsgMatchMetaDataContents_BookReward.internalBinaryWrite(
        message.book_rewards[i],
        writer.tag(22, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional uint32 abandon_match_time_s = 23; */
    if (message.abandon_match_time_s !== undefined)
      writer.tag(23, WireType.Varint).uint32(message.abandon_match_time_s);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchMetaDataContents.Players
 */
export const CMsgMatchMetaDataContents_Players = new CMsgMatchMetaDataContents_Players$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchMetaDataContents_Objective$Type extends MessageType<CMsgMatchMetaDataContents_Objective> {
  constructor() {
    super("CMsgMatchMetaDataContents.Objective", [
      {
        no: 1,
        name: "legacy_objective_id",
        kind: "enum",
        localName: "legacy_objective_id",
        opt: true,
        T: () => ["ECitadelObjective", ECitadelObjective],
      },
      {
        no: 2,
        name: "destroyed_time_s",
        kind: "scalar",
        localName: "destroyed_time_s",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "creep_damage",
        kind: "scalar",
        localName: "creep_damage",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "creep_damage_mitigated",
        kind: "scalar",
        localName: "creep_damage_mitigated",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "player_damage",
        kind: "scalar",
        localName: "player_damage",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 7,
        name: "player_damage_mitigated",
        kind: "scalar",
        localName: "player_damage_mitigated",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 8,
        name: "first_damage_time_s",
        kind: "scalar",
        localName: "first_damage_time_s",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 9,
        name: "team_objective_id",
        kind: "enum",
        localName: "team_objective_id",
        opt: true,
        T: () => ["ECitadelTeamObjective", ECitadelTeamObjective],
      },
      {
        no: 10,
        name: "team",
        kind: "enum",
        opt: true,
        T: () => ["ECitadelLobbyTeam", ECitadelLobbyTeam],
      },
    ]);
  }
  create(value?: PartialMessage<CMsgMatchMetaDataContents_Objective>): CMsgMatchMetaDataContents_Objective {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgMatchMetaDataContents_Objective>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchMetaDataContents_Objective,
  ): CMsgMatchMetaDataContents_Objective {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional ECitadelObjective legacy_objective_id */ 1:
          message.legacy_objective_id = reader.int32();
          break;
        case /* optional uint32 destroyed_time_s */ 2:
          message.destroyed_time_s = reader.uint32();
          break;
        case /* optional uint32 creep_damage */ 4:
          message.creep_damage = reader.uint32();
          break;
        case /* optional uint32 creep_damage_mitigated */ 5:
          message.creep_damage_mitigated = reader.uint32();
          break;
        case /* optional uint32 player_damage */ 6:
          message.player_damage = reader.uint32();
          break;
        case /* optional uint32 player_damage_mitigated */ 7:
          message.player_damage_mitigated = reader.uint32();
          break;
        case /* optional uint32 first_damage_time_s */ 8:
          message.first_damage_time_s = reader.uint32();
          break;
        case /* optional ECitadelTeamObjective team_objective_id */ 9:
          message.team_objective_id = reader.int32();
          break;
        case /* optional ECitadelLobbyTeam team */ 10:
          message.team = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgMatchMetaDataContents_Objective,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional ECitadelObjective legacy_objective_id = 1; */
    if (message.legacy_objective_id !== undefined) writer.tag(1, WireType.Varint).int32(message.legacy_objective_id);
    /* optional uint32 destroyed_time_s = 2; */
    if (message.destroyed_time_s !== undefined) writer.tag(2, WireType.Varint).uint32(message.destroyed_time_s);
    /* optional uint32 creep_damage = 4; */
    if (message.creep_damage !== undefined) writer.tag(4, WireType.Varint).uint32(message.creep_damage);
    /* optional uint32 creep_damage_mitigated = 5; */
    if (message.creep_damage_mitigated !== undefined)
      writer.tag(5, WireType.Varint).uint32(message.creep_damage_mitigated);
    /* optional uint32 player_damage = 6; */
    if (message.player_damage !== undefined) writer.tag(6, WireType.Varint).uint32(message.player_damage);
    /* optional uint32 player_damage_mitigated = 7; */
    if (message.player_damage_mitigated !== undefined)
      writer.tag(7, WireType.Varint).uint32(message.player_damage_mitigated);
    /* optional uint32 first_damage_time_s = 8; */
    if (message.first_damage_time_s !== undefined) writer.tag(8, WireType.Varint).uint32(message.first_damage_time_s);
    /* optional ECitadelTeamObjective team_objective_id = 9; */
    if (message.team_objective_id !== undefined) writer.tag(9, WireType.Varint).int32(message.team_objective_id);
    /* optional ECitadelLobbyTeam team = 10; */
    if (message.team !== undefined) writer.tag(10, WireType.Varint).int32(message.team);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchMetaDataContents.Objective
 */
export const CMsgMatchMetaDataContents_Objective = new CMsgMatchMetaDataContents_Objective$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchMetaDataContents_MidBoss$Type extends MessageType<CMsgMatchMetaDataContents_MidBoss> {
  constructor() {
    super("CMsgMatchMetaDataContents.MidBoss", [
      {
        no: 1,
        name: "team_killed",
        kind: "enum",
        localName: "team_killed",
        opt: true,
        T: () => ["ECitadelLobbyTeam", ECitadelLobbyTeam],
      },
      {
        no: 2,
        name: "team_claimed",
        kind: "enum",
        localName: "team_claimed",
        opt: true,
        T: () => ["ECitadelLobbyTeam", ECitadelLobbyTeam],
      },
      {
        no: 3,
        name: "destroyed_time_s",
        kind: "scalar",
        localName: "destroyed_time_s",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgMatchMetaDataContents_MidBoss>): CMsgMatchMetaDataContents_MidBoss {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgMatchMetaDataContents_MidBoss>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchMetaDataContents_MidBoss,
  ): CMsgMatchMetaDataContents_MidBoss {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional ECitadelLobbyTeam team_killed */ 1:
          message.team_killed = reader.int32();
          break;
        case /* optional ECitadelLobbyTeam team_claimed */ 2:
          message.team_claimed = reader.int32();
          break;
        case /* optional uint32 destroyed_time_s */ 3:
          message.destroyed_time_s = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgMatchMetaDataContents_MidBoss,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional ECitadelLobbyTeam team_killed = 1; */
    if (message.team_killed !== undefined) writer.tag(1, WireType.Varint).int32(message.team_killed);
    /* optional ECitadelLobbyTeam team_claimed = 2; */
    if (message.team_claimed !== undefined) writer.tag(2, WireType.Varint).int32(message.team_claimed);
    /* optional uint32 destroyed_time_s = 3; */
    if (message.destroyed_time_s !== undefined) writer.tag(3, WireType.Varint).uint32(message.destroyed_time_s);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchMetaDataContents.MidBoss
 */
export const CMsgMatchMetaDataContents_MidBoss = new CMsgMatchMetaDataContents_MidBoss$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchMetaDataContents_Pause$Type extends MessageType<CMsgMatchMetaDataContents_Pause> {
  constructor() {
    super("CMsgMatchMetaDataContents.Pause", [
      {
        no: 1,
        name: "game_time_s",
        kind: "scalar",
        localName: "game_time_s",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "pause_duration_s",
        kind: "scalar",
        localName: "pause_duration_s",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "player_slot",
        kind: "scalar",
        localName: "player_slot",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgMatchMetaDataContents_Pause>): CMsgMatchMetaDataContents_Pause {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgMatchMetaDataContents_Pause>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchMetaDataContents_Pause,
  ): CMsgMatchMetaDataContents_Pause {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 game_time_s */ 1:
          message.game_time_s = reader.uint32();
          break;
        case /* optional uint32 pause_duration_s */ 2:
          message.pause_duration_s = reader.uint32();
          break;
        case /* optional uint32 player_slot */ 3:
          message.player_slot = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgMatchMetaDataContents_Pause,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 game_time_s = 1; */
    if (message.game_time_s !== undefined) writer.tag(1, WireType.Varint).uint32(message.game_time_s);
    /* optional uint32 pause_duration_s = 2; */
    if (message.pause_duration_s !== undefined) writer.tag(2, WireType.Varint).uint32(message.pause_duration_s);
    /* optional uint32 player_slot = 3; */
    if (message.player_slot !== undefined) writer.tag(3, WireType.Varint).uint32(message.player_slot);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchMetaDataContents.Pause
 */
export const CMsgMatchMetaDataContents_Pause = new CMsgMatchMetaDataContents_Pause$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchMetaDataContents_WatchedDeathReplay$Type extends MessageType<CMsgMatchMetaDataContents_WatchedDeathReplay> {
  constructor() {
    super("CMsgMatchMetaDataContents.WatchedDeathReplay", [
      {
        no: 1,
        name: "game_time_s",
        kind: "scalar",
        localName: "game_time_s",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "player_slot",
        kind: "scalar",
        localName: "player_slot",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgMatchMetaDataContents_WatchedDeathReplay>,
  ): CMsgMatchMetaDataContents_WatchedDeathReplay {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgMatchMetaDataContents_WatchedDeathReplay>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchMetaDataContents_WatchedDeathReplay,
  ): CMsgMatchMetaDataContents_WatchedDeathReplay {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 game_time_s */ 1:
          message.game_time_s = reader.uint32();
          break;
        case /* optional uint32 player_slot */ 2:
          message.player_slot = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgMatchMetaDataContents_WatchedDeathReplay,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 game_time_s = 1; */
    if (message.game_time_s !== undefined) writer.tag(1, WireType.Varint).uint32(message.game_time_s);
    /* optional uint32 player_slot = 2; */
    if (message.player_slot !== undefined) writer.tag(2, WireType.Varint).uint32(message.player_slot);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchMetaDataContents.WatchedDeathReplay
 */
export const CMsgMatchMetaDataContents_WatchedDeathReplay = new CMsgMatchMetaDataContents_WatchedDeathReplay$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchMetaDataContents_MatchInfo$Type extends MessageType<CMsgMatchMetaDataContents_MatchInfo> {
  constructor() {
    super("CMsgMatchMetaDataContents.MatchInfo", [
      {
        no: 1,
        name: "duration_s",
        kind: "scalar",
        localName: "duration_s",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "match_outcome",
        kind: "enum",
        localName: "match_outcome",
        opt: true,
        T: () => ["CMsgMatchMetaDataContents.EMatchOutcome", CMsgMatchMetaDataContents_EMatchOutcome],
      },
      {
        no: 3,
        name: "winning_team",
        kind: "enum",
        localName: "winning_team",
        opt: true,
        T: () => ["ECitadelLobbyTeam", ECitadelLobbyTeam],
      },
      {
        no: 4,
        name: "players",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgMatchMetaDataContents_Players,
      },
      {
        no: 5,
        name: "start_time",
        kind: "scalar",
        localName: "start_time",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "match_id",
        kind: "scalar",
        localName: "match_id",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 8,
        name: "legacy_objectives_mask",
        kind: "scalar",
        localName: "legacy_objectives_mask",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 9,
        name: "game_mode",
        kind: "enum",
        localName: "game_mode",
        opt: true,
        T: () => ["ECitadelGameMode", ECitadelGameMode],
      },
      {
        no: 10,
        name: "match_mode",
        kind: "enum",
        localName: "match_mode",
        opt: true,
        T: () => ["ECitadelMatchMode", ECitadelMatchMode],
      },
      {
        no: 11,
        name: "objectives",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgMatchMetaDataContents_Objective,
      },
      {
        no: 12,
        name: "match_paths",
        kind: "message",
        localName: "match_paths",
        T: () => CMsgMatchPlayerPathsData,
      },
      {
        no: 13,
        name: "damage_matrix",
        kind: "message",
        localName: "damage_matrix",
        T: () => CMsgMatchPlayerDamageMatrix,
      },
      {
        no: 14,
        name: "match_pauses",
        kind: "message",
        localName: "match_pauses",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgMatchMetaDataContents_Pause,
      },
      {
        no: 15,
        name: "custom_user_stats",
        kind: "message",
        localName: "custom_user_stats",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgMatchMetaDataContents_CustomUserStatInfo,
      },
      {
        no: 16,
        name: "watched_death_replays",
        kind: "message",
        localName: "watched_death_replays",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgMatchMetaDataContents_WatchedDeathReplay,
      },
      {
        no: 17,
        name: "objectives_mask_team0",
        kind: "scalar",
        localName: "objectives_mask_team0",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 18,
        name: "objectives_mask_team1",
        kind: "scalar",
        localName: "objectives_mask_team1",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 19,
        name: "mid_boss",
        kind: "message",
        localName: "mid_boss",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgMatchMetaDataContents_MidBoss,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgMatchMetaDataContents_MatchInfo>): CMsgMatchMetaDataContents_MatchInfo {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.players = [];
    message.objectives = [];
    message.match_pauses = [];
    message.custom_user_stats = [];
    message.watched_death_replays = [];
    message.mid_boss = [];
    if (value !== undefined) reflectionMergePartial<CMsgMatchMetaDataContents_MatchInfo>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchMetaDataContents_MatchInfo,
  ): CMsgMatchMetaDataContents_MatchInfo {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 duration_s */ 1:
          message.duration_s = reader.uint32();
          break;
        case /* optional CMsgMatchMetaDataContents.EMatchOutcome match_outcome */ 2:
          message.match_outcome = reader.int32();
          break;
        case /* optional ECitadelLobbyTeam winning_team */ 3:
          message.winning_team = reader.int32();
          break;
        case /* repeated CMsgMatchMetaDataContents.Players players */ 4:
          message.players.push(CMsgMatchMetaDataContents_Players.internalBinaryRead(reader, reader.uint32(), options));
          break;
        case /* optional uint32 start_time */ 5:
          message.start_time = reader.uint32();
          break;
        case /* optional uint64 match_id */ 6:
          message.match_id = reader.uint64().toBigInt();
          break;
        case /* optional uint32 legacy_objectives_mask */ 8:
          message.legacy_objectives_mask = reader.uint32();
          break;
        case /* optional ECitadelGameMode game_mode */ 9:
          message.game_mode = reader.int32();
          break;
        case /* optional ECitadelMatchMode match_mode */ 10:
          message.match_mode = reader.int32();
          break;
        case /* repeated CMsgMatchMetaDataContents.Objective objectives */ 11:
          message.objectives.push(
            CMsgMatchMetaDataContents_Objective.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* optional CMsgMatchPlayerPathsData match_paths */ 12:
          message.match_paths = CMsgMatchPlayerPathsData.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.match_paths,
          );
          break;
        case /* optional CMsgMatchPlayerDamageMatrix damage_matrix */ 13:
          message.damage_matrix = CMsgMatchPlayerDamageMatrix.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.damage_matrix,
          );
          break;
        case /* repeated CMsgMatchMetaDataContents.Pause match_pauses */ 14:
          message.match_pauses.push(
            CMsgMatchMetaDataContents_Pause.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* repeated CMsgMatchMetaDataContents.CustomUserStatInfo custom_user_stats */ 15:
          message.custom_user_stats.push(
            CMsgMatchMetaDataContents_CustomUserStatInfo.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* repeated CMsgMatchMetaDataContents.WatchedDeathReplay watched_death_replays */ 16:
          message.watched_death_replays.push(
            CMsgMatchMetaDataContents_WatchedDeathReplay.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* optional uint64 objectives_mask_team0 */ 17:
          message.objectives_mask_team0 = reader.uint64().toBigInt();
          break;
        case /* optional uint64 objectives_mask_team1 */ 18:
          message.objectives_mask_team1 = reader.uint64().toBigInt();
          break;
        case /* repeated CMsgMatchMetaDataContents.MidBoss mid_boss */ 19:
          message.mid_boss.push(CMsgMatchMetaDataContents_MidBoss.internalBinaryRead(reader, reader.uint32(), options));
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgMatchMetaDataContents_MatchInfo,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 duration_s = 1; */
    if (message.duration_s !== undefined) writer.tag(1, WireType.Varint).uint32(message.duration_s);
    /* optional CMsgMatchMetaDataContents.EMatchOutcome match_outcome = 2; */
    if (message.match_outcome !== undefined) writer.tag(2, WireType.Varint).int32(message.match_outcome);
    /* optional ECitadelLobbyTeam winning_team = 3; */
    if (message.winning_team !== undefined) writer.tag(3, WireType.Varint).int32(message.winning_team);
    /* repeated CMsgMatchMetaDataContents.Players players = 4; */
    for (let i = 0; i < message.players.length; i++)
      CMsgMatchMetaDataContents_Players.internalBinaryWrite(
        message.players[i],
        writer.tag(4, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional uint32 start_time = 5; */
    if (message.start_time !== undefined) writer.tag(5, WireType.Varint).uint32(message.start_time);
    /* optional uint64 match_id = 6; */
    if (message.match_id !== undefined) writer.tag(6, WireType.Varint).uint64(message.match_id);
    /* optional uint32 legacy_objectives_mask = 8; */
    if (message.legacy_objectives_mask !== undefined)
      writer.tag(8, WireType.Varint).uint32(message.legacy_objectives_mask);
    /* optional ECitadelGameMode game_mode = 9; */
    if (message.game_mode !== undefined) writer.tag(9, WireType.Varint).int32(message.game_mode);
    /* optional ECitadelMatchMode match_mode = 10; */
    if (message.match_mode !== undefined) writer.tag(10, WireType.Varint).int32(message.match_mode);
    /* repeated CMsgMatchMetaDataContents.Objective objectives = 11; */
    for (let i = 0; i < message.objectives.length; i++)
      CMsgMatchMetaDataContents_Objective.internalBinaryWrite(
        message.objectives[i],
        writer.tag(11, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional CMsgMatchPlayerPathsData match_paths = 12; */
    if (message.match_paths)
      CMsgMatchPlayerPathsData.internalBinaryWrite(
        message.match_paths,
        writer.tag(12, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional CMsgMatchPlayerDamageMatrix damage_matrix = 13; */
    if (message.damage_matrix)
      CMsgMatchPlayerDamageMatrix.internalBinaryWrite(
        message.damage_matrix,
        writer.tag(13, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated CMsgMatchMetaDataContents.Pause match_pauses = 14; */
    for (let i = 0; i < message.match_pauses.length; i++)
      CMsgMatchMetaDataContents_Pause.internalBinaryWrite(
        message.match_pauses[i],
        writer.tag(14, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated CMsgMatchMetaDataContents.CustomUserStatInfo custom_user_stats = 15; */
    for (let i = 0; i < message.custom_user_stats.length; i++)
      CMsgMatchMetaDataContents_CustomUserStatInfo.internalBinaryWrite(
        message.custom_user_stats[i],
        writer.tag(15, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated CMsgMatchMetaDataContents.WatchedDeathReplay watched_death_replays = 16; */
    for (let i = 0; i < message.watched_death_replays.length; i++)
      CMsgMatchMetaDataContents_WatchedDeathReplay.internalBinaryWrite(
        message.watched_death_replays[i],
        writer.tag(16, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional uint64 objectives_mask_team0 = 17; */
    if (message.objectives_mask_team0 !== undefined)
      writer.tag(17, WireType.Varint).uint64(message.objectives_mask_team0);
    /* optional uint64 objectives_mask_team1 = 18; */
    if (message.objectives_mask_team1 !== undefined)
      writer.tag(18, WireType.Varint).uint64(message.objectives_mask_team1);
    /* repeated CMsgMatchMetaDataContents.MidBoss mid_boss = 19; */
    for (let i = 0; i < message.mid_boss.length; i++)
      CMsgMatchMetaDataContents_MidBoss.internalBinaryWrite(
        message.mid_boss[i],
        writer.tag(19, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchMetaDataContents.MatchInfo
 */
export const CMsgMatchMetaDataContents_MatchInfo = new CMsgMatchMetaDataContents_MatchInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMatchMetaData$Type extends MessageType<CMsgMatchMetaData> {
  constructor() {
    super("CMsgMatchMetaData", [
      {
        no: 1,
        name: "version",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "match_details",
        kind: "scalar",
        localName: "match_details",
        opt: true,
        T: 12 /*ScalarType.BYTES*/,
      },
      {
        no: 3,
        name: "match_id",
        kind: "scalar",
        localName: "match_id",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgMatchMetaData>): CMsgMatchMetaData {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgMatchMetaData>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMatchMetaData,
  ): CMsgMatchMetaData {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 version */ 1:
          message.version = reader.uint32();
          break;
        case /* optional bytes match_details */ 2:
          message.match_details = reader.bytes();
          break;
        case /* optional uint64 match_id */ 3:
          message.match_id = reader.uint64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: CMsgMatchMetaData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* optional uint32 version = 1; */
    if (message.version !== undefined) writer.tag(1, WireType.Varint).uint32(message.version);
    /* optional bytes match_details = 2; */
    if (message.match_details !== undefined) writer.tag(2, WireType.LengthDelimited).bytes(message.match_details);
    /* optional uint64 match_id = 3; */
    if (message.match_id !== undefined) writer.tag(3, WireType.Varint).uint64(message.match_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMatchMetaData
 */
export const CMsgMatchMetaData = new CMsgMatchMetaData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgMapLine$Type extends MessageType<CMsgMapLine> {
  constructor() {
    super("CMsgMapLine", [
      {
        no: 1,
        name: "x",
        kind: "scalar",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 2,
        name: "y",
        kind: "scalar",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 3,
        name: "initial",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgMapLine>): CMsgMapLine {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgMapLine>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgMapLine,
  ): CMsgMapLine {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional int32 x */ 1:
          message.x = reader.int32();
          break;
        case /* optional int32 y */ 2:
          message.y = reader.int32();
          break;
        case /* optional bool initial */ 3:
          message.initial = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: CMsgMapLine, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* optional int32 x = 1; */
    if (message.x !== undefined) writer.tag(1, WireType.Varint).int32(message.x);
    /* optional int32 y = 2; */
    if (message.y !== undefined) writer.tag(2, WireType.Varint).int32(message.y);
    /* optional bool initial = 3; */
    if (message.initial !== undefined) writer.tag(3, WireType.Varint).bool(message.initial);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgMapLine
 */
export const CMsgMapLine = new CMsgMapLine$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgAccountHeroStats$Type extends MessageType<CMsgAccountHeroStats> {
  constructor() {
    super("CMsgAccountHeroStats", [
      {
        no: 1,
        name: "hero_id",
        kind: "scalar",
        localName: "hero_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "stat_id",
        kind: "scalar",
        localName: "stat_id",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "total_value",
        kind: "scalar",
        localName: "total_value",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 4,
        name: "medals_bronze",
        kind: "scalar",
        localName: "medals_bronze",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "medals_silver",
        kind: "scalar",
        localName: "medals_silver",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "medals_gold",
        kind: "scalar",
        localName: "medals_gold",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgAccountHeroStats>): CMsgAccountHeroStats {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.stat_id = [];
    message.total_value = [];
    message.medals_bronze = [];
    message.medals_silver = [];
    message.medals_gold = [];
    if (value !== undefined) reflectionMergePartial<CMsgAccountHeroStats>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgAccountHeroStats,
  ): CMsgAccountHeroStats {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 hero_id */ 1:
          message.hero_id = reader.uint32();
          break;
        case /* repeated uint32 stat_id */ 2:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.stat_id.push(reader.uint32());
          else message.stat_id.push(reader.uint32());
          break;
        case /* repeated uint64 total_value */ 3:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.total_value.push(reader.uint64().toBigInt());
          else message.total_value.push(reader.uint64().toBigInt());
          break;
        case /* repeated uint32 medals_bronze */ 4:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.medals_bronze.push(reader.uint32());
          else message.medals_bronze.push(reader.uint32());
          break;
        case /* repeated uint32 medals_silver */ 5:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.medals_silver.push(reader.uint32());
          else message.medals_silver.push(reader.uint32());
          break;
        case /* repeated uint32 medals_gold */ 6:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.medals_gold.push(reader.uint32());
          else message.medals_gold.push(reader.uint32());
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgAccountHeroStats,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 hero_id = 1; */
    if (message.hero_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.hero_id);
    /* repeated uint32 stat_id = 2; */
    for (let i = 0; i < message.stat_id.length; i++) writer.tag(2, WireType.Varint).uint32(message.stat_id[i]);
    /* repeated uint64 total_value = 3; */
    for (let i = 0; i < message.total_value.length; i++) writer.tag(3, WireType.Varint).uint64(message.total_value[i]);
    /* repeated uint32 medals_bronze = 4; */
    for (let i = 0; i < message.medals_bronze.length; i++)
      writer.tag(4, WireType.Varint).uint32(message.medals_bronze[i]);
    /* repeated uint32 medals_silver = 5; */
    for (let i = 0; i < message.medals_silver.length; i++)
      writer.tag(5, WireType.Varint).uint32(message.medals_silver[i]);
    /* repeated uint32 medals_gold = 6; */
    for (let i = 0; i < message.medals_gold.length; i++) writer.tag(6, WireType.Varint).uint32(message.medals_gold[i]);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgAccountHeroStats
 */
export const CMsgAccountHeroStats = new CMsgAccountHeroStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgAccountBookStats$Type extends MessageType<CMsgAccountBookStats> {
  constructor() {
    super("CMsgAccountBookStats", [
      {
        no: 1,
        name: "book_id",
        kind: "scalar",
        localName: "book_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "book_xp",
        kind: "scalar",
        localName: "book_xp",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "book_max_xp",
        kind: "scalar",
        localName: "book_max_xp",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgAccountBookStats>): CMsgAccountBookStats {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgAccountBookStats>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgAccountBookStats,
  ): CMsgAccountBookStats {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 book_id */ 1:
          message.book_id = reader.uint32();
          break;
        case /* optional uint32 book_xp */ 2:
          message.book_xp = reader.uint32();
          break;
        case /* optional uint32 book_max_xp */ 3:
          message.book_max_xp = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgAccountBookStats,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 book_id = 1; */
    if (message.book_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.book_id);
    /* optional uint32 book_xp = 2; */
    if (message.book_xp !== undefined) writer.tag(2, WireType.Varint).uint32(message.book_xp);
    /* optional uint32 book_max_xp = 3; */
    if (message.book_max_xp !== undefined) writer.tag(3, WireType.Varint).uint32(message.book_max_xp);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgAccountBookStats
 */
export const CMsgAccountBookStats = new CMsgAccountBookStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgAccountStats$Type extends MessageType<CMsgAccountStats> {
  constructor() {
    super("CMsgAccountStats", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        localName: "account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "stats",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgAccountHeroStats,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgAccountStats>): CMsgAccountStats {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.stats = [];
    if (value !== undefined) reflectionMergePartial<CMsgAccountStats>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgAccountStats,
  ): CMsgAccountStats {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.account_id = reader.uint32();
          break;
        case /* repeated CMsgAccountHeroStats stats */ 2:
          message.stats.push(CMsgAccountHeroStats.internalBinaryRead(reader, reader.uint32(), options));
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: CMsgAccountStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
    /* repeated CMsgAccountHeroStats stats = 2; */
    for (let i = 0; i < message.stats.length; i++)
      CMsgAccountHeroStats.internalBinaryWrite(
        message.stats[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgAccountStats
 */
export const CMsgAccountStats = new CMsgAccountStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCAccountData$Type extends MessageType<CMsgGCAccountData> {
  constructor() {
    super("CMsgGCAccountData", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        localName: "account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "cheater_report_score",
        kind: "scalar",
        localName: "cheater_report_score",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgGCAccountData>): CMsgGCAccountData {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgGCAccountData>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgGCAccountData,
  ): CMsgGCAccountData {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.account_id = reader.uint32();
          break;
        case /* optional float cheater_report_score */ 2:
          message.cheater_report_score = reader.float();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: CMsgGCAccountData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
    /* optional float cheater_report_score = 2; */
    if (message.cheater_report_score !== undefined) writer.tag(2, WireType.Bit32).float(message.cheater_report_score);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgGCAccountData
 */
export const CMsgGCAccountData = new CMsgGCAccountData$Type();

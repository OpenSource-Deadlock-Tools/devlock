// @generated by protobuf-ts 2.9.4 with parameter use_proto_field_name
// @generated from protobuf file "demo.proto" (syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message CDemoFileHeader
 */
export interface CDemoFileHeader {
  /**
   * @generated from protobuf field: string demo_file_stamp = 1;
   */
  demo_file_stamp: string;
  /**
   * @generated from protobuf field: optional int32 network_protocol = 2;
   */
  network_protocol?: number;
  /**
   * @generated from protobuf field: optional string server_name = 3;
   */
  server_name?: string;
  /**
   * @generated from protobuf field: optional string client_name = 4;
   */
  client_name?: string;
  /**
   * @generated from protobuf field: optional string map_name = 5;
   */
  map_name?: string;
  /**
   * @generated from protobuf field: optional string game_directory = 6;
   */
  game_directory?: string;
  /**
   * @generated from protobuf field: optional int32 fullpackets_version = 7;
   */
  fullpackets_version?: number;
  /**
   * @generated from protobuf field: optional bool allow_clientside_entities = 8;
   */
  allow_clientside_entities?: boolean;
  /**
   * @generated from protobuf field: optional bool allow_clientside_particles = 9;
   */
  allow_clientside_particles?: boolean;
  /**
   * @generated from protobuf field: optional string addons = 10;
   */
  addons?: string;
  /**
   * @generated from protobuf field: optional string demo_version_name = 11;
   */
  demo_version_name?: string;
  /**
   * @generated from protobuf field: optional string demo_version_guid = 12;
   */
  demo_version_guid?: string;
  /**
   * @generated from protobuf field: optional int32 build_num = 13;
   */
  build_num?: number;
  /**
   * @generated from protobuf field: optional string game = 14;
   */
  game?: string;
  /**
   * @generated from protobuf field: optional int32 server_start_tick = 15;
   */
  server_start_tick?: number;
}
/**
 * @generated from protobuf message CGameInfo
 */
export interface CGameInfo {
  /**
   * @generated from protobuf field: optional CGameInfo.CDotaGameInfo dota = 4;
   */
  dota?: CGameInfo_CDotaGameInfo;
  /**
   * @generated from protobuf field: optional CGameInfo.CCSGameInfo cs = 5;
   */
  cs?: CGameInfo_CCSGameInfo;
}
/**
 * @generated from protobuf message CGameInfo.CDotaGameInfo
 */
export interface CGameInfo_CDotaGameInfo {
  /**
   * @generated from protobuf field: optional uint64 match_id = 1;
   */
  match_id?: bigint;
  /**
   * @generated from protobuf field: optional int32 game_mode = 2;
   */
  game_mode?: number;
  /**
   * @generated from protobuf field: optional int32 game_winner = 3;
   */
  game_winner?: number;
  /**
   * @generated from protobuf field: repeated CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4;
   */
  player_info: CGameInfo_CDotaGameInfo_CPlayerInfo[];
  /**
   * @generated from protobuf field: optional uint32 leagueid = 5;
   */
  leagueid?: number;
  /**
   * @generated from protobuf field: repeated CGameInfo.CDotaGameInfo.CHeroSelectEvent picks_bans = 6;
   */
  picks_bans: CGameInfo_CDotaGameInfo_CHeroSelectEvent[];
  /**
   * @generated from protobuf field: optional uint32 radiant_team_id = 7;
   */
  radiant_team_id?: number;
  /**
   * @generated from protobuf field: optional uint32 dire_team_id = 8;
   */
  dire_team_id?: number;
  /**
   * @generated from protobuf field: optional string radiant_team_tag = 9;
   */
  radiant_team_tag?: string;
  /**
   * @generated from protobuf field: optional string dire_team_tag = 10;
   */
  dire_team_tag?: string;
  /**
   * @generated from protobuf field: optional uint32 end_time = 11;
   */
  end_time?: number;
}
/**
 * @generated from protobuf message CGameInfo.CDotaGameInfo.CPlayerInfo
 */
export interface CGameInfo_CDotaGameInfo_CPlayerInfo {
  /**
   * @generated from protobuf field: optional string hero_name = 1;
   */
  hero_name?: string;
  /**
   * @generated from protobuf field: optional string player_name = 2;
   */
  player_name?: string;
  /**
   * @generated from protobuf field: optional bool is_fake_client = 3;
   */
  is_fake_client?: boolean;
  /**
   * @generated from protobuf field: optional uint64 steamid = 4;
   */
  steamid?: bigint;
  /**
   * @generated from protobuf field: optional int32 game_team = 5;
   */
  game_team?: number;
}
/**
 * @generated from protobuf message CGameInfo.CDotaGameInfo.CHeroSelectEvent
 */
export interface CGameInfo_CDotaGameInfo_CHeroSelectEvent {
  /**
   * @generated from protobuf field: optional bool is_pick = 1;
   */
  is_pick?: boolean;
  /**
   * @generated from protobuf field: optional uint32 team = 2;
   */
  team?: number;
  /**
   * @generated from protobuf field: optional int32 hero_id = 3;
   */
  hero_id?: number;
}
/**
 * @generated from protobuf message CGameInfo.CCSGameInfo
 */
export interface CGameInfo_CCSGameInfo {
  /**
   * @generated from protobuf field: repeated int32 round_start_ticks = 1;
   */
  round_start_ticks: number[];
}
/**
 * @generated from protobuf message CDemoFileInfo
 */
export interface CDemoFileInfo {
  /**
   * @generated from protobuf field: optional float playback_time = 1;
   */
  playback_time?: number;
  /**
   * @generated from protobuf field: optional int32 playback_ticks = 2;
   */
  playback_ticks?: number;
  /**
   * @generated from protobuf field: optional int32 playback_frames = 3;
   */
  playback_frames?: number;
  /**
   * @generated from protobuf field: optional CGameInfo game_info = 4;
   */
  game_info?: CGameInfo;
}
/**
 * @generated from protobuf message CDemoPacket
 */
export interface CDemoPacket {
  /**
   * @generated from protobuf field: optional bytes data = 3;
   */
  data?: Uint8Array;
}
/**
 * @generated from protobuf message CDemoFullPacket
 */
export interface CDemoFullPacket {
  /**
   * @generated from protobuf field: optional CDemoStringTables string_table = 1;
   */
  string_table?: CDemoStringTables;
  /**
   * @generated from protobuf field: optional CDemoPacket packet = 2;
   */
  packet?: CDemoPacket;
}
/**
 * @generated from protobuf message CDemoSaveGame
 */
export interface CDemoSaveGame {
  /**
   * @generated from protobuf field: optional bytes data = 1;
   */
  data?: Uint8Array;
  /**
   * @generated from protobuf field: optional fixed64 steam_id = 2;
   */
  steam_id?: bigint;
  /**
   * @generated from protobuf field: optional fixed64 signature = 3;
   */
  signature?: bigint;
  /**
   * @generated from protobuf field: optional int32 version = 4;
   */
  version?: number;
}
/**
 * @generated from protobuf message CDemoSyncTick
 */
export interface CDemoSyncTick {}
/**
 * @generated from protobuf message CDemoConsoleCmd
 */
export interface CDemoConsoleCmd {
  /**
   * @generated from protobuf field: optional string cmdstring = 1;
   */
  cmdstring?: string;
}
/**
 * @generated from protobuf message CDemoSendTables
 */
export interface CDemoSendTables {
  /**
   * @generated from protobuf field: optional bytes data = 1;
   */
  data?: Uint8Array;
}
/**
 * @generated from protobuf message CDemoClassInfo
 */
export interface CDemoClassInfo {
  /**
   * @generated from protobuf field: repeated CDemoClassInfo.class_t classes = 1;
   */
  classes: CDemoClassInfo_class_t[];
}
/**
 * @generated from protobuf message CDemoClassInfo.class_t
 */
export interface CDemoClassInfo_class_t {
  /**
   * @generated from protobuf field: optional int32 class_id = 1;
   */
  class_id?: number;
  /**
   * @generated from protobuf field: optional string network_name = 2;
   */
  network_name?: string;
  /**
   * @generated from protobuf field: optional string table_name = 3;
   */
  table_name?: string;
}
/**
 * @generated from protobuf message CDemoCustomData
 */
export interface CDemoCustomData {
  /**
   * @generated from protobuf field: optional int32 callback_index = 1;
   */
  callback_index?: number;
  /**
   * @generated from protobuf field: optional bytes data = 2;
   */
  data?: Uint8Array;
}
/**
 * @generated from protobuf message CDemoCustomDataCallbacks
 */
export interface CDemoCustomDataCallbacks {
  /**
   * @generated from protobuf field: repeated string save_id = 1;
   */
  save_id: string[];
}
/**
 * @generated from protobuf message CDemoAnimationHeader
 */
export interface CDemoAnimationHeader {
  /**
   * @generated from protobuf field: optional sint32 entity_id = 1;
   */
  entity_id?: number;
  /**
   * @generated from protobuf field: optional int32 tick = 2;
   */
  tick?: number;
  /**
   * @generated from protobuf field: optional bytes data = 3;
   */
  data?: Uint8Array;
}
/**
 * @generated from protobuf message CDemoAnimationData
 */
export interface CDemoAnimationData {
  /**
   * @generated from protobuf field: optional sint32 entity_id = 1;
   */
  entity_id?: number;
  /**
   * @generated from protobuf field: optional int32 start_tick = 2;
   */
  start_tick?: number;
  /**
   * @generated from protobuf field: optional int32 end_tick = 3;
   */
  end_tick?: number;
  /**
   * @generated from protobuf field: optional bytes data = 4;
   */
  data?: Uint8Array;
  /**
   * @generated from protobuf field: optional int64 data_checksum = 5;
   */
  data_checksum?: bigint;
}
/**
 * @generated from protobuf message CDemoStringTables
 */
export interface CDemoStringTables {
  /**
   * @generated from protobuf field: repeated CDemoStringTables.table_t tables = 1;
   */
  tables: CDemoStringTables_table_t[];
}
/**
 * @generated from protobuf message CDemoStringTables.items_t
 */
export interface CDemoStringTables_items_t {
  /**
   * @generated from protobuf field: optional string str = 1;
   */
  str?: string;
  /**
   * @generated from protobuf field: optional bytes data = 2;
   */
  data?: Uint8Array;
}
/**
 * @generated from protobuf message CDemoStringTables.table_t
 */
export interface CDemoStringTables_table_t {
  /**
   * @generated from protobuf field: optional string table_name = 1;
   */
  table_name?: string;
  /**
   * @generated from protobuf field: repeated CDemoStringTables.items_t items = 2;
   */
  items: CDemoStringTables_items_t[];
  /**
   * @generated from protobuf field: repeated CDemoStringTables.items_t items_clientside = 3;
   */
  items_clientside: CDemoStringTables_items_t[];
  /**
   * @generated from protobuf field: optional int32 table_flags = 4;
   */
  table_flags?: number;
}
/**
 * @generated from protobuf message CDemoStop
 */
export interface CDemoStop {}
/**
 * @generated from protobuf message CDemoUserCmd
 */
export interface CDemoUserCmd {
  /**
   * @generated from protobuf field: optional int32 cmd_number = 1;
   */
  cmd_number?: number;
  /**
   * @generated from protobuf field: optional bytes data = 2;
   */
  data?: Uint8Array;
}
/**
 * @generated from protobuf message CDemoSpawnGroups
 */
export interface CDemoSpawnGroups {
  /**
   * @generated from protobuf field: repeated bytes msgs = 3;
   */
  msgs: Uint8Array[];
}
/**
 * @generated from protobuf enum EDemoCommands
 */
export enum EDemoCommands {
  /**
   * @generated from protobuf enum value: DEM_Error = -1;
   */
  DEM_Error = -1,
  /**
   * @generated from protobuf enum value: DEM_Stop = 0;
   */
  DEM_Stop = 0,
  /**
   * @generated from protobuf enum value: DEM_FileHeader = 1;
   */
  DEM_FileHeader = 1,
  /**
   * @generated from protobuf enum value: DEM_FileInfo = 2;
   */
  DEM_FileInfo = 2,
  /**
   * @generated from protobuf enum value: DEM_SyncTick = 3;
   */
  DEM_SyncTick = 3,
  /**
   * @generated from protobuf enum value: DEM_SendTables = 4;
   */
  DEM_SendTables = 4,
  /**
   * @generated from protobuf enum value: DEM_ClassInfo = 5;
   */
  DEM_ClassInfo = 5,
  /**
   * @generated from protobuf enum value: DEM_StringTables = 6;
   */
  DEM_StringTables = 6,
  /**
   * @generated from protobuf enum value: DEM_Packet = 7;
   */
  DEM_Packet = 7,
  /**
   * @generated from protobuf enum value: DEM_SignonPacket = 8;
   */
  DEM_SignonPacket = 8,
  /**
   * @generated from protobuf enum value: DEM_ConsoleCmd = 9;
   */
  DEM_ConsoleCmd = 9,
  /**
   * @generated from protobuf enum value: DEM_CustomData = 10;
   */
  DEM_CustomData = 10,
  /**
   * @generated from protobuf enum value: DEM_CustomDataCallbacks = 11;
   */
  DEM_CustomDataCallbacks = 11,
  /**
   * @generated from protobuf enum value: DEM_UserCmd = 12;
   */
  DEM_UserCmd = 12,
  /**
   * @generated from protobuf enum value: DEM_FullPacket = 13;
   */
  DEM_FullPacket = 13,
  /**
   * @generated from protobuf enum value: DEM_SaveGame = 14;
   */
  DEM_SaveGame = 14,
  /**
   * @generated from protobuf enum value: DEM_SpawnGroups = 15;
   */
  DEM_SpawnGroups = 15,
  /**
   * @generated from protobuf enum value: DEM_AnimationData = 16;
   */
  DEM_AnimationData = 16,
  /**
   * @generated from protobuf enum value: DEM_AnimationHeader = 17;
   */
  DEM_AnimationHeader = 17,
  /**
   * @generated from protobuf enum value: DEM_Max = 18;
   */
  DEM_Max = 18,
  /**
   * @generated from protobuf enum value: DEM_IsCompressed = 64;
   */
  DEM_IsCompressed = 64,
}
// @generated message type with reflection information, may provide speed optimized methods
class CDemoFileHeader$Type extends MessageType<CDemoFileHeader> {
  constructor() {
    super("CDemoFileHeader", [
      {
        no: 1,
        name: "demo_file_stamp",
        kind: "scalar",
        localName: "demo_file_stamp",
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 2,
        name: "network_protocol",
        kind: "scalar",
        localName: "network_protocol",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 3,
        name: "server_name",
        kind: "scalar",
        localName: "server_name",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 4,
        name: "client_name",
        kind: "scalar",
        localName: "client_name",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 5,
        name: "map_name",
        kind: "scalar",
        localName: "map_name",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 6,
        name: "game_directory",
        kind: "scalar",
        localName: "game_directory",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 7,
        name: "fullpackets_version",
        kind: "scalar",
        localName: "fullpackets_version",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 8,
        name: "allow_clientside_entities",
        kind: "scalar",
        localName: "allow_clientside_entities",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 9,
        name: "allow_clientside_particles",
        kind: "scalar",
        localName: "allow_clientside_particles",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 10,
        name: "addons",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 11,
        name: "demo_version_name",
        kind: "scalar",
        localName: "demo_version_name",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 12,
        name: "demo_version_guid",
        kind: "scalar",
        localName: "demo_version_guid",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 13,
        name: "build_num",
        kind: "scalar",
        localName: "build_num",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 14,
        name: "game",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 15,
        name: "server_start_tick",
        kind: "scalar",
        localName: "server_start_tick",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CDemoFileHeader>): CDemoFileHeader {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.demo_file_stamp = "";
    if (value !== undefined) reflectionMergePartial<CDemoFileHeader>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CDemoFileHeader,
  ): CDemoFileHeader {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string demo_file_stamp */ 1:
          message.demo_file_stamp = reader.string();
          break;
        case /* optional int32 network_protocol */ 2:
          message.network_protocol = reader.int32();
          break;
        case /* optional string server_name */ 3:
          message.server_name = reader.string();
          break;
        case /* optional string client_name */ 4:
          message.client_name = reader.string();
          break;
        case /* optional string map_name */ 5:
          message.map_name = reader.string();
          break;
        case /* optional string game_directory */ 6:
          message.game_directory = reader.string();
          break;
        case /* optional int32 fullpackets_version */ 7:
          message.fullpackets_version = reader.int32();
          break;
        case /* optional bool allow_clientside_entities */ 8:
          message.allow_clientside_entities = reader.bool();
          break;
        case /* optional bool allow_clientside_particles */ 9:
          message.allow_clientside_particles = reader.bool();
          break;
        case /* optional string addons */ 10:
          message.addons = reader.string();
          break;
        case /* optional string demo_version_name */ 11:
          message.demo_version_name = reader.string();
          break;
        case /* optional string demo_version_guid */ 12:
          message.demo_version_guid = reader.string();
          break;
        case /* optional int32 build_num */ 13:
          message.build_num = reader.int32();
          break;
        case /* optional string game */ 14:
          message.game = reader.string();
          break;
        case /* optional int32 server_start_tick */ 15:
          message.server_start_tick = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: CDemoFileHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* string demo_file_stamp = 1; */
    if (message.demo_file_stamp !== "") writer.tag(1, WireType.LengthDelimited).string(message.demo_file_stamp);
    /* optional int32 network_protocol = 2; */
    if (message.network_protocol !== undefined) writer.tag(2, WireType.Varint).int32(message.network_protocol);
    /* optional string server_name = 3; */
    if (message.server_name !== undefined) writer.tag(3, WireType.LengthDelimited).string(message.server_name);
    /* optional string client_name = 4; */
    if (message.client_name !== undefined) writer.tag(4, WireType.LengthDelimited).string(message.client_name);
    /* optional string map_name = 5; */
    if (message.map_name !== undefined) writer.tag(5, WireType.LengthDelimited).string(message.map_name);
    /* optional string game_directory = 6; */
    if (message.game_directory !== undefined) writer.tag(6, WireType.LengthDelimited).string(message.game_directory);
    /* optional int32 fullpackets_version = 7; */
    if (message.fullpackets_version !== undefined) writer.tag(7, WireType.Varint).int32(message.fullpackets_version);
    /* optional bool allow_clientside_entities = 8; */
    if (message.allow_clientside_entities !== undefined)
      writer.tag(8, WireType.Varint).bool(message.allow_clientside_entities);
    /* optional bool allow_clientside_particles = 9; */
    if (message.allow_clientside_particles !== undefined)
      writer.tag(9, WireType.Varint).bool(message.allow_clientside_particles);
    /* optional string addons = 10; */
    if (message.addons !== undefined) writer.tag(10, WireType.LengthDelimited).string(message.addons);
    /* optional string demo_version_name = 11; */
    if (message.demo_version_name !== undefined)
      writer.tag(11, WireType.LengthDelimited).string(message.demo_version_name);
    /* optional string demo_version_guid = 12; */
    if (message.demo_version_guid !== undefined)
      writer.tag(12, WireType.LengthDelimited).string(message.demo_version_guid);
    /* optional int32 build_num = 13; */
    if (message.build_num !== undefined) writer.tag(13, WireType.Varint).int32(message.build_num);
    /* optional string game = 14; */
    if (message.game !== undefined) writer.tag(14, WireType.LengthDelimited).string(message.game);
    /* optional int32 server_start_tick = 15; */
    if (message.server_start_tick !== undefined) writer.tag(15, WireType.Varint).int32(message.server_start_tick);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CDemoFileHeader
 */
export const CDemoFileHeader = new CDemoFileHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CGameInfo$Type extends MessageType<CGameInfo> {
  constructor() {
    super("CGameInfo", [
      {
        no: 4,
        name: "dota",
        kind: "message",
        T: () => CGameInfo_CDotaGameInfo,
      },
      { no: 5, name: "cs", kind: "message", T: () => CGameInfo_CCSGameInfo },
    ]);
  }
  create(value?: PartialMessage<CGameInfo>): CGameInfo {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CGameInfo>(this, message, value);
    return message;
  }
  internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CGameInfo): CGameInfo {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CGameInfo.CDotaGameInfo dota */ 4:
          message.dota = CGameInfo_CDotaGameInfo.internalBinaryRead(reader, reader.uint32(), options, message.dota);
          break;
        case /* optional CGameInfo.CCSGameInfo cs */ 5:
          message.cs = CGameInfo_CCSGameInfo.internalBinaryRead(reader, reader.uint32(), options, message.cs);
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: CGameInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* optional CGameInfo.CDotaGameInfo dota = 4; */
    if (message.dota)
      CGameInfo_CDotaGameInfo.internalBinaryWrite(
        message.dota,
        writer.tag(4, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional CGameInfo.CCSGameInfo cs = 5; */
    if (message.cs)
      CGameInfo_CCSGameInfo.internalBinaryWrite(
        message.cs,
        writer.tag(5, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CGameInfo
 */
export const CGameInfo = new CGameInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CGameInfo_CDotaGameInfo$Type extends MessageType<CGameInfo_CDotaGameInfo> {
  constructor() {
    super("CGameInfo.CDotaGameInfo", [
      {
        no: 1,
        name: "match_id",
        kind: "scalar",
        localName: "match_id",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 2,
        name: "game_mode",
        kind: "scalar",
        localName: "game_mode",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 3,
        name: "game_winner",
        kind: "scalar",
        localName: "game_winner",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 4,
        name: "player_info",
        kind: "message",
        localName: "player_info",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CGameInfo_CDotaGameInfo_CPlayerInfo,
      },
      {
        no: 5,
        name: "leagueid",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "picks_bans",
        kind: "message",
        localName: "picks_bans",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CGameInfo_CDotaGameInfo_CHeroSelectEvent,
      },
      {
        no: 7,
        name: "radiant_team_id",
        kind: "scalar",
        localName: "radiant_team_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 8,
        name: "dire_team_id",
        kind: "scalar",
        localName: "dire_team_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 9,
        name: "radiant_team_tag",
        kind: "scalar",
        localName: "radiant_team_tag",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 10,
        name: "dire_team_tag",
        kind: "scalar",
        localName: "dire_team_tag",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 11,
        name: "end_time",
        kind: "scalar",
        localName: "end_time",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CGameInfo_CDotaGameInfo>): CGameInfo_CDotaGameInfo {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.player_info = [];
    message.picks_bans = [];
    if (value !== undefined) reflectionMergePartial<CGameInfo_CDotaGameInfo>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CGameInfo_CDotaGameInfo,
  ): CGameInfo_CDotaGameInfo {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 match_id */ 1:
          message.match_id = reader.uint64().toBigInt();
          break;
        case /* optional int32 game_mode */ 2:
          message.game_mode = reader.int32();
          break;
        case /* optional int32 game_winner */ 3:
          message.game_winner = reader.int32();
          break;
        case /* repeated CGameInfo.CDotaGameInfo.CPlayerInfo player_info */ 4:
          message.player_info.push(
            CGameInfo_CDotaGameInfo_CPlayerInfo.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* optional uint32 leagueid */ 5:
          message.leagueid = reader.uint32();
          break;
        case /* repeated CGameInfo.CDotaGameInfo.CHeroSelectEvent picks_bans */ 6:
          message.picks_bans.push(
            CGameInfo_CDotaGameInfo_CHeroSelectEvent.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* optional uint32 radiant_team_id */ 7:
          message.radiant_team_id = reader.uint32();
          break;
        case /* optional uint32 dire_team_id */ 8:
          message.dire_team_id = reader.uint32();
          break;
        case /* optional string radiant_team_tag */ 9:
          message.radiant_team_tag = reader.string();
          break;
        case /* optional string dire_team_tag */ 10:
          message.dire_team_tag = reader.string();
          break;
        case /* optional uint32 end_time */ 11:
          message.end_time = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CGameInfo_CDotaGameInfo,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint64 match_id = 1; */
    if (message.match_id !== undefined) writer.tag(1, WireType.Varint).uint64(message.match_id);
    /* optional int32 game_mode = 2; */
    if (message.game_mode !== undefined) writer.tag(2, WireType.Varint).int32(message.game_mode);
    /* optional int32 game_winner = 3; */
    if (message.game_winner !== undefined) writer.tag(3, WireType.Varint).int32(message.game_winner);
    /* repeated CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4; */
    for (let i = 0; i < message.player_info.length; i++)
      CGameInfo_CDotaGameInfo_CPlayerInfo.internalBinaryWrite(
        message.player_info[i],
        writer.tag(4, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional uint32 leagueid = 5; */
    if (message.leagueid !== undefined) writer.tag(5, WireType.Varint).uint32(message.leagueid);
    /* repeated CGameInfo.CDotaGameInfo.CHeroSelectEvent picks_bans = 6; */
    for (let i = 0; i < message.picks_bans.length; i++)
      CGameInfo_CDotaGameInfo_CHeroSelectEvent.internalBinaryWrite(
        message.picks_bans[i],
        writer.tag(6, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional uint32 radiant_team_id = 7; */
    if (message.radiant_team_id !== undefined) writer.tag(7, WireType.Varint).uint32(message.radiant_team_id);
    /* optional uint32 dire_team_id = 8; */
    if (message.dire_team_id !== undefined) writer.tag(8, WireType.Varint).uint32(message.dire_team_id);
    /* optional string radiant_team_tag = 9; */
    if (message.radiant_team_tag !== undefined)
      writer.tag(9, WireType.LengthDelimited).string(message.radiant_team_tag);
    /* optional string dire_team_tag = 10; */
    if (message.dire_team_tag !== undefined) writer.tag(10, WireType.LengthDelimited).string(message.dire_team_tag);
    /* optional uint32 end_time = 11; */
    if (message.end_time !== undefined) writer.tag(11, WireType.Varint).uint32(message.end_time);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CGameInfo.CDotaGameInfo
 */
export const CGameInfo_CDotaGameInfo = new CGameInfo_CDotaGameInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CGameInfo_CDotaGameInfo_CPlayerInfo$Type extends MessageType<CGameInfo_CDotaGameInfo_CPlayerInfo> {
  constructor() {
    super("CGameInfo.CDotaGameInfo.CPlayerInfo", [
      {
        no: 1,
        name: "hero_name",
        kind: "scalar",
        localName: "hero_name",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 2,
        name: "player_name",
        kind: "scalar",
        localName: "player_name",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 3,
        name: "is_fake_client",
        kind: "scalar",
        localName: "is_fake_client",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 4,
        name: "steamid",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 5,
        name: "game_team",
        kind: "scalar",
        localName: "game_team",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CGameInfo_CDotaGameInfo_CPlayerInfo>): CGameInfo_CDotaGameInfo_CPlayerInfo {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CGameInfo_CDotaGameInfo_CPlayerInfo>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CGameInfo_CDotaGameInfo_CPlayerInfo,
  ): CGameInfo_CDotaGameInfo_CPlayerInfo {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string hero_name */ 1:
          message.hero_name = reader.string();
          break;
        case /* optional string player_name */ 2:
          message.player_name = reader.string();
          break;
        case /* optional bool is_fake_client */ 3:
          message.is_fake_client = reader.bool();
          break;
        case /* optional uint64 steamid */ 4:
          message.steamid = reader.uint64().toBigInt();
          break;
        case /* optional int32 game_team */ 5:
          message.game_team = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CGameInfo_CDotaGameInfo_CPlayerInfo,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional string hero_name = 1; */
    if (message.hero_name !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.hero_name);
    /* optional string player_name = 2; */
    if (message.player_name !== undefined) writer.tag(2, WireType.LengthDelimited).string(message.player_name);
    /* optional bool is_fake_client = 3; */
    if (message.is_fake_client !== undefined) writer.tag(3, WireType.Varint).bool(message.is_fake_client);
    /* optional uint64 steamid = 4; */
    if (message.steamid !== undefined) writer.tag(4, WireType.Varint).uint64(message.steamid);
    /* optional int32 game_team = 5; */
    if (message.game_team !== undefined) writer.tag(5, WireType.Varint).int32(message.game_team);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CGameInfo.CDotaGameInfo.CPlayerInfo
 */
export const CGameInfo_CDotaGameInfo_CPlayerInfo = new CGameInfo_CDotaGameInfo_CPlayerInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CGameInfo_CDotaGameInfo_CHeroSelectEvent$Type extends MessageType<CGameInfo_CDotaGameInfo_CHeroSelectEvent> {
  constructor() {
    super("CGameInfo.CDotaGameInfo.CHeroSelectEvent", [
      {
        no: 1,
        name: "is_pick",
        kind: "scalar",
        localName: "is_pick",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 2,
        name: "team",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "hero_id",
        kind: "scalar",
        localName: "hero_id",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CGameInfo_CDotaGameInfo_CHeroSelectEvent>): CGameInfo_CDotaGameInfo_CHeroSelectEvent {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CGameInfo_CDotaGameInfo_CHeroSelectEvent>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CGameInfo_CDotaGameInfo_CHeroSelectEvent,
  ): CGameInfo_CDotaGameInfo_CHeroSelectEvent {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional bool is_pick */ 1:
          message.is_pick = reader.bool();
          break;
        case /* optional uint32 team */ 2:
          message.team = reader.uint32();
          break;
        case /* optional int32 hero_id */ 3:
          message.hero_id = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CGameInfo_CDotaGameInfo_CHeroSelectEvent,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional bool is_pick = 1; */
    if (message.is_pick !== undefined) writer.tag(1, WireType.Varint).bool(message.is_pick);
    /* optional uint32 team = 2; */
    if (message.team !== undefined) writer.tag(2, WireType.Varint).uint32(message.team);
    /* optional int32 hero_id = 3; */
    if (message.hero_id !== undefined) writer.tag(3, WireType.Varint).int32(message.hero_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CGameInfo.CDotaGameInfo.CHeroSelectEvent
 */
export const CGameInfo_CDotaGameInfo_CHeroSelectEvent = new CGameInfo_CDotaGameInfo_CHeroSelectEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CGameInfo_CCSGameInfo$Type extends MessageType<CGameInfo_CCSGameInfo> {
  constructor() {
    super("CGameInfo.CCSGameInfo", [
      {
        no: 1,
        name: "round_start_ticks",
        kind: "scalar",
        localName: "round_start_ticks",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 5 /*ScalarType.INT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CGameInfo_CCSGameInfo>): CGameInfo_CCSGameInfo {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.round_start_ticks = [];
    if (value !== undefined) reflectionMergePartial<CGameInfo_CCSGameInfo>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CGameInfo_CCSGameInfo,
  ): CGameInfo_CCSGameInfo {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated int32 round_start_ticks */ 1:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.round_start_ticks.push(reader.int32());
          else message.round_start_ticks.push(reader.int32());
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CGameInfo_CCSGameInfo,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated int32 round_start_ticks = 1; */
    for (let i = 0; i < message.round_start_ticks.length; i++)
      writer.tag(1, WireType.Varint).int32(message.round_start_ticks[i]);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CGameInfo.CCSGameInfo
 */
export const CGameInfo_CCSGameInfo = new CGameInfo_CCSGameInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoFileInfo$Type extends MessageType<CDemoFileInfo> {
  constructor() {
    super("CDemoFileInfo", [
      {
        no: 1,
        name: "playback_time",
        kind: "scalar",
        localName: "playback_time",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 2,
        name: "playback_ticks",
        kind: "scalar",
        localName: "playback_ticks",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 3,
        name: "playback_frames",
        kind: "scalar",
        localName: "playback_frames",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 4,
        name: "game_info",
        kind: "message",
        localName: "game_info",
        T: () => CGameInfo,
      },
    ]);
  }
  create(value?: PartialMessage<CDemoFileInfo>): CDemoFileInfo {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CDemoFileInfo>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CDemoFileInfo,
  ): CDemoFileInfo {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional float playback_time */ 1:
          message.playback_time = reader.float();
          break;
        case /* optional int32 playback_ticks */ 2:
          message.playback_ticks = reader.int32();
          break;
        case /* optional int32 playback_frames */ 3:
          message.playback_frames = reader.int32();
          break;
        case /* optional CGameInfo game_info */ 4:
          message.game_info = CGameInfo.internalBinaryRead(reader, reader.uint32(), options, message.game_info);
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: CDemoFileInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* optional float playback_time = 1; */
    if (message.playback_time !== undefined) writer.tag(1, WireType.Bit32).float(message.playback_time);
    /* optional int32 playback_ticks = 2; */
    if (message.playback_ticks !== undefined) writer.tag(2, WireType.Varint).int32(message.playback_ticks);
    /* optional int32 playback_frames = 3; */
    if (message.playback_frames !== undefined) writer.tag(3, WireType.Varint).int32(message.playback_frames);
    /* optional CGameInfo game_info = 4; */
    if (message.game_info)
      CGameInfo.internalBinaryWrite(message.game_info, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CDemoFileInfo
 */
export const CDemoFileInfo = new CDemoFileInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoPacket$Type extends MessageType<CDemoPacket> {
  constructor() {
    super("CDemoPacket", [
      {
        no: 3,
        name: "data",
        kind: "scalar",
        opt: true,
        T: 12 /*ScalarType.BYTES*/,
      },
    ]);
  }
  create(value?: PartialMessage<CDemoPacket>): CDemoPacket {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CDemoPacket>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CDemoPacket,
  ): CDemoPacket {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional bytes data */ 3:
          message.data = reader.bytes();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: CDemoPacket, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* optional bytes data = 3; */
    if (message.data !== undefined) writer.tag(3, WireType.LengthDelimited).bytes(message.data);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CDemoPacket
 */
export const CDemoPacket = new CDemoPacket$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoFullPacket$Type extends MessageType<CDemoFullPacket> {
  constructor() {
    super("CDemoFullPacket", [
      {
        no: 1,
        name: "string_table",
        kind: "message",
        localName: "string_table",
        T: () => CDemoStringTables,
      },
      { no: 2, name: "packet", kind: "message", T: () => CDemoPacket },
    ]);
  }
  create(value?: PartialMessage<CDemoFullPacket>): CDemoFullPacket {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CDemoFullPacket>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CDemoFullPacket,
  ): CDemoFullPacket {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CDemoStringTables string_table */ 1:
          message.string_table = CDemoStringTables.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.string_table,
          );
          break;
        case /* optional CDemoPacket packet */ 2:
          message.packet = CDemoPacket.internalBinaryRead(reader, reader.uint32(), options, message.packet);
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: CDemoFullPacket, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* optional CDemoStringTables string_table = 1; */
    if (message.string_table)
      CDemoStringTables.internalBinaryWrite(
        message.string_table,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional CDemoPacket packet = 2; */
    if (message.packet)
      CDemoPacket.internalBinaryWrite(message.packet, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CDemoFullPacket
 */
export const CDemoFullPacket = new CDemoFullPacket$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoSaveGame$Type extends MessageType<CDemoSaveGame> {
  constructor() {
    super("CDemoSaveGame", [
      {
        no: 1,
        name: "data",
        kind: "scalar",
        opt: true,
        T: 12 /*ScalarType.BYTES*/,
      },
      {
        no: 2,
        name: "steam_id",
        kind: "scalar",
        localName: "steam_id",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 3,
        name: "signature",
        kind: "scalar",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 4,
        name: "version",
        kind: "scalar",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CDemoSaveGame>): CDemoSaveGame {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CDemoSaveGame>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CDemoSaveGame,
  ): CDemoSaveGame {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional bytes data */ 1:
          message.data = reader.bytes();
          break;
        case /* optional fixed64 steam_id */ 2:
          message.steam_id = reader.fixed64().toBigInt();
          break;
        case /* optional fixed64 signature */ 3:
          message.signature = reader.fixed64().toBigInt();
          break;
        case /* optional int32 version */ 4:
          message.version = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: CDemoSaveGame, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* optional bytes data = 1; */
    if (message.data !== undefined) writer.tag(1, WireType.LengthDelimited).bytes(message.data);
    /* optional fixed64 steam_id = 2; */
    if (message.steam_id !== undefined) writer.tag(2, WireType.Bit64).fixed64(message.steam_id);
    /* optional fixed64 signature = 3; */
    if (message.signature !== undefined) writer.tag(3, WireType.Bit64).fixed64(message.signature);
    /* optional int32 version = 4; */
    if (message.version !== undefined) writer.tag(4, WireType.Varint).int32(message.version);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CDemoSaveGame
 */
export const CDemoSaveGame = new CDemoSaveGame$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoSyncTick$Type extends MessageType<CDemoSyncTick> {
  constructor() {
    super("CDemoSyncTick", []);
  }
  create(value?: PartialMessage<CDemoSyncTick>): CDemoSyncTick {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CDemoSyncTick>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CDemoSyncTick,
  ): CDemoSyncTick {
    return target ?? this.create();
  }
  internalBinaryWrite(message: CDemoSyncTick, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CDemoSyncTick
 */
export const CDemoSyncTick = new CDemoSyncTick$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoConsoleCmd$Type extends MessageType<CDemoConsoleCmd> {
  constructor() {
    super("CDemoConsoleCmd", [
      {
        no: 1,
        name: "cmdstring",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<CDemoConsoleCmd>): CDemoConsoleCmd {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CDemoConsoleCmd>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CDemoConsoleCmd,
  ): CDemoConsoleCmd {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string cmdstring */ 1:
          message.cmdstring = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: CDemoConsoleCmd, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* optional string cmdstring = 1; */
    if (message.cmdstring !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.cmdstring);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CDemoConsoleCmd
 */
export const CDemoConsoleCmd = new CDemoConsoleCmd$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoSendTables$Type extends MessageType<CDemoSendTables> {
  constructor() {
    super("CDemoSendTables", [
      {
        no: 1,
        name: "data",
        kind: "scalar",
        opt: true,
        T: 12 /*ScalarType.BYTES*/,
      },
    ]);
  }
  create(value?: PartialMessage<CDemoSendTables>): CDemoSendTables {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CDemoSendTables>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CDemoSendTables,
  ): CDemoSendTables {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional bytes data */ 1:
          message.data = reader.bytes();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: CDemoSendTables, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* optional bytes data = 1; */
    if (message.data !== undefined) writer.tag(1, WireType.LengthDelimited).bytes(message.data);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CDemoSendTables
 */
export const CDemoSendTables = new CDemoSendTables$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoClassInfo$Type extends MessageType<CDemoClassInfo> {
  constructor() {
    super("CDemoClassInfo", [
      {
        no: 1,
        name: "classes",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CDemoClassInfo_class_t,
      },
    ]);
  }
  create(value?: PartialMessage<CDemoClassInfo>): CDemoClassInfo {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.classes = [];
    if (value !== undefined) reflectionMergePartial<CDemoClassInfo>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CDemoClassInfo,
  ): CDemoClassInfo {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated CDemoClassInfo.class_t classes */ 1:
          message.classes.push(CDemoClassInfo_class_t.internalBinaryRead(reader, reader.uint32(), options));
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: CDemoClassInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* repeated CDemoClassInfo.class_t classes = 1; */
    for (let i = 0; i < message.classes.length; i++)
      CDemoClassInfo_class_t.internalBinaryWrite(
        message.classes[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CDemoClassInfo
 */
export const CDemoClassInfo = new CDemoClassInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoClassInfo_class_t$Type extends MessageType<CDemoClassInfo_class_t> {
  constructor() {
    super("CDemoClassInfo.class_t", [
      {
        no: 1,
        name: "class_id",
        kind: "scalar",
        localName: "class_id",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 2,
        name: "network_name",
        kind: "scalar",
        localName: "network_name",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 3,
        name: "table_name",
        kind: "scalar",
        localName: "table_name",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<CDemoClassInfo_class_t>): CDemoClassInfo_class_t {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CDemoClassInfo_class_t>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CDemoClassInfo_class_t,
  ): CDemoClassInfo_class_t {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional int32 class_id */ 1:
          message.class_id = reader.int32();
          break;
        case /* optional string network_name */ 2:
          message.network_name = reader.string();
          break;
        case /* optional string table_name */ 3:
          message.table_name = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CDemoClassInfo_class_t,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional int32 class_id = 1; */
    if (message.class_id !== undefined) writer.tag(1, WireType.Varint).int32(message.class_id);
    /* optional string network_name = 2; */
    if (message.network_name !== undefined) writer.tag(2, WireType.LengthDelimited).string(message.network_name);
    /* optional string table_name = 3; */
    if (message.table_name !== undefined) writer.tag(3, WireType.LengthDelimited).string(message.table_name);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CDemoClassInfo.class_t
 */
export const CDemoClassInfo_class_t = new CDemoClassInfo_class_t$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoCustomData$Type extends MessageType<CDemoCustomData> {
  constructor() {
    super("CDemoCustomData", [
      {
        no: 1,
        name: "callback_index",
        kind: "scalar",
        localName: "callback_index",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 2,
        name: "data",
        kind: "scalar",
        opt: true,
        T: 12 /*ScalarType.BYTES*/,
      },
    ]);
  }
  create(value?: PartialMessage<CDemoCustomData>): CDemoCustomData {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CDemoCustomData>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CDemoCustomData,
  ): CDemoCustomData {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional int32 callback_index */ 1:
          message.callback_index = reader.int32();
          break;
        case /* optional bytes data */ 2:
          message.data = reader.bytes();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: CDemoCustomData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* optional int32 callback_index = 1; */
    if (message.callback_index !== undefined) writer.tag(1, WireType.Varint).int32(message.callback_index);
    /* optional bytes data = 2; */
    if (message.data !== undefined) writer.tag(2, WireType.LengthDelimited).bytes(message.data);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CDemoCustomData
 */
export const CDemoCustomData = new CDemoCustomData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoCustomDataCallbacks$Type extends MessageType<CDemoCustomDataCallbacks> {
  constructor() {
    super("CDemoCustomDataCallbacks", [
      {
        no: 1,
        name: "save_id",
        kind: "scalar",
        localName: "save_id",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<CDemoCustomDataCallbacks>): CDemoCustomDataCallbacks {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.save_id = [];
    if (value !== undefined) reflectionMergePartial<CDemoCustomDataCallbacks>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CDemoCustomDataCallbacks,
  ): CDemoCustomDataCallbacks {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated string save_id */ 1:
          message.save_id.push(reader.string());
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CDemoCustomDataCallbacks,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated string save_id = 1; */
    for (let i = 0; i < message.save_id.length; i++) writer.tag(1, WireType.LengthDelimited).string(message.save_id[i]);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CDemoCustomDataCallbacks
 */
export const CDemoCustomDataCallbacks = new CDemoCustomDataCallbacks$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoAnimationHeader$Type extends MessageType<CDemoAnimationHeader> {
  constructor() {
    super("CDemoAnimationHeader", [
      {
        no: 1,
        name: "entity_id",
        kind: "scalar",
        localName: "entity_id",
        opt: true,
        T: 17 /*ScalarType.SINT32*/,
      },
      {
        no: 2,
        name: "tick",
        kind: "scalar",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 3,
        name: "data",
        kind: "scalar",
        opt: true,
        T: 12 /*ScalarType.BYTES*/,
      },
    ]);
  }
  create(value?: PartialMessage<CDemoAnimationHeader>): CDemoAnimationHeader {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CDemoAnimationHeader>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CDemoAnimationHeader,
  ): CDemoAnimationHeader {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional sint32 entity_id */ 1:
          message.entity_id = reader.sint32();
          break;
        case /* optional int32 tick */ 2:
          message.tick = reader.int32();
          break;
        case /* optional bytes data */ 3:
          message.data = reader.bytes();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CDemoAnimationHeader,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional sint32 entity_id = 1; */
    if (message.entity_id !== undefined) writer.tag(1, WireType.Varint).sint32(message.entity_id);
    /* optional int32 tick = 2; */
    if (message.tick !== undefined) writer.tag(2, WireType.Varint).int32(message.tick);
    /* optional bytes data = 3; */
    if (message.data !== undefined) writer.tag(3, WireType.LengthDelimited).bytes(message.data);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CDemoAnimationHeader
 */
export const CDemoAnimationHeader = new CDemoAnimationHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoAnimationData$Type extends MessageType<CDemoAnimationData> {
  constructor() {
    super("CDemoAnimationData", [
      {
        no: 1,
        name: "entity_id",
        kind: "scalar",
        localName: "entity_id",
        opt: true,
        T: 17 /*ScalarType.SINT32*/,
      },
      {
        no: 2,
        name: "start_tick",
        kind: "scalar",
        localName: "start_tick",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 3,
        name: "end_tick",
        kind: "scalar",
        localName: "end_tick",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 4,
        name: "data",
        kind: "scalar",
        opt: true,
        T: 12 /*ScalarType.BYTES*/,
      },
      {
        no: 5,
        name: "data_checksum",
        kind: "scalar",
        localName: "data_checksum",
        opt: true,
        T: 3 /*ScalarType.INT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(value?: PartialMessage<CDemoAnimationData>): CDemoAnimationData {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CDemoAnimationData>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CDemoAnimationData,
  ): CDemoAnimationData {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional sint32 entity_id */ 1:
          message.entity_id = reader.sint32();
          break;
        case /* optional int32 start_tick */ 2:
          message.start_tick = reader.int32();
          break;
        case /* optional int32 end_tick */ 3:
          message.end_tick = reader.int32();
          break;
        case /* optional bytes data */ 4:
          message.data = reader.bytes();
          break;
        case /* optional int64 data_checksum */ 5:
          message.data_checksum = reader.int64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: CDemoAnimationData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* optional sint32 entity_id = 1; */
    if (message.entity_id !== undefined) writer.tag(1, WireType.Varint).sint32(message.entity_id);
    /* optional int32 start_tick = 2; */
    if (message.start_tick !== undefined) writer.tag(2, WireType.Varint).int32(message.start_tick);
    /* optional int32 end_tick = 3; */
    if (message.end_tick !== undefined) writer.tag(3, WireType.Varint).int32(message.end_tick);
    /* optional bytes data = 4; */
    if (message.data !== undefined) writer.tag(4, WireType.LengthDelimited).bytes(message.data);
    /* optional int64 data_checksum = 5; */
    if (message.data_checksum !== undefined) writer.tag(5, WireType.Varint).int64(message.data_checksum);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CDemoAnimationData
 */
export const CDemoAnimationData = new CDemoAnimationData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoStringTables$Type extends MessageType<CDemoStringTables> {
  constructor() {
    super("CDemoStringTables", [
      {
        no: 1,
        name: "tables",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CDemoStringTables_table_t,
      },
    ]);
  }
  create(value?: PartialMessage<CDemoStringTables>): CDemoStringTables {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.tables = [];
    if (value !== undefined) reflectionMergePartial<CDemoStringTables>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CDemoStringTables,
  ): CDemoStringTables {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated CDemoStringTables.table_t tables */ 1:
          message.tables.push(CDemoStringTables_table_t.internalBinaryRead(reader, reader.uint32(), options));
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: CDemoStringTables, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* repeated CDemoStringTables.table_t tables = 1; */
    for (let i = 0; i < message.tables.length; i++)
      CDemoStringTables_table_t.internalBinaryWrite(
        message.tables[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CDemoStringTables
 */
export const CDemoStringTables = new CDemoStringTables$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoStringTables_items_t$Type extends MessageType<CDemoStringTables_items_t> {
  constructor() {
    super("CDemoStringTables.items_t", [
      {
        no: 1,
        name: "str",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 2,
        name: "data",
        kind: "scalar",
        opt: true,
        T: 12 /*ScalarType.BYTES*/,
      },
    ]);
  }
  create(value?: PartialMessage<CDemoStringTables_items_t>): CDemoStringTables_items_t {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CDemoStringTables_items_t>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CDemoStringTables_items_t,
  ): CDemoStringTables_items_t {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string str */ 1:
          message.str = reader.string();
          break;
        case /* optional bytes data */ 2:
          message.data = reader.bytes();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CDemoStringTables_items_t,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional string str = 1; */
    if (message.str !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.str);
    /* optional bytes data = 2; */
    if (message.data !== undefined) writer.tag(2, WireType.LengthDelimited).bytes(message.data);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CDemoStringTables.items_t
 */
export const CDemoStringTables_items_t = new CDemoStringTables_items_t$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoStringTables_table_t$Type extends MessageType<CDemoStringTables_table_t> {
  constructor() {
    super("CDemoStringTables.table_t", [
      {
        no: 1,
        name: "table_name",
        kind: "scalar",
        localName: "table_name",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 2,
        name: "items",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CDemoStringTables_items_t,
      },
      {
        no: 3,
        name: "items_clientside",
        kind: "message",
        localName: "items_clientside",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CDemoStringTables_items_t,
      },
      {
        no: 4,
        name: "table_flags",
        kind: "scalar",
        localName: "table_flags",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CDemoStringTables_table_t>): CDemoStringTables_table_t {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.items = [];
    message.items_clientside = [];
    if (value !== undefined) reflectionMergePartial<CDemoStringTables_table_t>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CDemoStringTables_table_t,
  ): CDemoStringTables_table_t {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string table_name */ 1:
          message.table_name = reader.string();
          break;
        case /* repeated CDemoStringTables.items_t items */ 2:
          message.items.push(CDemoStringTables_items_t.internalBinaryRead(reader, reader.uint32(), options));
          break;
        case /* repeated CDemoStringTables.items_t items_clientside */ 3:
          message.items_clientside.push(CDemoStringTables_items_t.internalBinaryRead(reader, reader.uint32(), options));
          break;
        case /* optional int32 table_flags */ 4:
          message.table_flags = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CDemoStringTables_table_t,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional string table_name = 1; */
    if (message.table_name !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.table_name);
    /* repeated CDemoStringTables.items_t items = 2; */
    for (let i = 0; i < message.items.length; i++)
      CDemoStringTables_items_t.internalBinaryWrite(
        message.items[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated CDemoStringTables.items_t items_clientside = 3; */
    for (let i = 0; i < message.items_clientside.length; i++)
      CDemoStringTables_items_t.internalBinaryWrite(
        message.items_clientside[i],
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional int32 table_flags = 4; */
    if (message.table_flags !== undefined) writer.tag(4, WireType.Varint).int32(message.table_flags);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CDemoStringTables.table_t
 */
export const CDemoStringTables_table_t = new CDemoStringTables_table_t$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoStop$Type extends MessageType<CDemoStop> {
  constructor() {
    super("CDemoStop", []);
  }
  create(value?: PartialMessage<CDemoStop>): CDemoStop {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CDemoStop>(this, message, value);
    return message;
  }
  internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CDemoStop): CDemoStop {
    return target ?? this.create();
  }
  internalBinaryWrite(message: CDemoStop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CDemoStop
 */
export const CDemoStop = new CDemoStop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoUserCmd$Type extends MessageType<CDemoUserCmd> {
  constructor() {
    super("CDemoUserCmd", [
      {
        no: 1,
        name: "cmd_number",
        kind: "scalar",
        localName: "cmd_number",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 2,
        name: "data",
        kind: "scalar",
        opt: true,
        T: 12 /*ScalarType.BYTES*/,
      },
    ]);
  }
  create(value?: PartialMessage<CDemoUserCmd>): CDemoUserCmd {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CDemoUserCmd>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CDemoUserCmd,
  ): CDemoUserCmd {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional int32 cmd_number */ 1:
          message.cmd_number = reader.int32();
          break;
        case /* optional bytes data */ 2:
          message.data = reader.bytes();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: CDemoUserCmd, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* optional int32 cmd_number = 1; */
    if (message.cmd_number !== undefined) writer.tag(1, WireType.Varint).int32(message.cmd_number);
    /* optional bytes data = 2; */
    if (message.data !== undefined) writer.tag(2, WireType.LengthDelimited).bytes(message.data);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CDemoUserCmd
 */
export const CDemoUserCmd = new CDemoUserCmd$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CDemoSpawnGroups$Type extends MessageType<CDemoSpawnGroups> {
  constructor() {
    super("CDemoSpawnGroups", [
      {
        no: 3,
        name: "msgs",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 12 /*ScalarType.BYTES*/,
      },
    ]);
  }
  create(value?: PartialMessage<CDemoSpawnGroups>): CDemoSpawnGroups {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.msgs = [];
    if (value !== undefined) reflectionMergePartial<CDemoSpawnGroups>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CDemoSpawnGroups,
  ): CDemoSpawnGroups {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated bytes msgs */ 3:
          message.msgs.push(reader.bytes());
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: CDemoSpawnGroups, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* repeated bytes msgs = 3; */
    for (let i = 0; i < message.msgs.length; i++) writer.tag(3, WireType.LengthDelimited).bytes(message.msgs[i]);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CDemoSpawnGroups
 */
export const CDemoSpawnGroups = new CDemoSpawnGroups$Type();

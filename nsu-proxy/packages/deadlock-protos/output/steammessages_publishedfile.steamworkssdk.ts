// @generated by protobuf-ts 2.9.4 with parameter use_proto_field_name
// @generated from protobuf file "steammessages_publishedfile.steamworkssdk.proto" (syntax proto2)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message CPublishedFile_Subscribe_Request
 */
export interface CPublishedFile_Subscribe_Request {
  /**
   * @generated from protobuf field: optional uint64 publishedfileid = 1;
   */
  publishedfileid?: bigint;
  /**
   * @generated from protobuf field: optional uint32 list_type = 2;
   */
  list_type?: number;
  /**
   * @generated from protobuf field: optional int32 appid = 3;
   */
  appid?: number;
  /**
   * @generated from protobuf field: optional bool notify_client = 4;
   */
  notify_client?: boolean;
}
/**
 * @generated from protobuf message CPublishedFile_Subscribe_Response
 */
export interface CPublishedFile_Subscribe_Response {}
/**
 * @generated from protobuf message CPublishedFile_Unsubscribe_Request
 */
export interface CPublishedFile_Unsubscribe_Request {
  /**
   * @generated from protobuf field: optional uint64 publishedfileid = 1;
   */
  publishedfileid?: bigint;
  /**
   * @generated from protobuf field: optional uint32 list_type = 2;
   */
  list_type?: number;
  /**
   * @generated from protobuf field: optional int32 appid = 3;
   */
  appid?: number;
  /**
   * @generated from protobuf field: optional bool notify_client = 4;
   */
  notify_client?: boolean;
}
/**
 * @generated from protobuf message CPublishedFile_Unsubscribe_Response
 */
export interface CPublishedFile_Unsubscribe_Response {}
/**
 * @generated from protobuf message CPublishedFile_Publish_Request
 */
export interface CPublishedFile_Publish_Request {
  /**
   * @generated from protobuf field: optional uint32 appid = 1;
   */
  appid?: number;
  /**
   * @generated from protobuf field: optional uint32 consumer_appid = 2;
   */
  consumer_appid?: number;
  /**
   * @generated from protobuf field: optional string cloudfilename = 3;
   */
  cloudfilename?: string;
  /**
   * @generated from protobuf field: optional string preview_cloudfilename = 4;
   */
  preview_cloudfilename?: string;
  /**
   * @generated from protobuf field: optional string title = 5;
   */
  title?: string;
  /**
   * @generated from protobuf field: optional string file_description = 6;
   */
  file_description?: string;
  /**
   * @generated from protobuf field: optional uint32 file_type = 7;
   */
  file_type?: number;
  /**
   * @generated from protobuf field: optional string consumer_shortcut_name = 8;
   */
  consumer_shortcut_name?: string;
  /**
   * @generated from protobuf field: optional string youtube_username = 9;
   */
  youtube_username?: string;
  /**
   * @generated from protobuf field: optional string youtube_videoid = 10;
   */
  youtube_videoid?: string;
  /**
   * @generated from protobuf field: optional uint32 visibility = 11;
   */
  visibility?: number;
  /**
   * @generated from protobuf field: optional string redirect_uri = 12;
   */
  redirect_uri?: string;
  /**
   * @generated from protobuf field: repeated string tags = 13;
   */
  tags: string[];
  /**
   * @generated from protobuf field: optional string collection_type = 14;
   */
  collection_type?: string;
  /**
   * @generated from protobuf field: optional string game_type = 15;
   */
  game_type?: string;
  /**
   * @generated from protobuf field: optional string url = 16;
   */
  url?: string;
}
/**
 * @generated from protobuf message CPublishedFile_Publish_Response
 */
export interface CPublishedFile_Publish_Response {
  /**
   * @generated from protobuf field: optional uint64 publishedfileid = 1;
   */
  publishedfileid?: bigint;
  /**
   * @generated from protobuf field: optional string redirect_uri = 2;
   */
  redirect_uri?: string;
}
/**
 * @generated from protobuf message CPublishedFile_GetDetails_Request
 */
export interface CPublishedFile_GetDetails_Request {
  /**
   * @generated from protobuf field: repeated fixed64 publishedfileids = 1;
   */
  publishedfileids: bigint[];
  /**
   * @generated from protobuf field: optional bool includetags = 2;
   */
  includetags?: boolean;
  /**
   * @generated from protobuf field: optional bool includeadditionalpreviews = 3;
   */
  includeadditionalpreviews?: boolean;
  /**
   * @generated from protobuf field: optional bool includechildren = 4;
   */
  includechildren?: boolean;
  /**
   * @generated from protobuf field: optional bool includekvtags = 5;
   */
  includekvtags?: boolean;
  /**
   * @generated from protobuf field: optional bool includevotes = 6;
   */
  includevotes?: boolean;
  /**
   * @generated from protobuf field: optional bool short_description = 8;
   */
  short_description?: boolean;
}
/**
 * @generated from protobuf message PublishedFileDetails
 */
export interface PublishedFileDetails {
  /**
   * @generated from protobuf field: optional uint32 result = 1;
   */
  result?: number;
  /**
   * @generated from protobuf field: optional uint64 publishedfileid = 2;
   */
  publishedfileid?: bigint;
  /**
   * @generated from protobuf field: optional fixed64 creator = 3;
   */
  creator?: bigint;
  /**
   * @generated from protobuf field: optional uint32 creator_appid = 4;
   */
  creator_appid?: number;
  /**
   * @generated from protobuf field: optional uint32 consumer_appid = 5;
   */
  consumer_appid?: number;
  /**
   * @generated from protobuf field: optional uint32 consumer_shortcutid = 6;
   */
  consumer_shortcutid?: number;
  /**
   * @generated from protobuf field: optional string filename = 7;
   */
  filename?: string;
  /**
   * @generated from protobuf field: optional uint64 file_size = 8;
   */
  file_size?: bigint;
  /**
   * @generated from protobuf field: optional uint64 preview_file_size = 9;
   */
  preview_file_size?: bigint;
  /**
   * @generated from protobuf field: optional string file_url = 10;
   */
  file_url?: string;
  /**
   * @generated from protobuf field: optional string preview_url = 11;
   */
  preview_url?: string;
  /**
   * @generated from protobuf field: optional string youtubevideoid = 12;
   */
  youtubevideoid?: string;
  /**
   * @generated from protobuf field: optional string url = 13;
   */
  url?: string;
  /**
   * @generated from protobuf field: optional fixed64 hcontent_file = 14;
   */
  hcontent_file?: bigint;
  /**
   * @generated from protobuf field: optional fixed64 hcontent_preview = 15;
   */
  hcontent_preview?: bigint;
  /**
   * @generated from protobuf field: optional string title = 16;
   */
  title?: string;
  /**
   * @generated from protobuf field: optional string file_description = 17;
   */
  file_description?: string;
  /**
   * @generated from protobuf field: optional string short_description = 18;
   */
  short_description?: string;
  /**
   * @generated from protobuf field: optional uint32 time_created = 19;
   */
  time_created?: number;
  /**
   * @generated from protobuf field: optional uint32 time_updated = 20;
   */
  time_updated?: number;
  /**
   * @generated from protobuf field: optional uint32 visibility = 21;
   */
  visibility?: number;
  /**
   * @generated from protobuf field: optional uint32 flags = 22;
   */
  flags?: number;
  /**
   * @generated from protobuf field: optional bool workshop_file = 23;
   */
  workshop_file?: boolean;
  /**
   * @generated from protobuf field: optional bool workshop_accepted = 24;
   */
  workshop_accepted?: boolean;
  /**
   * @generated from protobuf field: optional bool show_subscribe_all = 25;
   */
  show_subscribe_all?: boolean;
  /**
   * @generated from protobuf field: optional int32 num_comments_developer = 26;
   */
  num_comments_developer?: number;
  /**
   * @generated from protobuf field: optional int32 num_comments_public = 27;
   */
  num_comments_public?: number;
  /**
   * @generated from protobuf field: optional bool banned = 28;
   */
  banned?: boolean;
  /**
   * @generated from protobuf field: optional string ban_reason = 29;
   */
  ban_reason?: string;
  /**
   * @generated from protobuf field: optional fixed64 banner = 30;
   */
  banner?: bigint;
  /**
   * @generated from protobuf field: optional bool can_be_deleted = 31;
   */
  can_be_deleted?: boolean;
  /**
   * @generated from protobuf field: optional bool incompatible = 32;
   */
  incompatible?: boolean;
  /**
   * @generated from protobuf field: optional string app_name = 33;
   */
  app_name?: string;
  /**
   * @generated from protobuf field: optional uint32 file_type = 34;
   */
  file_type?: number;
  /**
   * @generated from protobuf field: optional bool can_subscribe = 35;
   */
  can_subscribe?: boolean;
  /**
   * @generated from protobuf field: optional uint32 subscriptions = 36;
   */
  subscriptions?: number;
  /**
   * @generated from protobuf field: optional uint32 favorited = 37;
   */
  favorited?: number;
  /**
   * @generated from protobuf field: optional uint32 followers = 38;
   */
  followers?: number;
  /**
   * @generated from protobuf field: optional uint32 lifetime_subscriptions = 39;
   */
  lifetime_subscriptions?: number;
  /**
   * @generated from protobuf field: optional uint32 lifetime_favorited = 40;
   */
  lifetime_favorited?: number;
  /**
   * @generated from protobuf field: optional uint32 lifetime_followers = 41;
   */
  lifetime_followers?: number;
  /**
   * @generated from protobuf field: optional uint32 views = 42;
   */
  views?: number;
  /**
   * @generated from protobuf field: optional uint32 image_width = 43;
   */
  image_width?: number;
  /**
   * @generated from protobuf field: optional uint32 image_height = 44;
   */
  image_height?: number;
  /**
   * @generated from protobuf field: optional string image_url = 45;
   */
  image_url?: string;
  /**
   * @generated from protobuf field: optional bool spoiler_tag = 46;
   */
  spoiler_tag?: boolean;
  /**
   * @generated from protobuf field: optional uint32 shortcutid = 47;
   */
  shortcutid?: number;
  /**
   * @generated from protobuf field: optional string shortcutname = 48;
   */
  shortcutname?: string;
  /**
   * @generated from protobuf field: optional uint32 num_children = 49;
   */
  num_children?: number;
  /**
   * @generated from protobuf field: optional uint32 num_reports = 50;
   */
  num_reports?: number;
  /**
   * @generated from protobuf field: repeated PublishedFileDetails.Preview previews = 51;
   */
  previews: PublishedFileDetails_Preview[];
  /**
   * @generated from protobuf field: repeated PublishedFileDetails.Tag tags = 52;
   */
  tags: PublishedFileDetails_Tag[];
  /**
   * @generated from protobuf field: repeated PublishedFileDetails.Child children = 53;
   */
  children: PublishedFileDetails_Child[];
  /**
   * @generated from protobuf field: repeated PublishedFileDetails.KVTag kvtags = 54;
   */
  kvtags: PublishedFileDetails_KVTag[];
  /**
   * @generated from protobuf field: optional PublishedFileDetails.VoteData vote_data = 55;
   */
  vote_data?: PublishedFileDetails_VoteData;
  /**
   * @generated from protobuf field: optional uint32 time_subscribed = 56;
   */
  time_subscribed?: number;
}
/**
 * @generated from protobuf message PublishedFileDetails.Tag
 */
export interface PublishedFileDetails_Tag {
  /**
   * @generated from protobuf field: optional string tag = 1;
   */
  tag?: string;
  /**
   * @generated from protobuf field: optional bool adminonly = 2;
   */
  adminonly?: boolean;
}
/**
 * @generated from protobuf message PublishedFileDetails.Preview
 */
export interface PublishedFileDetails_Preview {
  /**
   * @generated from protobuf field: optional uint64 previewid = 1;
   */
  previewid?: bigint;
  /**
   * @generated from protobuf field: optional uint32 sortorder = 2;
   */
  sortorder?: number;
  /**
   * @generated from protobuf field: optional string url = 3;
   */
  url?: string;
  /**
   * @generated from protobuf field: optional uint32 size = 4;
   */
  size?: number;
  /**
   * @generated from protobuf field: optional string filename = 5;
   */
  filename?: string;
  /**
   * @generated from protobuf field: optional string youtubevideoid = 6;
   */
  youtubevideoid?: string;
}
/**
 * @generated from protobuf message PublishedFileDetails.Child
 */
export interface PublishedFileDetails_Child {
  /**
   * @generated from protobuf field: optional uint64 publishedfileid = 1;
   */
  publishedfileid?: bigint;
  /**
   * @generated from protobuf field: optional uint32 sortorder = 2;
   */
  sortorder?: number;
  /**
   * @generated from protobuf field: optional uint32 file_type = 3;
   */
  file_type?: number;
}
/**
 * @generated from protobuf message PublishedFileDetails.KVTag
 */
export interface PublishedFileDetails_KVTag {
  /**
   * @generated from protobuf field: optional string key = 1;
   */
  key?: string;
  /**
   * @generated from protobuf field: optional string value = 2;
   */
  value?: string;
}
/**
 * @generated from protobuf message PublishedFileDetails.VoteData
 */
export interface PublishedFileDetails_VoteData {
  /**
   * @generated from protobuf field: optional float score = 1;
   */
  score?: number;
  /**
   * @generated from protobuf field: optional uint32 votes_up = 2;
   */
  votes_up?: number;
  /**
   * @generated from protobuf field: optional uint32 votes_down = 3;
   */
  votes_down?: number;
}
/**
 * @generated from protobuf message CPublishedFile_GetDetails_Response
 */
export interface CPublishedFile_GetDetails_Response {
  /**
   * @generated from protobuf field: repeated PublishedFileDetails publishedfiledetails = 1;
   */
  publishedfiledetails: PublishedFileDetails[];
}
/**
 * @generated from protobuf message CPublishedFile_GetUserFiles_Request
 */
export interface CPublishedFile_GetUserFiles_Request {
  /**
   * @generated from protobuf field: optional uint32 appid = 1;
   */
  appid?: number;
  /**
   * @generated from protobuf field: optional uint32 page = 3;
   */
  page?: number;
  /**
   * @generated from protobuf field: optional uint32 numperpage = 4;
   */
  numperpage?: number;
  /**
   * @generated from protobuf field: optional string sortmethod = 6;
   */
  sortmethod?: string;
  /**
   * @generated from protobuf field: optional bool totalonly = 7;
   */
  totalonly?: boolean;
  /**
   * @generated from protobuf field: optional uint32 privacy = 9;
   */
  privacy?: number;
  /**
   * @generated from protobuf field: optional bool ids_only = 10;
   */
  ids_only?: boolean;
  /**
   * @generated from protobuf field: repeated string requiredtags = 11;
   */
  requiredtags: string[];
  /**
   * @generated from protobuf field: repeated string excludedtags = 12;
   */
  excludedtags: string[];
}
/**
 * @generated from protobuf message CPublishedFile_GetUserFiles_Response
 */
export interface CPublishedFile_GetUserFiles_Response {
  /**
   * @generated from protobuf field: optional uint32 total = 1;
   */
  total?: number;
  /**
   * @generated from protobuf field: optional uint32 startindex = 2;
   */
  startindex?: number;
  /**
   * @generated from protobuf field: repeated PublishedFileDetails publishedfiledetails = 3;
   */
  publishedfiledetails: PublishedFileDetails[];
  /**
   * @generated from protobuf field: repeated CPublishedFile_GetUserFiles_Response.App apps = 4;
   */
  apps: CPublishedFile_GetUserFiles_Response_App[];
}
/**
 * @generated from protobuf message CPublishedFile_GetUserFiles_Response.App
 */
export interface CPublishedFile_GetUserFiles_Response_App {
  /**
   * @generated from protobuf field: optional uint32 appid = 1;
   */
  appid?: number;
  /**
   * @generated from protobuf field: optional string name = 2;
   */
  name?: string;
  /**
   * @generated from protobuf field: optional uint32 shortcutid = 3;
   */
  shortcutid?: number;
  /**
   * @generated from protobuf field: optional bool private = 4;
   */
  private?: boolean;
}
/**
 * @generated from protobuf message CPublishedFile_Update_Request
 */
export interface CPublishedFile_Update_Request {
  /**
   * @generated from protobuf field: optional uint32 appid = 1;
   */
  appid?: number;
  /**
   * @generated from protobuf field: optional fixed64 publishedfileid = 2;
   */
  publishedfileid?: bigint;
  /**
   * @generated from protobuf field: optional string title = 3;
   */
  title?: string;
  /**
   * @generated from protobuf field: optional string file_description = 4;
   */
  file_description?: string;
  /**
   * @generated from protobuf field: optional uint32 visibility = 5;
   */
  visibility?: number;
  /**
   * @generated from protobuf field: repeated string tags = 6;
   */
  tags: string[];
  /**
   * @generated from protobuf field: optional string filename = 7;
   */
  filename?: string;
  /**
   * @generated from protobuf field: optional string preview_filename = 8;
   */
  preview_filename?: string;
}
/**
 * @generated from protobuf message CPublishedFile_Update_Response
 */
export interface CPublishedFile_Update_Response {}
/**
 * @generated from protobuf message CPublishedFile_RefreshVotingQueue_Request
 */
export interface CPublishedFile_RefreshVotingQueue_Request {
  /**
   * @generated from protobuf field: optional uint32 appid = 1;
   */
  appid?: number;
  /**
   * @generated from protobuf field: optional uint32 matching_file_type = 2;
   */
  matching_file_type?: number;
  /**
   * @generated from protobuf field: repeated string tags = 3;
   */
  tags: string[];
  /**
   * @generated from protobuf field: optional bool match_all_tags = 4;
   */
  match_all_tags?: boolean;
  /**
   * @generated from protobuf field: repeated string excluded_tags = 5;
   */
  excluded_tags: string[];
  /**
   * @generated from protobuf field: optional uint32 desired_queue_size = 6;
   */
  desired_queue_size?: number;
}
/**
 * @generated from protobuf message CPublishedFile_RefreshVotingQueue_Response
 */
export interface CPublishedFile_RefreshVotingQueue_Response {}
// @generated message type with reflection information, may provide speed optimized methods
class CPublishedFile_Subscribe_Request$Type extends MessageType<CPublishedFile_Subscribe_Request> {
  constructor() {
    super("CPublishedFile_Subscribe_Request", [
      {
        no: 1,
        name: "publishedfileid",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 2,
        name: "list_type",
        kind: "scalar",
        localName: "list_type",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "appid",
        kind: "scalar",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 4,
        name: "notify_client",
        kind: "scalar",
        localName: "notify_client",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(value?: PartialMessage<CPublishedFile_Subscribe_Request>): CPublishedFile_Subscribe_Request {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CPublishedFile_Subscribe_Request>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CPublishedFile_Subscribe_Request,
  ): CPublishedFile_Subscribe_Request {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 publishedfileid */ 1:
          message.publishedfileid = reader.uint64().toBigInt();
          break;
        case /* optional uint32 list_type */ 2:
          message.list_type = reader.uint32();
          break;
        case /* optional int32 appid */ 3:
          message.appid = reader.int32();
          break;
        case /* optional bool notify_client */ 4:
          message.notify_client = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CPublishedFile_Subscribe_Request,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint64 publishedfileid = 1; */
    if (message.publishedfileid !== undefined) writer.tag(1, WireType.Varint).uint64(message.publishedfileid);
    /* optional uint32 list_type = 2; */
    if (message.list_type !== undefined) writer.tag(2, WireType.Varint).uint32(message.list_type);
    /* optional int32 appid = 3; */
    if (message.appid !== undefined) writer.tag(3, WireType.Varint).int32(message.appid);
    /* optional bool notify_client = 4; */
    if (message.notify_client !== undefined) writer.tag(4, WireType.Varint).bool(message.notify_client);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CPublishedFile_Subscribe_Request
 */
export const CPublishedFile_Subscribe_Request = new CPublishedFile_Subscribe_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPublishedFile_Subscribe_Response$Type extends MessageType<CPublishedFile_Subscribe_Response> {
  constructor() {
    super("CPublishedFile_Subscribe_Response", []);
  }
  create(value?: PartialMessage<CPublishedFile_Subscribe_Response>): CPublishedFile_Subscribe_Response {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CPublishedFile_Subscribe_Response>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CPublishedFile_Subscribe_Response,
  ): CPublishedFile_Subscribe_Response {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: CPublishedFile_Subscribe_Response,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CPublishedFile_Subscribe_Response
 */
export const CPublishedFile_Subscribe_Response = new CPublishedFile_Subscribe_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPublishedFile_Unsubscribe_Request$Type extends MessageType<CPublishedFile_Unsubscribe_Request> {
  constructor() {
    super("CPublishedFile_Unsubscribe_Request", [
      {
        no: 1,
        name: "publishedfileid",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 2,
        name: "list_type",
        kind: "scalar",
        localName: "list_type",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "appid",
        kind: "scalar",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 4,
        name: "notify_client",
        kind: "scalar",
        localName: "notify_client",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(value?: PartialMessage<CPublishedFile_Unsubscribe_Request>): CPublishedFile_Unsubscribe_Request {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CPublishedFile_Unsubscribe_Request>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CPublishedFile_Unsubscribe_Request,
  ): CPublishedFile_Unsubscribe_Request {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 publishedfileid */ 1:
          message.publishedfileid = reader.uint64().toBigInt();
          break;
        case /* optional uint32 list_type */ 2:
          message.list_type = reader.uint32();
          break;
        case /* optional int32 appid */ 3:
          message.appid = reader.int32();
          break;
        case /* optional bool notify_client */ 4:
          message.notify_client = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CPublishedFile_Unsubscribe_Request,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint64 publishedfileid = 1; */
    if (message.publishedfileid !== undefined) writer.tag(1, WireType.Varint).uint64(message.publishedfileid);
    /* optional uint32 list_type = 2; */
    if (message.list_type !== undefined) writer.tag(2, WireType.Varint).uint32(message.list_type);
    /* optional int32 appid = 3; */
    if (message.appid !== undefined) writer.tag(3, WireType.Varint).int32(message.appid);
    /* optional bool notify_client = 4; */
    if (message.notify_client !== undefined) writer.tag(4, WireType.Varint).bool(message.notify_client);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CPublishedFile_Unsubscribe_Request
 */
export const CPublishedFile_Unsubscribe_Request = new CPublishedFile_Unsubscribe_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPublishedFile_Unsubscribe_Response$Type extends MessageType<CPublishedFile_Unsubscribe_Response> {
  constructor() {
    super("CPublishedFile_Unsubscribe_Response", []);
  }
  create(value?: PartialMessage<CPublishedFile_Unsubscribe_Response>): CPublishedFile_Unsubscribe_Response {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CPublishedFile_Unsubscribe_Response>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CPublishedFile_Unsubscribe_Response,
  ): CPublishedFile_Unsubscribe_Response {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: CPublishedFile_Unsubscribe_Response,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CPublishedFile_Unsubscribe_Response
 */
export const CPublishedFile_Unsubscribe_Response = new CPublishedFile_Unsubscribe_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPublishedFile_Publish_Request$Type extends MessageType<CPublishedFile_Publish_Request> {
  constructor() {
    super("CPublishedFile_Publish_Request", [
      {
        no: 1,
        name: "appid",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
        options: { description: "App Id this file is being published FROM." },
      },
      {
        no: 2,
        name: "consumer_appid",
        kind: "scalar",
        localName: "consumer_appid",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
        options: { description: "App Id this file is being published TO." },
      },
      {
        no: 3,
        name: "cloudfilename",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
        options: {
          description: "Name of the file to publish in the user's cloud.",
        },
      },
      {
        no: 4,
        name: "preview_cloudfilename",
        kind: "scalar",
        localName: "preview_cloudfilename",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
        options: {
          description: "Name of the file to use as the published file's preview.",
        },
      },
      {
        no: 5,
        name: "title",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
        options: { description: "Text title for the published file." },
      },
      {
        no: 6,
        name: "file_description",
        kind: "scalar",
        localName: "file_description",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
        options: { description: "Text description for the published file." },
      },
      {
        no: 7,
        name: "file_type",
        kind: "scalar",
        localName: "file_type",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
        options: {
          description: "(EWorkshopFileType) Type of Workshop file to publish.",
        },
      },
      {
        no: 8,
        name: "consumer_shortcut_name",
        kind: "scalar",
        localName: "consumer_shortcut_name",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
        options: { description: "Shortcut name for the published file." },
      },
      {
        no: 9,
        name: "youtube_username",
        kind: "scalar",
        localName: "youtube_username",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
        options: { description: "(Optional) User's YouTube account username." },
      },
      {
        no: 10,
        name: "youtube_videoid",
        kind: "scalar",
        localName: "youtube_videoid",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
        options: {
          description: "(Optional) Video Id of a YouTube video for this published file.",
        },
      },
      {
        no: 11,
        name: "visibility",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
        options: {
          description:
            "(ERemoteStoragePublishedFileVisibility) Visibility of the published file (private, friends, public, etc.)",
        },
      },
      {
        no: 12,
        name: "redirect_uri",
        kind: "scalar",
        localName: "redirect_uri",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
        options: {
          description: "(Optional) If supplied, the resulting published file's Id is appended to the URI.",
        },
      },
      {
        no: 13,
        name: "tags",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/,
        options: {
          description: "Array of text tags to apply to the published file.",
        },
      },
      {
        no: 14,
        name: "collection_type",
        kind: "scalar",
        localName: "collection_type",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
        options: {
          description: "(Optional) Type of collection the published file represents.",
        },
      },
      {
        no: 15,
        name: "game_type",
        kind: "scalar",
        localName: "game_type",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
        options: {
          description: "(Optional) Type of game the published file represents.",
        },
      },
      {
        no: 16,
        name: "url",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
        options: {
          description: "(Optional) If this represents a game, this is the URL to that game's page.",
        },
      },
    ]);
  }
  create(value?: PartialMessage<CPublishedFile_Publish_Request>): CPublishedFile_Publish_Request {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.tags = [];
    if (value !== undefined) reflectionMergePartial<CPublishedFile_Publish_Request>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CPublishedFile_Publish_Request,
  ): CPublishedFile_Publish_Request {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 appid */ 1:
          message.appid = reader.uint32();
          break;
        case /* optional uint32 consumer_appid */ 2:
          message.consumer_appid = reader.uint32();
          break;
        case /* optional string cloudfilename */ 3:
          message.cloudfilename = reader.string();
          break;
        case /* optional string preview_cloudfilename */ 4:
          message.preview_cloudfilename = reader.string();
          break;
        case /* optional string title */ 5:
          message.title = reader.string();
          break;
        case /* optional string file_description */ 6:
          message.file_description = reader.string();
          break;
        case /* optional uint32 file_type */ 7:
          message.file_type = reader.uint32();
          break;
        case /* optional string consumer_shortcut_name */ 8:
          message.consumer_shortcut_name = reader.string();
          break;
        case /* optional string youtube_username */ 9:
          message.youtube_username = reader.string();
          break;
        case /* optional string youtube_videoid */ 10:
          message.youtube_videoid = reader.string();
          break;
        case /* optional uint32 visibility */ 11:
          message.visibility = reader.uint32();
          break;
        case /* optional string redirect_uri */ 12:
          message.redirect_uri = reader.string();
          break;
        case /* repeated string tags */ 13:
          message.tags.push(reader.string());
          break;
        case /* optional string collection_type */ 14:
          message.collection_type = reader.string();
          break;
        case /* optional string game_type */ 15:
          message.game_type = reader.string();
          break;
        case /* optional string url */ 16:
          message.url = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CPublishedFile_Publish_Request,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 appid = 1; */
    if (message.appid !== undefined) writer.tag(1, WireType.Varint).uint32(message.appid);
    /* optional uint32 consumer_appid = 2; */
    if (message.consumer_appid !== undefined) writer.tag(2, WireType.Varint).uint32(message.consumer_appid);
    /* optional string cloudfilename = 3; */
    if (message.cloudfilename !== undefined) writer.tag(3, WireType.LengthDelimited).string(message.cloudfilename);
    /* optional string preview_cloudfilename = 4; */
    if (message.preview_cloudfilename !== undefined)
      writer.tag(4, WireType.LengthDelimited).string(message.preview_cloudfilename);
    /* optional string title = 5; */
    if (message.title !== undefined) writer.tag(5, WireType.LengthDelimited).string(message.title);
    /* optional string file_description = 6; */
    if (message.file_description !== undefined)
      writer.tag(6, WireType.LengthDelimited).string(message.file_description);
    /* optional uint32 file_type = 7; */
    if (message.file_type !== undefined) writer.tag(7, WireType.Varint).uint32(message.file_type);
    /* optional string consumer_shortcut_name = 8; */
    if (message.consumer_shortcut_name !== undefined)
      writer.tag(8, WireType.LengthDelimited).string(message.consumer_shortcut_name);
    /* optional string youtube_username = 9; */
    if (message.youtube_username !== undefined)
      writer.tag(9, WireType.LengthDelimited).string(message.youtube_username);
    /* optional string youtube_videoid = 10; */
    if (message.youtube_videoid !== undefined) writer.tag(10, WireType.LengthDelimited).string(message.youtube_videoid);
    /* optional uint32 visibility = 11; */
    if (message.visibility !== undefined) writer.tag(11, WireType.Varint).uint32(message.visibility);
    /* optional string redirect_uri = 12; */
    if (message.redirect_uri !== undefined) writer.tag(12, WireType.LengthDelimited).string(message.redirect_uri);
    /* repeated string tags = 13; */
    for (let i = 0; i < message.tags.length; i++) writer.tag(13, WireType.LengthDelimited).string(message.tags[i]);
    /* optional string collection_type = 14; */
    if (message.collection_type !== undefined) writer.tag(14, WireType.LengthDelimited).string(message.collection_type);
    /* optional string game_type = 15; */
    if (message.game_type !== undefined) writer.tag(15, WireType.LengthDelimited).string(message.game_type);
    /* optional string url = 16; */
    if (message.url !== undefined) writer.tag(16, WireType.LengthDelimited).string(message.url);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CPublishedFile_Publish_Request
 */
export const CPublishedFile_Publish_Request = new CPublishedFile_Publish_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPublishedFile_Publish_Response$Type extends MessageType<CPublishedFile_Publish_Response> {
  constructor() {
    super("CPublishedFile_Publish_Response", [
      {
        no: 1,
        name: "publishedfileid",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 2,
        name: "redirect_uri",
        kind: "scalar",
        localName: "redirect_uri",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<CPublishedFile_Publish_Response>): CPublishedFile_Publish_Response {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CPublishedFile_Publish_Response>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CPublishedFile_Publish_Response,
  ): CPublishedFile_Publish_Response {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 publishedfileid */ 1:
          message.publishedfileid = reader.uint64().toBigInt();
          break;
        case /* optional string redirect_uri */ 2:
          message.redirect_uri = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CPublishedFile_Publish_Response,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint64 publishedfileid = 1; */
    if (message.publishedfileid !== undefined) writer.tag(1, WireType.Varint).uint64(message.publishedfileid);
    /* optional string redirect_uri = 2; */
    if (message.redirect_uri !== undefined) writer.tag(2, WireType.LengthDelimited).string(message.redirect_uri);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CPublishedFile_Publish_Response
 */
export const CPublishedFile_Publish_Response = new CPublishedFile_Publish_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPublishedFile_GetDetails_Request$Type extends MessageType<CPublishedFile_GetDetails_Request> {
  constructor() {
    super("CPublishedFile_GetDetails_Request", [
      {
        no: 1,
        name: "publishedfileids",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
        options: {
          description: "Set of published file Ids to retrieve details for.",
        },
      },
      {
        no: 2,
        name: "includetags",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
        options: {
          description: "If true, return tag information in the returned details.",
        },
      },
      {
        no: 3,
        name: "includeadditionalpreviews",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
        options: {
          description: "If true, return preview information in the returned details.",
        },
      },
      {
        no: 4,
        name: "includechildren",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
        options: {
          description: "If true, return children in the returned details.",
        },
      },
      {
        no: 5,
        name: "includekvtags",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
        options: {
          description: "If true, return key value tags in the returned details.",
        },
      },
      {
        no: 6,
        name: "includevotes",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
        options: {
          description: "If true, return vote data in the returned details.",
        },
      },
      {
        no: 8,
        name: "short_description",
        kind: "scalar",
        localName: "short_description",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
        options: {
          description: "If true, return a short description instead of the full description.",
        },
      },
    ]);
  }
  create(value?: PartialMessage<CPublishedFile_GetDetails_Request>): CPublishedFile_GetDetails_Request {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.publishedfileids = [];
    if (value !== undefined) reflectionMergePartial<CPublishedFile_GetDetails_Request>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CPublishedFile_GetDetails_Request,
  ): CPublishedFile_GetDetails_Request {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated fixed64 publishedfileids */ 1:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.publishedfileids.push(reader.fixed64().toBigInt());
          else message.publishedfileids.push(reader.fixed64().toBigInt());
          break;
        case /* optional bool includetags */ 2:
          message.includetags = reader.bool();
          break;
        case /* optional bool includeadditionalpreviews */ 3:
          message.includeadditionalpreviews = reader.bool();
          break;
        case /* optional bool includechildren */ 4:
          message.includechildren = reader.bool();
          break;
        case /* optional bool includekvtags */ 5:
          message.includekvtags = reader.bool();
          break;
        case /* optional bool includevotes */ 6:
          message.includevotes = reader.bool();
          break;
        case /* optional bool short_description */ 8:
          message.short_description = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CPublishedFile_GetDetails_Request,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated fixed64 publishedfileids = 1; */
    for (let i = 0; i < message.publishedfileids.length; i++)
      writer.tag(1, WireType.Bit64).fixed64(message.publishedfileids[i]);
    /* optional bool includetags = 2; */
    if (message.includetags !== undefined) writer.tag(2, WireType.Varint).bool(message.includetags);
    /* optional bool includeadditionalpreviews = 3; */
    if (message.includeadditionalpreviews !== undefined)
      writer.tag(3, WireType.Varint).bool(message.includeadditionalpreviews);
    /* optional bool includechildren = 4; */
    if (message.includechildren !== undefined) writer.tag(4, WireType.Varint).bool(message.includechildren);
    /* optional bool includekvtags = 5; */
    if (message.includekvtags !== undefined) writer.tag(5, WireType.Varint).bool(message.includekvtags);
    /* optional bool includevotes = 6; */
    if (message.includevotes !== undefined) writer.tag(6, WireType.Varint).bool(message.includevotes);
    /* optional bool short_description = 8; */
    if (message.short_description !== undefined) writer.tag(8, WireType.Varint).bool(message.short_description);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CPublishedFile_GetDetails_Request
 */
export const CPublishedFile_GetDetails_Request = new CPublishedFile_GetDetails_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PublishedFileDetails$Type extends MessageType<PublishedFileDetails> {
  constructor() {
    super("PublishedFileDetails", [
      {
        no: 1,
        name: "result",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "publishedfileid",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 3,
        name: "creator",
        kind: "scalar",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 4,
        name: "creator_appid",
        kind: "scalar",
        localName: "creator_appid",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "consumer_appid",
        kind: "scalar",
        localName: "consumer_appid",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "consumer_shortcutid",
        kind: "scalar",
        localName: "consumer_shortcutid",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 7,
        name: "filename",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 8,
        name: "file_size",
        kind: "scalar",
        localName: "file_size",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 9,
        name: "preview_file_size",
        kind: "scalar",
        localName: "preview_file_size",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 10,
        name: "file_url",
        kind: "scalar",
        localName: "file_url",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 11,
        name: "preview_url",
        kind: "scalar",
        localName: "preview_url",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 12,
        name: "youtubevideoid",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 13,
        name: "url",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 14,
        name: "hcontent_file",
        kind: "scalar",
        localName: "hcontent_file",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 15,
        name: "hcontent_preview",
        kind: "scalar",
        localName: "hcontent_preview",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 16,
        name: "title",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 17,
        name: "file_description",
        kind: "scalar",
        localName: "file_description",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 18,
        name: "short_description",
        kind: "scalar",
        localName: "short_description",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 19,
        name: "time_created",
        kind: "scalar",
        localName: "time_created",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 20,
        name: "time_updated",
        kind: "scalar",
        localName: "time_updated",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 21,
        name: "visibility",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 22,
        name: "flags",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 23,
        name: "workshop_file",
        kind: "scalar",
        localName: "workshop_file",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 24,
        name: "workshop_accepted",
        kind: "scalar",
        localName: "workshop_accepted",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 25,
        name: "show_subscribe_all",
        kind: "scalar",
        localName: "show_subscribe_all",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 26,
        name: "num_comments_developer",
        kind: "scalar",
        localName: "num_comments_developer",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 27,
        name: "num_comments_public",
        kind: "scalar",
        localName: "num_comments_public",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 28,
        name: "banned",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 29,
        name: "ban_reason",
        kind: "scalar",
        localName: "ban_reason",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 30,
        name: "banner",
        kind: "scalar",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 31,
        name: "can_be_deleted",
        kind: "scalar",
        localName: "can_be_deleted",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 32,
        name: "incompatible",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 33,
        name: "app_name",
        kind: "scalar",
        localName: "app_name",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 34,
        name: "file_type",
        kind: "scalar",
        localName: "file_type",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 35,
        name: "can_subscribe",
        kind: "scalar",
        localName: "can_subscribe",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 36,
        name: "subscriptions",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 37,
        name: "favorited",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 38,
        name: "followers",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 39,
        name: "lifetime_subscriptions",
        kind: "scalar",
        localName: "lifetime_subscriptions",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 40,
        name: "lifetime_favorited",
        kind: "scalar",
        localName: "lifetime_favorited",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 41,
        name: "lifetime_followers",
        kind: "scalar",
        localName: "lifetime_followers",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 42,
        name: "views",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 43,
        name: "image_width",
        kind: "scalar",
        localName: "image_width",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 44,
        name: "image_height",
        kind: "scalar",
        localName: "image_height",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 45,
        name: "image_url",
        kind: "scalar",
        localName: "image_url",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 46,
        name: "spoiler_tag",
        kind: "scalar",
        localName: "spoiler_tag",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 47,
        name: "shortcutid",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 48,
        name: "shortcutname",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 49,
        name: "num_children",
        kind: "scalar",
        localName: "num_children",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 50,
        name: "num_reports",
        kind: "scalar",
        localName: "num_reports",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 51,
        name: "previews",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => PublishedFileDetails_Preview,
      },
      {
        no: 52,
        name: "tags",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => PublishedFileDetails_Tag,
      },
      {
        no: 53,
        name: "children",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => PublishedFileDetails_Child,
      },
      {
        no: 54,
        name: "kvtags",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => PublishedFileDetails_KVTag,
      },
      {
        no: 55,
        name: "vote_data",
        kind: "message",
        localName: "vote_data",
        T: () => PublishedFileDetails_VoteData,
      },
      {
        no: 56,
        name: "time_subscribed",
        kind: "scalar",
        localName: "time_subscribed",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
        options: {
          description: "Only valid in PublishedFile.GetUserFiles and not normal PublishedFile.GetDetail calls",
        },
      },
    ]);
  }
  create(value?: PartialMessage<PublishedFileDetails>): PublishedFileDetails {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.previews = [];
    message.tags = [];
    message.children = [];
    message.kvtags = [];
    if (value !== undefined) reflectionMergePartial<PublishedFileDetails>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: PublishedFileDetails,
  ): PublishedFileDetails {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 result */ 1:
          message.result = reader.uint32();
          break;
        case /* optional uint64 publishedfileid */ 2:
          message.publishedfileid = reader.uint64().toBigInt();
          break;
        case /* optional fixed64 creator */ 3:
          message.creator = reader.fixed64().toBigInt();
          break;
        case /* optional uint32 creator_appid */ 4:
          message.creator_appid = reader.uint32();
          break;
        case /* optional uint32 consumer_appid */ 5:
          message.consumer_appid = reader.uint32();
          break;
        case /* optional uint32 consumer_shortcutid */ 6:
          message.consumer_shortcutid = reader.uint32();
          break;
        case /* optional string filename */ 7:
          message.filename = reader.string();
          break;
        case /* optional uint64 file_size */ 8:
          message.file_size = reader.uint64().toBigInt();
          break;
        case /* optional uint64 preview_file_size */ 9:
          message.preview_file_size = reader.uint64().toBigInt();
          break;
        case /* optional string file_url */ 10:
          message.file_url = reader.string();
          break;
        case /* optional string preview_url */ 11:
          message.preview_url = reader.string();
          break;
        case /* optional string youtubevideoid */ 12:
          message.youtubevideoid = reader.string();
          break;
        case /* optional string url */ 13:
          message.url = reader.string();
          break;
        case /* optional fixed64 hcontent_file */ 14:
          message.hcontent_file = reader.fixed64().toBigInt();
          break;
        case /* optional fixed64 hcontent_preview */ 15:
          message.hcontent_preview = reader.fixed64().toBigInt();
          break;
        case /* optional string title */ 16:
          message.title = reader.string();
          break;
        case /* optional string file_description */ 17:
          message.file_description = reader.string();
          break;
        case /* optional string short_description */ 18:
          message.short_description = reader.string();
          break;
        case /* optional uint32 time_created */ 19:
          message.time_created = reader.uint32();
          break;
        case /* optional uint32 time_updated */ 20:
          message.time_updated = reader.uint32();
          break;
        case /* optional uint32 visibility */ 21:
          message.visibility = reader.uint32();
          break;
        case /* optional uint32 flags */ 22:
          message.flags = reader.uint32();
          break;
        case /* optional bool workshop_file */ 23:
          message.workshop_file = reader.bool();
          break;
        case /* optional bool workshop_accepted */ 24:
          message.workshop_accepted = reader.bool();
          break;
        case /* optional bool show_subscribe_all */ 25:
          message.show_subscribe_all = reader.bool();
          break;
        case /* optional int32 num_comments_developer */ 26:
          message.num_comments_developer = reader.int32();
          break;
        case /* optional int32 num_comments_public */ 27:
          message.num_comments_public = reader.int32();
          break;
        case /* optional bool banned */ 28:
          message.banned = reader.bool();
          break;
        case /* optional string ban_reason */ 29:
          message.ban_reason = reader.string();
          break;
        case /* optional fixed64 banner */ 30:
          message.banner = reader.fixed64().toBigInt();
          break;
        case /* optional bool can_be_deleted */ 31:
          message.can_be_deleted = reader.bool();
          break;
        case /* optional bool incompatible */ 32:
          message.incompatible = reader.bool();
          break;
        case /* optional string app_name */ 33:
          message.app_name = reader.string();
          break;
        case /* optional uint32 file_type */ 34:
          message.file_type = reader.uint32();
          break;
        case /* optional bool can_subscribe */ 35:
          message.can_subscribe = reader.bool();
          break;
        case /* optional uint32 subscriptions */ 36:
          message.subscriptions = reader.uint32();
          break;
        case /* optional uint32 favorited */ 37:
          message.favorited = reader.uint32();
          break;
        case /* optional uint32 followers */ 38:
          message.followers = reader.uint32();
          break;
        case /* optional uint32 lifetime_subscriptions */ 39:
          message.lifetime_subscriptions = reader.uint32();
          break;
        case /* optional uint32 lifetime_favorited */ 40:
          message.lifetime_favorited = reader.uint32();
          break;
        case /* optional uint32 lifetime_followers */ 41:
          message.lifetime_followers = reader.uint32();
          break;
        case /* optional uint32 views */ 42:
          message.views = reader.uint32();
          break;
        case /* optional uint32 image_width */ 43:
          message.image_width = reader.uint32();
          break;
        case /* optional uint32 image_height */ 44:
          message.image_height = reader.uint32();
          break;
        case /* optional string image_url */ 45:
          message.image_url = reader.string();
          break;
        case /* optional bool spoiler_tag */ 46:
          message.spoiler_tag = reader.bool();
          break;
        case /* optional uint32 shortcutid */ 47:
          message.shortcutid = reader.uint32();
          break;
        case /* optional string shortcutname */ 48:
          message.shortcutname = reader.string();
          break;
        case /* optional uint32 num_children */ 49:
          message.num_children = reader.uint32();
          break;
        case /* optional uint32 num_reports */ 50:
          message.num_reports = reader.uint32();
          break;
        case /* repeated PublishedFileDetails.Preview previews */ 51:
          message.previews.push(PublishedFileDetails_Preview.internalBinaryRead(reader, reader.uint32(), options));
          break;
        case /* repeated PublishedFileDetails.Tag tags */ 52:
          message.tags.push(PublishedFileDetails_Tag.internalBinaryRead(reader, reader.uint32(), options));
          break;
        case /* repeated PublishedFileDetails.Child children */ 53:
          message.children.push(PublishedFileDetails_Child.internalBinaryRead(reader, reader.uint32(), options));
          break;
        case /* repeated PublishedFileDetails.KVTag kvtags */ 54:
          message.kvtags.push(PublishedFileDetails_KVTag.internalBinaryRead(reader, reader.uint32(), options));
          break;
        case /* optional PublishedFileDetails.VoteData vote_data */ 55:
          message.vote_data = PublishedFileDetails_VoteData.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.vote_data,
          );
          break;
        case /* optional uint32 time_subscribed */ 56:
          message.time_subscribed = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: PublishedFileDetails,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 result = 1; */
    if (message.result !== undefined) writer.tag(1, WireType.Varint).uint32(message.result);
    /* optional uint64 publishedfileid = 2; */
    if (message.publishedfileid !== undefined) writer.tag(2, WireType.Varint).uint64(message.publishedfileid);
    /* optional fixed64 creator = 3; */
    if (message.creator !== undefined) writer.tag(3, WireType.Bit64).fixed64(message.creator);
    /* optional uint32 creator_appid = 4; */
    if (message.creator_appid !== undefined) writer.tag(4, WireType.Varint).uint32(message.creator_appid);
    /* optional uint32 consumer_appid = 5; */
    if (message.consumer_appid !== undefined) writer.tag(5, WireType.Varint).uint32(message.consumer_appid);
    /* optional uint32 consumer_shortcutid = 6; */
    if (message.consumer_shortcutid !== undefined) writer.tag(6, WireType.Varint).uint32(message.consumer_shortcutid);
    /* optional string filename = 7; */
    if (message.filename !== undefined) writer.tag(7, WireType.LengthDelimited).string(message.filename);
    /* optional uint64 file_size = 8; */
    if (message.file_size !== undefined) writer.tag(8, WireType.Varint).uint64(message.file_size);
    /* optional uint64 preview_file_size = 9; */
    if (message.preview_file_size !== undefined) writer.tag(9, WireType.Varint).uint64(message.preview_file_size);
    /* optional string file_url = 10; */
    if (message.file_url !== undefined) writer.tag(10, WireType.LengthDelimited).string(message.file_url);
    /* optional string preview_url = 11; */
    if (message.preview_url !== undefined) writer.tag(11, WireType.LengthDelimited).string(message.preview_url);
    /* optional string youtubevideoid = 12; */
    if (message.youtubevideoid !== undefined) writer.tag(12, WireType.LengthDelimited).string(message.youtubevideoid);
    /* optional string url = 13; */
    if (message.url !== undefined) writer.tag(13, WireType.LengthDelimited).string(message.url);
    /* optional fixed64 hcontent_file = 14; */
    if (message.hcontent_file !== undefined) writer.tag(14, WireType.Bit64).fixed64(message.hcontent_file);
    /* optional fixed64 hcontent_preview = 15; */
    if (message.hcontent_preview !== undefined) writer.tag(15, WireType.Bit64).fixed64(message.hcontent_preview);
    /* optional string title = 16; */
    if (message.title !== undefined) writer.tag(16, WireType.LengthDelimited).string(message.title);
    /* optional string file_description = 17; */
    if (message.file_description !== undefined)
      writer.tag(17, WireType.LengthDelimited).string(message.file_description);
    /* optional string short_description = 18; */
    if (message.short_description !== undefined)
      writer.tag(18, WireType.LengthDelimited).string(message.short_description);
    /* optional uint32 time_created = 19; */
    if (message.time_created !== undefined) writer.tag(19, WireType.Varint).uint32(message.time_created);
    /* optional uint32 time_updated = 20; */
    if (message.time_updated !== undefined) writer.tag(20, WireType.Varint).uint32(message.time_updated);
    /* optional uint32 visibility = 21; */
    if (message.visibility !== undefined) writer.tag(21, WireType.Varint).uint32(message.visibility);
    /* optional uint32 flags = 22; */
    if (message.flags !== undefined) writer.tag(22, WireType.Varint).uint32(message.flags);
    /* optional bool workshop_file = 23; */
    if (message.workshop_file !== undefined) writer.tag(23, WireType.Varint).bool(message.workshop_file);
    /* optional bool workshop_accepted = 24; */
    if (message.workshop_accepted !== undefined) writer.tag(24, WireType.Varint).bool(message.workshop_accepted);
    /* optional bool show_subscribe_all = 25; */
    if (message.show_subscribe_all !== undefined) writer.tag(25, WireType.Varint).bool(message.show_subscribe_all);
    /* optional int32 num_comments_developer = 26; */
    if (message.num_comments_developer !== undefined)
      writer.tag(26, WireType.Varint).int32(message.num_comments_developer);
    /* optional int32 num_comments_public = 27; */
    if (message.num_comments_public !== undefined) writer.tag(27, WireType.Varint).int32(message.num_comments_public);
    /* optional bool banned = 28; */
    if (message.banned !== undefined) writer.tag(28, WireType.Varint).bool(message.banned);
    /* optional string ban_reason = 29; */
    if (message.ban_reason !== undefined) writer.tag(29, WireType.LengthDelimited).string(message.ban_reason);
    /* optional fixed64 banner = 30; */
    if (message.banner !== undefined) writer.tag(30, WireType.Bit64).fixed64(message.banner);
    /* optional bool can_be_deleted = 31; */
    if (message.can_be_deleted !== undefined) writer.tag(31, WireType.Varint).bool(message.can_be_deleted);
    /* optional bool incompatible = 32; */
    if (message.incompatible !== undefined) writer.tag(32, WireType.Varint).bool(message.incompatible);
    /* optional string app_name = 33; */
    if (message.app_name !== undefined) writer.tag(33, WireType.LengthDelimited).string(message.app_name);
    /* optional uint32 file_type = 34; */
    if (message.file_type !== undefined) writer.tag(34, WireType.Varint).uint32(message.file_type);
    /* optional bool can_subscribe = 35; */
    if (message.can_subscribe !== undefined) writer.tag(35, WireType.Varint).bool(message.can_subscribe);
    /* optional uint32 subscriptions = 36; */
    if (message.subscriptions !== undefined) writer.tag(36, WireType.Varint).uint32(message.subscriptions);
    /* optional uint32 favorited = 37; */
    if (message.favorited !== undefined) writer.tag(37, WireType.Varint).uint32(message.favorited);
    /* optional uint32 followers = 38; */
    if (message.followers !== undefined) writer.tag(38, WireType.Varint).uint32(message.followers);
    /* optional uint32 lifetime_subscriptions = 39; */
    if (message.lifetime_subscriptions !== undefined)
      writer.tag(39, WireType.Varint).uint32(message.lifetime_subscriptions);
    /* optional uint32 lifetime_favorited = 40; */
    if (message.lifetime_favorited !== undefined) writer.tag(40, WireType.Varint).uint32(message.lifetime_favorited);
    /* optional uint32 lifetime_followers = 41; */
    if (message.lifetime_followers !== undefined) writer.tag(41, WireType.Varint).uint32(message.lifetime_followers);
    /* optional uint32 views = 42; */
    if (message.views !== undefined) writer.tag(42, WireType.Varint).uint32(message.views);
    /* optional uint32 image_width = 43; */
    if (message.image_width !== undefined) writer.tag(43, WireType.Varint).uint32(message.image_width);
    /* optional uint32 image_height = 44; */
    if (message.image_height !== undefined) writer.tag(44, WireType.Varint).uint32(message.image_height);
    /* optional string image_url = 45; */
    if (message.image_url !== undefined) writer.tag(45, WireType.LengthDelimited).string(message.image_url);
    /* optional bool spoiler_tag = 46; */
    if (message.spoiler_tag !== undefined) writer.tag(46, WireType.Varint).bool(message.spoiler_tag);
    /* optional uint32 shortcutid = 47; */
    if (message.shortcutid !== undefined) writer.tag(47, WireType.Varint).uint32(message.shortcutid);
    /* optional string shortcutname = 48; */
    if (message.shortcutname !== undefined) writer.tag(48, WireType.LengthDelimited).string(message.shortcutname);
    /* optional uint32 num_children = 49; */
    if (message.num_children !== undefined) writer.tag(49, WireType.Varint).uint32(message.num_children);
    /* optional uint32 num_reports = 50; */
    if (message.num_reports !== undefined) writer.tag(50, WireType.Varint).uint32(message.num_reports);
    /* repeated PublishedFileDetails.Preview previews = 51; */
    for (let i = 0; i < message.previews.length; i++)
      PublishedFileDetails_Preview.internalBinaryWrite(
        message.previews[i],
        writer.tag(51, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated PublishedFileDetails.Tag tags = 52; */
    for (let i = 0; i < message.tags.length; i++)
      PublishedFileDetails_Tag.internalBinaryWrite(
        message.tags[i],
        writer.tag(52, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated PublishedFileDetails.Child children = 53; */
    for (let i = 0; i < message.children.length; i++)
      PublishedFileDetails_Child.internalBinaryWrite(
        message.children[i],
        writer.tag(53, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated PublishedFileDetails.KVTag kvtags = 54; */
    for (let i = 0; i < message.kvtags.length; i++)
      PublishedFileDetails_KVTag.internalBinaryWrite(
        message.kvtags[i],
        writer.tag(54, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional PublishedFileDetails.VoteData vote_data = 55; */
    if (message.vote_data)
      PublishedFileDetails_VoteData.internalBinaryWrite(
        message.vote_data,
        writer.tag(55, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional uint32 time_subscribed = 56; */
    if (message.time_subscribed !== undefined) writer.tag(56, WireType.Varint).uint32(message.time_subscribed);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message PublishedFileDetails
 */
export const PublishedFileDetails = new PublishedFileDetails$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PublishedFileDetails_Tag$Type extends MessageType<PublishedFileDetails_Tag> {
  constructor() {
    super("PublishedFileDetails.Tag", [
      {
        no: 1,
        name: "tag",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 2,
        name: "adminonly",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(value?: PartialMessage<PublishedFileDetails_Tag>): PublishedFileDetails_Tag {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<PublishedFileDetails_Tag>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: PublishedFileDetails_Tag,
  ): PublishedFileDetails_Tag {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string tag */ 1:
          message.tag = reader.string();
          break;
        case /* optional bool adminonly */ 2:
          message.adminonly = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: PublishedFileDetails_Tag,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional string tag = 1; */
    if (message.tag !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.tag);
    /* optional bool adminonly = 2; */
    if (message.adminonly !== undefined) writer.tag(2, WireType.Varint).bool(message.adminonly);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message PublishedFileDetails.Tag
 */
export const PublishedFileDetails_Tag = new PublishedFileDetails_Tag$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PublishedFileDetails_Preview$Type extends MessageType<PublishedFileDetails_Preview> {
  constructor() {
    super("PublishedFileDetails.Preview", [
      {
        no: 1,
        name: "previewid",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 2,
        name: "sortorder",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "url",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 4,
        name: "size",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "filename",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 6,
        name: "youtubevideoid",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<PublishedFileDetails_Preview>): PublishedFileDetails_Preview {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<PublishedFileDetails_Preview>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: PublishedFileDetails_Preview,
  ): PublishedFileDetails_Preview {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 previewid */ 1:
          message.previewid = reader.uint64().toBigInt();
          break;
        case /* optional uint32 sortorder */ 2:
          message.sortorder = reader.uint32();
          break;
        case /* optional string url */ 3:
          message.url = reader.string();
          break;
        case /* optional uint32 size */ 4:
          message.size = reader.uint32();
          break;
        case /* optional string filename */ 5:
          message.filename = reader.string();
          break;
        case /* optional string youtubevideoid */ 6:
          message.youtubevideoid = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: PublishedFileDetails_Preview,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint64 previewid = 1; */
    if (message.previewid !== undefined) writer.tag(1, WireType.Varint).uint64(message.previewid);
    /* optional uint32 sortorder = 2; */
    if (message.sortorder !== undefined) writer.tag(2, WireType.Varint).uint32(message.sortorder);
    /* optional string url = 3; */
    if (message.url !== undefined) writer.tag(3, WireType.LengthDelimited).string(message.url);
    /* optional uint32 size = 4; */
    if (message.size !== undefined) writer.tag(4, WireType.Varint).uint32(message.size);
    /* optional string filename = 5; */
    if (message.filename !== undefined) writer.tag(5, WireType.LengthDelimited).string(message.filename);
    /* optional string youtubevideoid = 6; */
    if (message.youtubevideoid !== undefined) writer.tag(6, WireType.LengthDelimited).string(message.youtubevideoid);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message PublishedFileDetails.Preview
 */
export const PublishedFileDetails_Preview = new PublishedFileDetails_Preview$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PublishedFileDetails_Child$Type extends MessageType<PublishedFileDetails_Child> {
  constructor() {
    super("PublishedFileDetails.Child", [
      {
        no: 1,
        name: "publishedfileid",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 2,
        name: "sortorder",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "file_type",
        kind: "scalar",
        localName: "file_type",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<PublishedFileDetails_Child>): PublishedFileDetails_Child {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<PublishedFileDetails_Child>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: PublishedFileDetails_Child,
  ): PublishedFileDetails_Child {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 publishedfileid */ 1:
          message.publishedfileid = reader.uint64().toBigInt();
          break;
        case /* optional uint32 sortorder */ 2:
          message.sortorder = reader.uint32();
          break;
        case /* optional uint32 file_type */ 3:
          message.file_type = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: PublishedFileDetails_Child,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint64 publishedfileid = 1; */
    if (message.publishedfileid !== undefined) writer.tag(1, WireType.Varint).uint64(message.publishedfileid);
    /* optional uint32 sortorder = 2; */
    if (message.sortorder !== undefined) writer.tag(2, WireType.Varint).uint32(message.sortorder);
    /* optional uint32 file_type = 3; */
    if (message.file_type !== undefined) writer.tag(3, WireType.Varint).uint32(message.file_type);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message PublishedFileDetails.Child
 */
export const PublishedFileDetails_Child = new PublishedFileDetails_Child$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PublishedFileDetails_KVTag$Type extends MessageType<PublishedFileDetails_KVTag> {
  constructor() {
    super("PublishedFileDetails.KVTag", [
      {
        no: 1,
        name: "key",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 2,
        name: "value",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<PublishedFileDetails_KVTag>): PublishedFileDetails_KVTag {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<PublishedFileDetails_KVTag>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: PublishedFileDetails_KVTag,
  ): PublishedFileDetails_KVTag {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string key */ 1:
          message.key = reader.string();
          break;
        case /* optional string value */ 2:
          message.value = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: PublishedFileDetails_KVTag,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional string key = 1; */
    if (message.key !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.key);
    /* optional string value = 2; */
    if (message.value !== undefined) writer.tag(2, WireType.LengthDelimited).string(message.value);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message PublishedFileDetails.KVTag
 */
export const PublishedFileDetails_KVTag = new PublishedFileDetails_KVTag$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PublishedFileDetails_VoteData$Type extends MessageType<PublishedFileDetails_VoteData> {
  constructor() {
    super("PublishedFileDetails.VoteData", [
      {
        no: 1,
        name: "score",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 2,
        name: "votes_up",
        kind: "scalar",
        localName: "votes_up",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "votes_down",
        kind: "scalar",
        localName: "votes_down",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<PublishedFileDetails_VoteData>): PublishedFileDetails_VoteData {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<PublishedFileDetails_VoteData>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: PublishedFileDetails_VoteData,
  ): PublishedFileDetails_VoteData {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional float score */ 1:
          message.score = reader.float();
          break;
        case /* optional uint32 votes_up */ 2:
          message.votes_up = reader.uint32();
          break;
        case /* optional uint32 votes_down */ 3:
          message.votes_down = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: PublishedFileDetails_VoteData,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional float score = 1; */
    if (message.score !== undefined) writer.tag(1, WireType.Bit32).float(message.score);
    /* optional uint32 votes_up = 2; */
    if (message.votes_up !== undefined) writer.tag(2, WireType.Varint).uint32(message.votes_up);
    /* optional uint32 votes_down = 3; */
    if (message.votes_down !== undefined) writer.tag(3, WireType.Varint).uint32(message.votes_down);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message PublishedFileDetails.VoteData
 */
export const PublishedFileDetails_VoteData = new PublishedFileDetails_VoteData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPublishedFile_GetDetails_Response$Type extends MessageType<CPublishedFile_GetDetails_Response> {
  constructor() {
    super("CPublishedFile_GetDetails_Response", [
      {
        no: 1,
        name: "publishedfiledetails",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => PublishedFileDetails,
      },
    ]);
  }
  create(value?: PartialMessage<CPublishedFile_GetDetails_Response>): CPublishedFile_GetDetails_Response {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.publishedfiledetails = [];
    if (value !== undefined) reflectionMergePartial<CPublishedFile_GetDetails_Response>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CPublishedFile_GetDetails_Response,
  ): CPublishedFile_GetDetails_Response {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated PublishedFileDetails publishedfiledetails */ 1:
          message.publishedfiledetails.push(PublishedFileDetails.internalBinaryRead(reader, reader.uint32(), options));
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CPublishedFile_GetDetails_Response,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated PublishedFileDetails publishedfiledetails = 1; */
    for (let i = 0; i < message.publishedfiledetails.length; i++)
      PublishedFileDetails.internalBinaryWrite(
        message.publishedfiledetails[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CPublishedFile_GetDetails_Response
 */
export const CPublishedFile_GetDetails_Response = new CPublishedFile_GetDetails_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPublishedFile_GetUserFiles_Request$Type extends MessageType<CPublishedFile_GetUserFiles_Request> {
  constructor() {
    super("CPublishedFile_GetUserFiles_Request", [
      {
        no: 1,
        name: "appid",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
        options: { description: "App Id to retrieve published files from." },
      },
      {
        no: 3,
        name: "page",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
        options: { description: "(Optional) Starting page for results." },
      },
      {
        no: 4,
        name: "numperpage",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
        options: {
          description: "(Optional) The number of results, per page to return.",
        },
      },
      {
        no: 6,
        name: "sortmethod",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
        options: {
          description: "(Optional) Sorting method to use on returned values.",
        },
      },
      {
        no: 7,
        name: "totalonly",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
        options: {
          description: "(Optional) If true, only return the total number of files that satisfy this query.",
        },
      },
      {
        no: 9,
        name: "privacy",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
        options: { description: "(optional) Filter by privacy settings." },
      },
      {
        no: 10,
        name: "ids_only",
        kind: "scalar",
        localName: "ids_only",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
        options: {
          description: "(Optional) If true, only return the published file ids of files that satisfy this query.",
        },
      },
      {
        no: 11,
        name: "requiredtags",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/,
        options: {
          description: "(Optional) Tags that must be present on a published file to satisfy the query.",
        },
      },
      {
        no: 12,
        name: "excludedtags",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/,
        options: {
          description: "(Optional) Tags that must NOT be present on a published file to satisfy the query.",
        },
      },
    ]);
  }
  create(value?: PartialMessage<CPublishedFile_GetUserFiles_Request>): CPublishedFile_GetUserFiles_Request {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.requiredtags = [];
    message.excludedtags = [];
    if (value !== undefined) reflectionMergePartial<CPublishedFile_GetUserFiles_Request>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CPublishedFile_GetUserFiles_Request,
  ): CPublishedFile_GetUserFiles_Request {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 appid */ 1:
          message.appid = reader.uint32();
          break;
        case /* optional uint32 page */ 3:
          message.page = reader.uint32();
          break;
        case /* optional uint32 numperpage */ 4:
          message.numperpage = reader.uint32();
          break;
        case /* optional string sortmethod */ 6:
          message.sortmethod = reader.string();
          break;
        case /* optional bool totalonly */ 7:
          message.totalonly = reader.bool();
          break;
        case /* optional uint32 privacy */ 9:
          message.privacy = reader.uint32();
          break;
        case /* optional bool ids_only */ 10:
          message.ids_only = reader.bool();
          break;
        case /* repeated string requiredtags */ 11:
          message.requiredtags.push(reader.string());
          break;
        case /* repeated string excludedtags */ 12:
          message.excludedtags.push(reader.string());
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CPublishedFile_GetUserFiles_Request,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 appid = 1; */
    if (message.appid !== undefined) writer.tag(1, WireType.Varint).uint32(message.appid);
    /* optional uint32 page = 3; */
    if (message.page !== undefined) writer.tag(3, WireType.Varint).uint32(message.page);
    /* optional uint32 numperpage = 4; */
    if (message.numperpage !== undefined) writer.tag(4, WireType.Varint).uint32(message.numperpage);
    /* optional string sortmethod = 6; */
    if (message.sortmethod !== undefined) writer.tag(6, WireType.LengthDelimited).string(message.sortmethod);
    /* optional bool totalonly = 7; */
    if (message.totalonly !== undefined) writer.tag(7, WireType.Varint).bool(message.totalonly);
    /* optional uint32 privacy = 9; */
    if (message.privacy !== undefined) writer.tag(9, WireType.Varint).uint32(message.privacy);
    /* optional bool ids_only = 10; */
    if (message.ids_only !== undefined) writer.tag(10, WireType.Varint).bool(message.ids_only);
    /* repeated string requiredtags = 11; */
    for (let i = 0; i < message.requiredtags.length; i++)
      writer.tag(11, WireType.LengthDelimited).string(message.requiredtags[i]);
    /* repeated string excludedtags = 12; */
    for (let i = 0; i < message.excludedtags.length; i++)
      writer.tag(12, WireType.LengthDelimited).string(message.excludedtags[i]);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CPublishedFile_GetUserFiles_Request
 */
export const CPublishedFile_GetUserFiles_Request = new CPublishedFile_GetUserFiles_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPublishedFile_GetUserFiles_Response$Type extends MessageType<CPublishedFile_GetUserFiles_Response> {
  constructor() {
    super("CPublishedFile_GetUserFiles_Response", [
      {
        no: 1,
        name: "total",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "startindex",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "publishedfiledetails",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => PublishedFileDetails,
      },
      {
        no: 4,
        name: "apps",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CPublishedFile_GetUserFiles_Response_App,
      },
    ]);
  }
  create(value?: PartialMessage<CPublishedFile_GetUserFiles_Response>): CPublishedFile_GetUserFiles_Response {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.publishedfiledetails = [];
    message.apps = [];
    if (value !== undefined) reflectionMergePartial<CPublishedFile_GetUserFiles_Response>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CPublishedFile_GetUserFiles_Response,
  ): CPublishedFile_GetUserFiles_Response {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 total */ 1:
          message.total = reader.uint32();
          break;
        case /* optional uint32 startindex */ 2:
          message.startindex = reader.uint32();
          break;
        case /* repeated PublishedFileDetails publishedfiledetails */ 3:
          message.publishedfiledetails.push(PublishedFileDetails.internalBinaryRead(reader, reader.uint32(), options));
          break;
        case /* repeated CPublishedFile_GetUserFiles_Response.App apps */ 4:
          message.apps.push(
            CPublishedFile_GetUserFiles_Response_App.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CPublishedFile_GetUserFiles_Response,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 total = 1; */
    if (message.total !== undefined) writer.tag(1, WireType.Varint).uint32(message.total);
    /* optional uint32 startindex = 2; */
    if (message.startindex !== undefined) writer.tag(2, WireType.Varint).uint32(message.startindex);
    /* repeated PublishedFileDetails publishedfiledetails = 3; */
    for (let i = 0; i < message.publishedfiledetails.length; i++)
      PublishedFileDetails.internalBinaryWrite(
        message.publishedfiledetails[i],
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated CPublishedFile_GetUserFiles_Response.App apps = 4; */
    for (let i = 0; i < message.apps.length; i++)
      CPublishedFile_GetUserFiles_Response_App.internalBinaryWrite(
        message.apps[i],
        writer.tag(4, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CPublishedFile_GetUserFiles_Response
 */
export const CPublishedFile_GetUserFiles_Response = new CPublishedFile_GetUserFiles_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPublishedFile_GetUserFiles_Response_App$Type extends MessageType<CPublishedFile_GetUserFiles_Response_App> {
  constructor() {
    super("CPublishedFile_GetUserFiles_Response.App", [
      {
        no: 1,
        name: "appid",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "name",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 3,
        name: "shortcutid",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "private",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(value?: PartialMessage<CPublishedFile_GetUserFiles_Response_App>): CPublishedFile_GetUserFiles_Response_App {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CPublishedFile_GetUserFiles_Response_App>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CPublishedFile_GetUserFiles_Response_App,
  ): CPublishedFile_GetUserFiles_Response_App {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 appid */ 1:
          message.appid = reader.uint32();
          break;
        case /* optional string name */ 2:
          message.name = reader.string();
          break;
        case /* optional uint32 shortcutid */ 3:
          message.shortcutid = reader.uint32();
          break;
        case /* optional bool private */ 4:
          message.private = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CPublishedFile_GetUserFiles_Response_App,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 appid = 1; */
    if (message.appid !== undefined) writer.tag(1, WireType.Varint).uint32(message.appid);
    /* optional string name = 2; */
    if (message.name !== undefined) writer.tag(2, WireType.LengthDelimited).string(message.name);
    /* optional uint32 shortcutid = 3; */
    if (message.shortcutid !== undefined) writer.tag(3, WireType.Varint).uint32(message.shortcutid);
    /* optional bool private = 4; */
    if (message.private !== undefined) writer.tag(4, WireType.Varint).bool(message.private);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CPublishedFile_GetUserFiles_Response.App
 */
export const CPublishedFile_GetUserFiles_Response_App = new CPublishedFile_GetUserFiles_Response_App$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPublishedFile_Update_Request$Type extends MessageType<CPublishedFile_Update_Request> {
  constructor() {
    super("CPublishedFile_Update_Request", [
      {
        no: 1,
        name: "appid",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
        options: { description: "App Id this published file belongs to." },
      },
      {
        no: 2,
        name: "publishedfileid",
        kind: "scalar",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
        options: {
          description: "Published file id of the file we'd like update.",
        },
      },
      {
        no: 3,
        name: "title",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
        options: { description: "(Optional) Title of the published file." },
      },
      {
        no: 4,
        name: "file_description",
        kind: "scalar",
        localName: "file_description",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
        options: {
          description: "(Optional) Description of the published file.",
        },
      },
      {
        no: 5,
        name: "visibility",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
        options: {
          description: "(Optional) Visibility of the published file.",
        },
      },
      {
        no: 6,
        name: "tags",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/,
        options: {
          description: "(Optional) Set of tags for the published file.",
        },
      },
      {
        no: 7,
        name: "filename",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
        options: { description: "(Optional) Filename for the published file." },
      },
      {
        no: 8,
        name: "preview_filename",
        kind: "scalar",
        localName: "preview_filename",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
        options: {
          description: "(Optional) Preview filename for the published file.",
        },
      },
    ]);
  }
  create(value?: PartialMessage<CPublishedFile_Update_Request>): CPublishedFile_Update_Request {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.tags = [];
    if (value !== undefined) reflectionMergePartial<CPublishedFile_Update_Request>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CPublishedFile_Update_Request,
  ): CPublishedFile_Update_Request {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 appid */ 1:
          message.appid = reader.uint32();
          break;
        case /* optional fixed64 publishedfileid */ 2:
          message.publishedfileid = reader.fixed64().toBigInt();
          break;
        case /* optional string title */ 3:
          message.title = reader.string();
          break;
        case /* optional string file_description */ 4:
          message.file_description = reader.string();
          break;
        case /* optional uint32 visibility */ 5:
          message.visibility = reader.uint32();
          break;
        case /* repeated string tags */ 6:
          message.tags.push(reader.string());
          break;
        case /* optional string filename */ 7:
          message.filename = reader.string();
          break;
        case /* optional string preview_filename */ 8:
          message.preview_filename = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CPublishedFile_Update_Request,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 appid = 1; */
    if (message.appid !== undefined) writer.tag(1, WireType.Varint).uint32(message.appid);
    /* optional fixed64 publishedfileid = 2; */
    if (message.publishedfileid !== undefined) writer.tag(2, WireType.Bit64).fixed64(message.publishedfileid);
    /* optional string title = 3; */
    if (message.title !== undefined) writer.tag(3, WireType.LengthDelimited).string(message.title);
    /* optional string file_description = 4; */
    if (message.file_description !== undefined)
      writer.tag(4, WireType.LengthDelimited).string(message.file_description);
    /* optional uint32 visibility = 5; */
    if (message.visibility !== undefined) writer.tag(5, WireType.Varint).uint32(message.visibility);
    /* repeated string tags = 6; */
    for (let i = 0; i < message.tags.length; i++) writer.tag(6, WireType.LengthDelimited).string(message.tags[i]);
    /* optional string filename = 7; */
    if (message.filename !== undefined) writer.tag(7, WireType.LengthDelimited).string(message.filename);
    /* optional string preview_filename = 8; */
    if (message.preview_filename !== undefined)
      writer.tag(8, WireType.LengthDelimited).string(message.preview_filename);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CPublishedFile_Update_Request
 */
export const CPublishedFile_Update_Request = new CPublishedFile_Update_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPublishedFile_Update_Response$Type extends MessageType<CPublishedFile_Update_Response> {
  constructor() {
    super("CPublishedFile_Update_Response", []);
  }
  create(value?: PartialMessage<CPublishedFile_Update_Response>): CPublishedFile_Update_Response {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CPublishedFile_Update_Response>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CPublishedFile_Update_Response,
  ): CPublishedFile_Update_Response {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: CPublishedFile_Update_Response,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CPublishedFile_Update_Response
 */
export const CPublishedFile_Update_Response = new CPublishedFile_Update_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPublishedFile_RefreshVotingQueue_Request$Type extends MessageType<CPublishedFile_RefreshVotingQueue_Request> {
  constructor() {
    super("CPublishedFile_RefreshVotingQueue_Request", [
      {
        no: 1,
        name: "appid",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "matching_file_type",
        kind: "scalar",
        localName: "matching_file_type",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
        options: { description: "EPublishedFileInfoMatchingFileType" },
      },
      {
        no: 3,
        name: "tags",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/,
        options: {
          description: "Include files that have all the tags or any of the tags if match_all_tags is set to false.",
        },
      },
      {
        no: 4,
        name: "match_all_tags",
        kind: "scalar",
        localName: "match_all_tags",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
        options: {
          description:
            "If true, then files must have all the tags specified.  If false, then must have at least one of the tags specified.",
        },
      },
      {
        no: 5,
        name: "excluded_tags",
        kind: "scalar",
        localName: "excluded_tags",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/,
        options: {
          description: "Exclude any files that have any of these tags.",
        },
      },
      {
        no: 6,
        name: "desired_queue_size",
        kind: "scalar",
        localName: "desired_queue_size",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
        options: {
          description: "Desired number of items in the voting queue.  May be clamped by the server",
        },
      },
    ]);
  }
  create(value?: PartialMessage<CPublishedFile_RefreshVotingQueue_Request>): CPublishedFile_RefreshVotingQueue_Request {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.tags = [];
    message.excluded_tags = [];
    if (value !== undefined) reflectionMergePartial<CPublishedFile_RefreshVotingQueue_Request>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CPublishedFile_RefreshVotingQueue_Request,
  ): CPublishedFile_RefreshVotingQueue_Request {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 appid */ 1:
          message.appid = reader.uint32();
          break;
        case /* optional uint32 matching_file_type */ 2:
          message.matching_file_type = reader.uint32();
          break;
        case /* repeated string tags */ 3:
          message.tags.push(reader.string());
          break;
        case /* optional bool match_all_tags */ 4:
          message.match_all_tags = reader.bool();
          break;
        case /* repeated string excluded_tags */ 5:
          message.excluded_tags.push(reader.string());
          break;
        case /* optional uint32 desired_queue_size */ 6:
          message.desired_queue_size = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CPublishedFile_RefreshVotingQueue_Request,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 appid = 1; */
    if (message.appid !== undefined) writer.tag(1, WireType.Varint).uint32(message.appid);
    /* optional uint32 matching_file_type = 2; */
    if (message.matching_file_type !== undefined) writer.tag(2, WireType.Varint).uint32(message.matching_file_type);
    /* repeated string tags = 3; */
    for (let i = 0; i < message.tags.length; i++) writer.tag(3, WireType.LengthDelimited).string(message.tags[i]);
    /* optional bool match_all_tags = 4; */
    if (message.match_all_tags !== undefined) writer.tag(4, WireType.Varint).bool(message.match_all_tags);
    /* repeated string excluded_tags = 5; */
    for (let i = 0; i < message.excluded_tags.length; i++)
      writer.tag(5, WireType.LengthDelimited).string(message.excluded_tags[i]);
    /* optional uint32 desired_queue_size = 6; */
    if (message.desired_queue_size !== undefined) writer.tag(6, WireType.Varint).uint32(message.desired_queue_size);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CPublishedFile_RefreshVotingQueue_Request
 */
export const CPublishedFile_RefreshVotingQueue_Request = new CPublishedFile_RefreshVotingQueue_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CPublishedFile_RefreshVotingQueue_Response$Type extends MessageType<CPublishedFile_RefreshVotingQueue_Response> {
  constructor() {
    super("CPublishedFile_RefreshVotingQueue_Response", []);
  }
  create(
    value?: PartialMessage<CPublishedFile_RefreshVotingQueue_Response>,
  ): CPublishedFile_RefreshVotingQueue_Response {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CPublishedFile_RefreshVotingQueue_Response>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CPublishedFile_RefreshVotingQueue_Response,
  ): CPublishedFile_RefreshVotingQueue_Response {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: CPublishedFile_RefreshVotingQueue_Response,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CPublishedFile_RefreshVotingQueue_Response
 */
export const CPublishedFile_RefreshVotingQueue_Response = new CPublishedFile_RefreshVotingQueue_Response$Type();
/**
 * @generated ServiceType for protobuf service PublishedFile
 */
export const PublishedFile = new ServiceType(
  "PublishedFile",
  [
    {
      name: "Subscribe",
      options: {
        method_description: "Subscribes the user to the published file",
      },
      I: CPublishedFile_Subscribe_Request,
      O: CPublishedFile_Subscribe_Response,
    },
    {
      name: "Unsubscribe",
      options: {
        method_description: "Unsubscribes the user from the published file",
      },
      I: CPublishedFile_Unsubscribe_Request,
      O: CPublishedFile_Unsubscribe_Response,
    },
    {
      name: "Publish",
      options: {
        method_description: "Publishes a clouded user file to the Workshop.",
      },
      I: CPublishedFile_Publish_Request,
      O: CPublishedFile_Publish_Response,
    },
    {
      name: "GetDetails",
      options: {
        method_description: "Retrieves information about a set of published files.",
      },
      I: CPublishedFile_GetDetails_Request,
      O: CPublishedFile_GetDetails_Response,
    },
    {
      name: "GetUserFiles",
      options: { method_description: "Retrieves files published by a user." },
      I: CPublishedFile_GetUserFiles_Request,
      O: CPublishedFile_GetUserFiles_Response,
    },
    {
      name: "Update",
      options: {
        method_description: "Updates information about a published file.",
      },
      I: CPublishedFile_Update_Request,
      O: CPublishedFile_Update_Response,
    },
    {
      name: "RefreshVotingQueue",
      options: { method_description: "Refresh the voting queue for the user" },
      I: CPublishedFile_RefreshVotingQueue_Request,
      O: CPublishedFile_RefreshVotingQueue_Response,
    },
  ],
  { service_description: "A service to access published file data" },
);

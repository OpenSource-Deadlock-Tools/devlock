// @generated by protobuf-ts 2.9.4 with parameter use_proto_field_name
// @generated from protobuf file "citadel_gcmessages_client.proto" (syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CMsgAccountStats } from "./citadel_gcmessages_common.js";
import { ECitadelBotDifficulty } from "./citadel_gcmessages_common.js";
import { ECitadelGameMode } from "./citadel_gcmessages_common.js";
import { ECitadelMatchMode } from "./citadel_gcmessages_common.js";
import { ECitadelLobbyTeam } from "./citadel_gcmessages_common.js";
import { CExtraMsgBlock } from "./gcsdk_gcmessages.js";
import { CMsgHeroSelectionMatchInfo } from "./citadel_gcmessages_common.js";
import { CMsgRegionPingTimesClient } from "./citadel_gcmessages_common.js";
import { CMsgStartFindingMatchInfo } from "./citadel_gcmessages_common.js";
import { EGCPlatform } from "./steammessages.js";
import { ECitadelRegionMode } from "./citadel_gcmessages_common.js";
/**
 * @generated from protobuf message CSOGameAccountClient
 */
export interface CSOGameAccountClient {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  account_id?: number;
  /**
   * @generated from protobuf field: optional uint64 flags = 2;
   */
  flags?: bigint;
  /**
   * @generated from protobuf field: optional uint32 wins = 3;
   */
  wins?: number;
  /**
   * @generated from protobuf field: optional uint32 losses = 4;
   */
  losses?: number;
  /**
   * @generated from protobuf field: optional uint32 kills = 5;
   */
  kills?: number;
  /**
   * @generated from protobuf field: optional uint32 most_played_hero_id = 6;
   */
  most_played_hero_id?: number;
  /**
   * @generated from protobuf field: optional uint64 permissions = 7;
   */
  permissions?: bigint;
  /**
   * @generated from protobuf field: optional uint64 new_player_progress = 8;
   */
  new_player_progress?: bigint;
  /**
   * @generated from protobuf field: optional uint32 hero_unlock_credits = 9;
   */
  hero_unlock_credits?: number;
  /**
   * @generated from protobuf field: optional uint32 mm_ban_until = 10;
   */
  mm_ban_until?: number;
  /**
   * @generated from protobuf field: optional uint32 comms_ban_until = 11;
   */
  comms_ban_until?: number;
  /**
   * @generated from protobuf field: optional uint32 low_priority_games_remaining = 12;
   */
  low_priority_games_remaining?: number;
  /**
   * @generated from protobuf field: optional uint32 report_ban_until = 13;
   */
  report_ban_until?: number;
  /**
   * @generated from protobuf field: optional uint32 ranked_badge_level = 14;
   */
  ranked_badge_level?: number;
  /**
   * @generated from protobuf field: optional uint32 ranked_badge_detail = 15;
   */
  ranked_badge_detail?: number;
  /**
   * @generated from protobuf field: optional uint32 ranked_badge_interval = 16;
   */
  ranked_badge_interval?: number;
  /**
   * @generated from protobuf field: optional uint32 ranked_matches = 17;
   */
  ranked_matches?: number;
  /**
   * @generated from protobuf field: optional uint32 ranked_interval = 18;
   */
  ranked_interval?: number;
  /**
   * @generated from protobuf field: optional uint32 ranked_schedule = 19;
   */
  ranked_schedule?: number;
  /**
   * @generated from protobuf field: optional uint32 ranked_schedule_time = 20;
   */
  ranked_schedule_time?: number;
}
/**
 * @generated from protobuf enum CSOGameAccountClient.EFlags
 */
export enum CSOGameAccountClient_EFlags {
  /**
   * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
   */
  UNSPECIFIED$ = 0,
  /**
   * @generated from protobuf enum value: k_eDeveloper = 1;
   */
  k_eDeveloper = 1,
  /**
   * @generated from protobuf enum value: k_eExternalModerator = 2;
   */
  k_eExternalModerator = 2,
  /**
   * @generated from protobuf enum value: k_eGotInitialHeroes = 4;
   */
  k_eGotInitialHeroes = 4,
  /**
   * @generated from protobuf enum value: k_eClaimedDiscordLink = 16;
   */
  k_eClaimedDiscordLink = 16,
  /**
   * @generated from protobuf enum value: k_eClaimedForum = 32;
   */
  k_eClaimedForum = 32,
  /**
   * @generated from protobuf enum value: k_eAccountBanned = 64;
   */
  k_eAccountBanned = 64,
}
/**
 * @generated from protobuf message CSOAccountSyncStorage
 */
export interface CSOAccountSyncStorage {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  account_id?: number;
  /**
   * @generated from protobuf field: optional uint32 id = 2;
   */
  id?: number;
  /**
   * @generated from protobuf field: optional uint32 value = 3;
   */
  value?: number;
}
/**
 * @generated from protobuf message CSOAccountHeroInfo
 */
export interface CSOAccountHeroInfo {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  account_id?: number;
  /**
   * @generated from protobuf field: optional uint32 hero_id = 2;
   */
  hero_id?: number;
  /**
   * @generated from protobuf field: optional CSOAccountHeroInfo.EHeroStatus status = 3;
   */
  status?: CSOAccountHeroInfo_EHeroStatus;
  /**
   * @generated from protobuf field: optional uint32 wins = 4;
   */
  wins?: number;
  /**
   * @generated from protobuf field: optional uint32 kills = 5;
   */
  kills?: number;
}
/**
 * @generated from protobuf enum CSOAccountHeroInfo.EHeroStatus
 */
export enum CSOAccountHeroInfo_EHeroStatus {
  /**
   * @generated from protobuf enum value: k_eLocked = 0;
   */
  k_eLocked = 0,
  /**
   * @generated from protobuf enum value: k_eOwned = 1;
   */
  k_eOwned = 1,
}
/**
 * @generated from protobuf message CMsgCitadelClientHello
 */
export interface CMsgCitadelClientHello {
  /**
   * @generated from protobuf field: optional ECitadelRegionMode region_mode = 1;
   */
  region_mode?: ECitadelRegionMode;
}
/**
 * @generated from protobuf message CMsgClientToGCStartMatchmaking
 */
export interface CMsgClientToGCStartMatchmaking {
  /**
   * @generated from protobuf field: optional uint32 client_version = 1;
   */
  client_version?: number;
  /**
   * @generated from protobuf field: optional EGCPlatform client_platform = 2;
   */
  client_platform?: EGCPlatform;
  /**
   * @generated from protobuf field: optional CMsgStartFindingMatchInfo match_info = 3;
   */
  match_info?: CMsgStartFindingMatchInfo;
  /**
   * @generated from protobuf field: optional CMsgRegionPingTimesClient ping_times = 4;
   */
  ping_times?: CMsgRegionPingTimesClient;
  /**
   * @generated from protobuf field: optional CMsgHeroSelectionMatchInfo heroes = 5;
   */
  heroes?: CMsgHeroSelectionMatchInfo;
}
/**
 * @generated from protobuf message CMsgClientToGCStartMatchmakingResponse
 */
export interface CMsgClientToGCStartMatchmakingResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCStartMatchmakingResponse.EResultCode result = 1;
   */
  result?: CMsgClientToGCStartMatchmakingResponse_EResultCode;
  /**
   * @generated from protobuf field: optional uint32 time_stamp = 2;
   */
  time_stamp?: number;
  /**
   * @generated from protobuf field: optional string debug_message = 3;
   */
  debug_message?: string;
}
/**
 * @generated from protobuf enum CMsgClientToGCStartMatchmakingResponse.EResultCode
 */
export enum CMsgClientToGCStartMatchmakingResponse_EResultCode {
  /**
   * @generated from protobuf enum value: k_EResult_OK = 0;
   */
  k_EResult_OK = 0,
  /**
   * @generated from protobuf enum value: k_EResult_AlreadyFindingMatch = 1;
   */
  k_EResult_AlreadyFindingMatch = 1,
  /**
   * @generated from protobuf enum value: k_EResult_PartyMemberInLobby = 2;
   */
  k_EResult_PartyMemberInLobby = 2,
  /**
   * @generated from protobuf enum value: k_EResult_InvalidClientVersion = 3;
   */
  k_EResult_InvalidClientVersion = 3,
  /**
   * @generated from protobuf enum value: k_EResult_MatchmakingDisabled = 4;
   */
  k_EResult_MatchmakingDisabled = 4,
  /**
   * @generated from protobuf enum value: k_EResult_MatchmakingTooBusy = 5;
   */
  k_EResult_MatchmakingTooBusy = 5,
  /**
   * @generated from protobuf enum value: k_EResult_InternalError = 6;
   */
  k_EResult_InternalError = 6,
  /**
   * @generated from protobuf enum value: k_EResult_NoRegionPings = 7;
   */
  k_EResult_NoRegionPings = 7,
  /**
   * @generated from protobuf enum value: k_EResult_InParty = 8;
   */
  k_EResult_InParty = 8,
  /**
   * @generated from protobuf enum value: k_EResult_ModeLocked = 9;
   */
  k_EResult_ModeLocked = 9,
  /**
   * @generated from protobuf enum value: k_EResult_ModeBanned = 10;
   */
  k_EResult_ModeBanned = 10,
  /**
   * @generated from protobuf enum value: k_EResult_RegionInfoNotProvided = 11;
   */
  k_EResult_RegionInfoNotProvided = 11,
  /**
   * @generated from protobuf enum value: k_EResult_DurationControlBlocked = 12;
   */
  k_EResult_DurationControlBlocked = 12,
  /**
   * @generated from protobuf enum value: k_EResult_InvalidHeroSelection = 13;
   */
  k_EResult_InvalidHeroSelection = 13,
  /**
   * @generated from protobuf enum value: k_EResult_HeroesNotUnlocked = 14;
   */
  k_EResult_HeroesNotUnlocked = 14,
  /**
   * @generated from protobuf enum value: k_EResult_PermanentBan = 15;
   */
  k_EResult_PermanentBan = 15,
  /**
   * @generated from protobuf enum value: k_EResult_RankedMMNotOpen = 16;
   */
  k_EResult_RankedMMNotOpen = 16,
  /**
   * @generated from protobuf enum value: k_EResult_RankedNotUnlocked = 17;
   */
  k_EResult_RankedNotUnlocked = 17,
  /**
   * @generated from protobuf enum value: k_EResult_NoRankedWhileInLowPri = 18;
   */
  k_EResult_NoRankedWhileInLowPri = 18,
  /**
   * @generated from protobuf enum value: k_EResult_NoRankedWhileCommsBanned = 19;
   */
  k_EResult_NoRankedWhileCommsBanned = 19,
}
/**
 * @generated from protobuf message CMsgClientToGCStopMatchmaking
 */
export interface CMsgClientToGCStopMatchmaking {}
/**
 * @generated from protobuf message CMsgClientToGCStopMatchmakingResponse
 */
export interface CMsgClientToGCStopMatchmakingResponse {
  /**
   * @generated from protobuf field: optional bool success = 1;
   */
  success?: boolean;
}
/**
 * @generated from protobuf message CMsgGCToClientMatchmakingStopped
 */
export interface CMsgGCToClientMatchmakingStopped {
  /**
   * @generated from protobuf field: optional CMsgGCToClientMatchmakingStopped.EReason reason = 1;
   */
  reason?: CMsgGCToClientMatchmakingStopped_EReason;
}
/**
 * @generated from protobuf enum CMsgGCToClientMatchmakingStopped.EReason
 */
export enum CMsgGCToClientMatchmakingStopped_EReason {
  /**
   * @generated from protobuf enum value: k_EResult_Unspecified = 0;
   */
  k_EResult_Unspecified = 0,
  /**
   * @generated from protobuf enum value: k_EResult_VersionUpdated = 1;
   */
  k_EResult_VersionUpdated = 1,
  /**
   * @generated from protobuf enum value: k_EResult_FailedReadyUp = 2;
   */
  k_EResult_FailedReadyUp = 2,
}
/**
 * @generated from protobuf message CMsgClientToGCLeaveLobby
 */
export interface CMsgClientToGCLeaveLobby {
  /**
   * @generated from protobuf field: optional uint64 lobby_id = 1;
   */
  lobby_id?: bigint;
}
/**
 * @generated from protobuf message CMsgClientToGCLeaveLobbyResponse
 */
export interface CMsgClientToGCLeaveLobbyResponse {}
/**
 * @generated from protobuf message CMsgClientWelcomeCitadel
 */
export interface CMsgClientWelcomeCitadel {
  /**
   * @generated from protobuf field: optional uint32 currency = 1;
   */
  currency?: number;
  /**
   * @generated from protobuf field: repeated CExtraMsgBlock extra_messages = 2;
   */
  extra_messages: CExtraMsgBlock[];
  /**
   * @generated from protobuf field: optional uint32 compatibility_version = 3;
   */
  compatibility_version?: number;
  /**
   * @generated from protobuf field: optional ECitadelRegionMode region_mode = 4;
   */
  region_mode?: ECitadelRegionMode;
}
/**
 * @generated from protobuf message CMsgClientToGCIsInMatchmaking
 */
export interface CMsgClientToGCIsInMatchmaking {}
/**
 * @generated from protobuf message CMsgClientToGCIsInMatchmakingResponse
 */
export interface CMsgClientToGCIsInMatchmakingResponse {
  /**
   * @generated from protobuf field: optional bool in_matchmaking = 1;
   */
  in_matchmaking?: boolean;
}
/**
 * @generated from protobuf message CMsgDevMatchInfo
 */
export interface CMsgDevMatchInfo {
  /**
   * @generated from protobuf field: optional uint32 start_time = 1;
   */
  start_time?: number;
  /**
   * @generated from protobuf field: optional ECitadelLobbyTeam winning_team = 2;
   */
  winning_team?: ECitadelLobbyTeam;
  /**
   * @generated from protobuf field: optional uint64 match_id = 3;
   */
  match_id?: bigint;
  /**
   * @generated from protobuf field: repeated CMsgDevMatchInfo.MatchPlayer players = 4;
   */
  players: CMsgDevMatchInfo_MatchPlayer[];
  /**
   * @generated from protobuf field: optional fixed64 lobby_id = 5;
   */
  lobby_id?: bigint;
  /**
   * @generated from protobuf field: optional uint32 net_worth_team_0 = 9;
   */
  net_worth_team_0?: number;
  /**
   * @generated from protobuf field: optional uint32 net_worth_team_1 = 10;
   */
  net_worth_team_1?: number;
  /**
   * @generated from protobuf field: optional uint32 duration_s = 11;
   */
  duration_s?: number;
  /**
   * @generated from protobuf field: optional uint32 spectators = 12;
   */
  spectators?: number;
  /**
   * @generated from protobuf field: optional uint32 open_spectator_slots = 13;
   */
  open_spectator_slots?: number;
  /**
   * @generated from protobuf field: optional uint64 objectives_mask_team0 = 14;
   */
  objectives_mask_team0?: bigint;
  /**
   * @generated from protobuf field: optional uint64 objectives_mask_team1 = 15;
   */
  objectives_mask_team1?: bigint;
  /**
   * @generated from protobuf field: optional ECitadelMatchMode match_mode = 16;
   */
  match_mode?: ECitadelMatchMode;
  /**
   * @generated from protobuf field: optional ECitadelGameMode game_mode = 17;
   */
  game_mode?: ECitadelGameMode;
  /**
   * @generated from protobuf field: optional uint32 match_score = 18;
   */
  match_score?: number;
  /**
   * @generated from protobuf field: optional ECitadelRegionMode region_mode = 19;
   */
  region_mode?: ECitadelRegionMode;
}
/**
 * @generated from protobuf message CMsgDevMatchInfo.MatchPlayer
 */
export interface CMsgDevMatchInfo_MatchPlayer {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  account_id?: number;
  /**
   * @generated from protobuf field: optional ECitadelLobbyTeam team = 2;
   */
  team?: ECitadelLobbyTeam;
  /**
   * @generated from protobuf field: optional bool abandoned = 3;
   */
  abandoned?: boolean;
  /**
   * @generated from protobuf field: optional uint32 hero_id = 4;
   */
  hero_id?: number;
}
/**
 * @generated from protobuf message CMsgGCToClientRankedSchedule
 */
export interface CMsgGCToClientRankedSchedule {
  /**
   * @generated from protobuf field: repeated CMsgGCToClientRankedSchedule.Schedule schedules = 1;
   */
  schedules: CMsgGCToClientRankedSchedule_Schedule[];
  /**
   * @generated from protobuf field: optional uint32 active_ranked_interval = 2;
   */
  active_ranked_interval?: number;
  /**
   * @generated from protobuf field: optional uint32 active_interval_start = 3;
   */
  active_interval_start?: number;
  /**
   * @generated from protobuf field: optional uint32 active_interval_end = 4;
   */
  active_interval_end?: number;
}
/**
 * @generated from protobuf message CMsgGCToClientRankedSchedule.TimeRange
 */
export interface CMsgGCToClientRankedSchedule_TimeRange {
  /**
   * @generated from protobuf field: optional int32 start_time = 1;
   */
  start_time?: number;
  /**
   * @generated from protobuf field: optional int32 end_time = 2;
   */
  end_time?: number;
}
/**
 * @generated from protobuf message CMsgGCToClientRankedSchedule.Schedule
 */
export interface CMsgGCToClientRankedSchedule_Schedule {
  /**
   * @generated from protobuf field: optional uint32 schedule_id = 1;
   */
  schedule_id?: number;
  /**
   * @generated from protobuf field: repeated CMsgGCToClientRankedSchedule.TimeRange weekends = 2;
   */
  weekends: CMsgGCToClientRankedSchedule_TimeRange[];
  /**
   * @generated from protobuf field: repeated CMsgGCToClientRankedSchedule.TimeRange weekdays = 3;
   */
  weekdays: CMsgGCToClientRankedSchedule_TimeRange[];
  /**
   * @generated from protobuf field: optional bool is_open = 4;
   */
  is_open?: boolean;
  /**
   * @generated from protobuf field: repeated ECitadelRegionMode regions = 5;
   */
  regions: ECitadelRegionMode[];
}
/**
 * @generated from protobuf message CMsgGCToClientDevPlaytestStatus
 */
export interface CMsgGCToClientDevPlaytestStatus {
  /**
   * @generated from protobuf field: optional bool is_mm_enabled = 4;
   */
  is_mm_enabled?: boolean;
  /**
   * @generated from protobuf field: optional bool locked_heroes = 8;
   */
  locked_heroes?: boolean;
  /**
   * @generated from protobuf field: optional bool party_shared_heroes = 9;
   */
  party_shared_heroes?: boolean;
  /**
   * @generated from protobuf field: repeated CMsgGCToClientDevPlaytestStatus.HeroWhitelist hero_whitelists = 10;
   */
  hero_whitelists: CMsgGCToClientDevPlaytestStatus_HeroWhitelist[];
  /**
   * @generated from protobuf field: optional uint32 mm_pause_time = 14;
   */
  mm_pause_time?: number;
  /**
   * @generated from protobuf field: repeated uint32 valid_client_versions = 15;
   */
  valid_client_versions: number[];
  /**
   * @generated from protobuf field: optional uint32 active_match_count = 21;
   */
  active_match_count?: number;
  /**
   * @generated from protobuf field: repeated CMsgGCToClientDevPlaytestStatus.RegionInfo regions = 22;
   */
  regions: CMsgGCToClientDevPlaytestStatus_RegionInfo[];
}
/**
 * @generated from protobuf message CMsgGCToClientDevPlaytestStatus.HeroWhitelist
 */
export interface CMsgGCToClientDevPlaytestStatus_HeroWhitelist {
  /**
   * @generated from protobuf field: optional uint32 hero_id = 1;
   */
  hero_id?: number;
  /**
   * @generated from protobuf field: repeated uint32 account_ids = 2;
   */
  account_ids: number[];
}
/**
 * @generated from protobuf message CMsgGCToClientDevPlaytestStatus.RegionInfo
 */
export interface CMsgGCToClientDevPlaytestStatus_RegionInfo {
  /**
   * @generated from protobuf field: optional ECitadelRegionMode region = 1;
   */
  region?: ECitadelRegionMode;
  /**
   * @generated from protobuf field: optional uint32 unranked_queue_size = 5;
   */
  unranked_queue_size?: number;
  /**
   * @generated from protobuf field: optional uint32 coop_queue_size = 6;
   */
  coop_queue_size?: number;
  /**
   * @generated from protobuf field: optional uint32 coop_mm_formation_time = 8;
   */
  coop_mm_formation_time?: number;
  /**
   * @generated from protobuf field: optional uint32 available_servers = 9;
   */
  available_servers?: number;
}
/**
 * @generated from protobuf message CMsgGCToClientSDRTicket
 */
export interface CMsgGCToClientSDRTicket {
  /**
   * @generated from protobuf field: optional bytes ticket = 1;
   */
  ticket?: Uint8Array;
}
/**
 * @generated from protobuf message CMsgClientToGCReplacementSDRTicket
 */
export interface CMsgClientToGCReplacementSDRTicket {
  /**
   * @generated from protobuf field: optional fixed64 lobby_id = 1;
   */
  lobby_id?: bigint;
}
/**
 * @generated from protobuf message CMsgClientToGCReplacementSDRTicketResponse
 */
export interface CMsgClientToGCReplacementSDRTicketResponse {
  /**
   * @generated from protobuf field: optional bytes ticket = 1;
   */
  ticket?: Uint8Array;
  /**
   * @generated from protobuf field: optional string error_message = 2;
   */
  error_message?: string;
}
/**
 * @generated from protobuf message CMsgClientToGCSetServerConVar
 */
export interface CMsgClientToGCSetServerConVar {
  /**
   * @generated from protobuf field: optional string convar_name = 1;
   */
  convar_name?: string;
  /**
   * @generated from protobuf field: optional string convar_value = 2;
   */
  convar_value?: string;
  /**
   * @generated from protobuf field: optional fixed64 lobby_id = 3;
   */
  lobby_id?: bigint;
}
/**
 * @generated from protobuf message CMsgClientToGCSetServerConVarResponse
 */
export interface CMsgClientToGCSetServerConVarResponse {
  /**
   * @generated from protobuf field: optional string message = 1;
   */
  message?: string;
}
/**
 * @generated from protobuf message CMsgClientToGCPostMatchSurveyResponse
 */
export interface CMsgClientToGCPostMatchSurveyResponse {
  /**
   * @generated from protobuf field: repeated CMsgClientToGCPostMatchSurveyResponse.PostMatchSurvey post_match_survey = 1;
   */
  post_match_survey: CMsgClientToGCPostMatchSurveyResponse_PostMatchSurvey[];
  /**
   * @generated from protobuf field: optional uint64 match_id = 2;
   */
  match_id?: bigint;
}
/**
 * @generated from protobuf message CMsgClientToGCPostMatchSurveyResponse.PostMatchSurvey
 */
export interface CMsgClientToGCPostMatchSurveyResponse_PostMatchSurvey {
  /**
   * @generated from protobuf field: optional uint32 question_id = 1;
   */
  question_id?: number;
  /**
   * @generated from protobuf field: optional uint32 response_value = 2;
   */
  response_value?: number;
}
/**
 * @generated from protobuf message CMsgPartyMMInfo
 */
export interface CMsgPartyMMInfo {
  /**
   * @generated from protobuf field: optional EGCPlatform platform = 1;
   */
  platform?: EGCPlatform;
  /**
   * @generated from protobuf field: optional CMsgRegionPingTimesClient ping_times = 2;
   */
  ping_times?: CMsgRegionPingTimesClient;
  /**
   * @generated from protobuf field: optional uint32 client_version = 3;
   */
  client_version?: number;
  /**
   * @generated from protobuf field: optional ECitadelRegionMode region_mode = 4;
   */
  region_mode?: ECitadelRegionMode;
}
/**
 * @generated from protobuf message CMsgClientToGCPartyCreate
 */
export interface CMsgClientToGCPartyCreate {
  /**
   * @generated from protobuf field: optional CMsgPartyMMInfo party_mm_info = 1;
   */
  party_mm_info?: CMsgPartyMMInfo;
  /**
   * @generated from protobuf field: optional uint32 invite_account_id = 3;
   */
  invite_account_id?: number;
  /**
   * @generated from protobuf field: optional bool disable_party_code = 4;
   */
  disable_party_code?: boolean;
  /**
   * @generated from protobuf field: optional bool is_private_lobby = 5;
   */
  is_private_lobby?: boolean;
  /**
   * @generated from protobuf field: optional ECitadelRegionMode region_mode = 6;
   */
  region_mode?: ECitadelRegionMode;
  /**
   * @generated from protobuf field: optional string server_search_key = 7;
   */
  server_search_key?: string;
}
/**
 * @generated from protobuf message CMsgClientToGCPartyCreateResponse
 */
export interface CMsgClientToGCPartyCreateResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCPartyCreateResponse.EResponse result = 1;
   */
  result?: CMsgClientToGCPartyCreateResponse_EResponse;
  /**
   * @generated from protobuf field: optional fixed64 party_id = 2;
   */
  party_id?: bigint;
}
/**
 * @generated from protobuf enum CMsgClientToGCPartyCreateResponse.EResponse
 */
export enum CMsgClientToGCPartyCreateResponse_EResponse {
  /**
   * @generated from protobuf enum value: k_eInternalError = 0;
   */
  k_eInternalError = 0,
  /**
   * @generated from protobuf enum value: k_eSuccess = 1;
   */
  k_eSuccess = 1,
  /**
   * @generated from protobuf enum value: k_eAlreadyInParty = 2;
   */
  k_eAlreadyInParty = 2,
  /**
   * @generated from protobuf enum value: k_eDisabled = 3;
   */
  k_eDisabled = 3,
  /**
   * @generated from protobuf enum value: k_eInvalidVersion = 4;
   */
  k_eInvalidVersion = 4,
  /**
   * @generated from protobuf enum value: k_eNoRegionPings = 5;
   */
  k_eNoRegionPings = 5,
  /**
   * @generated from protobuf enum value: k_eTooBusy = 6;
   */
  k_eTooBusy = 6,
  /**
   * @generated from protobuf enum value: k_eRateLimited = 7;
   */
  k_eRateLimited = 7,
  /**
   * @generated from protobuf enum value: k_eNotFriends = 8;
   */
  k_eNotFriends = 8,
  /**
   * @generated from protobuf enum value: k_eRegionInfoNotProvided = 9;
   */
  k_eRegionInfoNotProvided = 9,
  /**
   * @generated from protobuf enum value: k_eDurationControlBlocked = 10;
   */
  k_eDurationControlBlocked = 10,
  /**
   * @generated from protobuf enum value: k_eInMatchmaking = 11;
   */
  k_eInMatchmaking = 11,
  /**
   * @generated from protobuf enum value: k_ePlayerDoesntHaveGame = 12;
   */
  k_ePlayerDoesntHaveGame = 12,
}
/**
 * @generated from protobuf message CMsgClientToGCPartyLeave
 */
export interface CMsgClientToGCPartyLeave {
  /**
   * @generated from protobuf field: optional fixed64 party_id = 1;
   */
  party_id?: bigint;
}
/**
 * @generated from protobuf message CMsgClientToGCPartyLeaveResponse
 */
export interface CMsgClientToGCPartyLeaveResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCPartyLeaveResponse.EResponse result = 1;
   */
  result?: CMsgClientToGCPartyLeaveResponse_EResponse;
}
/**
 * @generated from protobuf enum CMsgClientToGCPartyLeaveResponse.EResponse
 */
export enum CMsgClientToGCPartyLeaveResponse_EResponse {
  /**
   * @generated from protobuf enum value: k_eInternalError = 0;
   */
  k_eInternalError = 0,
  /**
   * @generated from protobuf enum value: k_eSuccess = 1;
   */
  k_eSuccess = 1,
  /**
   * @generated from protobuf enum value: k_eNotInParty = 2;
   */
  k_eNotInParty = 2,
  /**
   * @generated from protobuf enum value: k_eInMatchMaking = 3;
   */
  k_eInMatchMaking = 3,
}
/**
 * @generated from protobuf message CMsgClientToGCPartyJoin
 */
export interface CMsgClientToGCPartyJoin {
  /**
   * @generated from protobuf field: optional fixed64 party_id = 1;
   */
  party_id?: bigint;
  /**
   * @generated from protobuf field: optional bool is_rejoin = 2;
   */
  is_rejoin?: boolean;
  /**
   * @generated from protobuf field: optional CMsgPartyMMInfo party_mm_info = 3;
   */
  party_mm_info?: CMsgPartyMMInfo;
}
/**
 * @generated from protobuf message CMsgClientToGCPartyJoinResponse
 */
export interface CMsgClientToGCPartyJoinResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCPartyJoinResponse.EResponse result = 1;
   */
  result?: CMsgClientToGCPartyJoinResponse_EResponse;
}
/**
 * @generated from protobuf enum CMsgClientToGCPartyJoinResponse.EResponse
 */
export enum CMsgClientToGCPartyJoinResponse_EResponse {
  /**
   * @generated from protobuf enum value: k_eInternalError = 0;
   */
  k_eInternalError = 0,
  /**
   * @generated from protobuf enum value: k_eSuccess = 1;
   */
  k_eSuccess = 1,
  /**
   * @generated from protobuf enum value: k_eAlreadyInParty = 2;
   */
  k_eAlreadyInParty = 2,
  /**
   * @generated from protobuf enum value: k_eDisabled = 3;
   */
  k_eDisabled = 3,
  /**
   * @generated from protobuf enum value: k_eInvalidPartyID = 4;
   */
  k_eInvalidPartyID = 4,
  /**
   * @generated from protobuf enum value: k_eInvalidPermissions = 5;
   */
  k_eInvalidPermissions = 5,
  /**
   * @generated from protobuf enum value: k_eInvalidVersion = 6;
   */
  k_eInvalidVersion = 6,
  /**
   * @generated from protobuf enum value: k_eNoRegionPings = 7;
   */
  k_eNoRegionPings = 7,
  /**
   * @generated from protobuf enum value: k_eTooBusy = 8;
   */
  k_eTooBusy = 8,
  /**
   * @generated from protobuf enum value: k_eInvalidCode = 9;
   */
  k_eInvalidCode = 9,
  /**
   * @generated from protobuf enum value: k_eRateLimited = 10;
   */
  k_eRateLimited = 10,
  /**
   * @generated from protobuf enum value: k_eRegionInfoNotProvided = 11;
   */
  k_eRegionInfoNotProvided = 11,
  /**
   * @generated from protobuf enum value: k_eDurationControlBlocked = 12;
   */
  k_eDurationControlBlocked = 12,
  /**
   * @generated from protobuf enum value: k_ePartyInMatchMaking = 13;
   */
  k_ePartyInMatchMaking = 13,
  /**
   * @generated from protobuf enum value: k_eInMatchmaking = 14;
   */
  k_eInMatchmaking = 14,
  /**
   * @generated from protobuf enum value: k_ePartyFull = 15;
   */
  k_ePartyFull = 15,
}
/**
 * @generated from protobuf message CMsgClientToGCPartyAction
 */
export interface CMsgClientToGCPartyAction {
  /**
   * @generated from protobuf field: optional fixed64 party_id = 1;
   */
  party_id?: bigint;
  /**
   * @generated from protobuf field: optional uint32 target_account_id = 2;
   */
  target_account_id?: number;
  /**
   * @generated from protobuf field: optional CMsgClientToGCPartyAction.EAction action_id = 3;
   */
  action_id?: CMsgClientToGCPartyAction_EAction;
  /**
   * @generated from protobuf field: optional uint64 uint_value = 4;
   */
  uint_value?: bigint;
  /**
   * @generated from protobuf field: optional bool bool_value = 5;
   */
  bool_value?: boolean;
  /**
   * @generated from protobuf field: optional string str_value = 6;
   */
  str_value?: string;
}
/**
 * @generated from protobuf enum CMsgClientToGCPartyAction.EAction
 */
export enum CMsgClientToGCPartyAction_EAction {
  /**
   * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
   */
  UNSPECIFIED$ = 0,
  /**
   * @generated from protobuf enum value: k_eKickUser = 1;
   */
  k_eKickUser = 1,
  /**
   * @generated from protobuf enum value: k_eCancelInvite = 2;
   */
  k_eCancelInvite = 2,
  /**
   * @generated from protobuf enum value: k_eCancelFindMatch = 3;
   */
  k_eCancelFindMatch = 3,
  /**
   * @generated from protobuf enum value: k_eSetPlayerType = 5;
   */
  k_eSetPlayerType = 5,
  /**
   * @generated from protobuf enum value: k_eEnablePartyCode = 7;
   */
  k_eEnablePartyCode = 7,
  /**
   * @generated from protobuf enum value: k_eSetMemberTeam = 8;
   */
  k_eSetMemberTeam = 8,
  /**
   * @generated from protobuf enum value: k_eSetChatMode = 9;
   */
  k_eSetChatMode = 9,
  /**
   * @generated from protobuf enum value: k_eSetPlayerSlot = 10;
   */
  k_eSetPlayerSlot = 10,
  /**
   * @generated from protobuf enum value: k_eSetRegionMode = 11;
   */
  k_eSetRegionMode = 11,
  /**
   * @generated from protobuf enum value: k_eSetSearchKey = 12;
   */
  k_eSetSearchKey = 12,
  /**
   * @generated from protobuf enum value: k_eSetBotDifficulty = 13;
   */
  k_eSetBotDifficulty = 13,
  /**
   * @generated from protobuf enum value: k_eSetRandomizedLanes = 14;
   */
  k_eSetRandomizedLanes = 14,
  /**
   * @generated from protobuf enum value: k_eSetServerRegion = 15;
   */
  k_eSetServerRegion = 15,
  /**
   * @generated from protobuf enum value: k_eSetPubliclyVisible = 16;
   */
  k_eSetPubliclyVisible = 16,
  /**
   * @generated from protobuf enum value: k_eSetCheatsEnabled = 17;
   */
  k_eSetCheatsEnabled = 17,
  /**
   * @generated from protobuf enum value: k_eSwapTeams = 18;
   */
  k_eSwapTeams = 18,
  /**
   * @generated from protobuf enum value: k_eShuffleLobby = 19;
   */
  k_eShuffleLobby = 19,
  /**
   * @generated from protobuf enum value: k_eShuffleLanes = 20;
   */
  k_eShuffleLanes = 20,
  /**
   * @generated from protobuf enum value: k_eSetDuplicateHeroesEnabled = 21;
   */
  k_eSetDuplicateHeroesEnabled = 21,
}
/**
 * @generated from protobuf message CMsgClientToGCPartyActionResponse
 */
export interface CMsgClientToGCPartyActionResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCPartyActionResponse.EResponse result = 1;
   */
  result?: CMsgClientToGCPartyActionResponse_EResponse;
}
/**
 * @generated from protobuf enum CMsgClientToGCPartyActionResponse.EResponse
 */
export enum CMsgClientToGCPartyActionResponse_EResponse {
  /**
   * @generated from protobuf enum value: k_eInternalError = 0;
   */
  k_eInternalError = 0,
  /**
   * @generated from protobuf enum value: k_eSuccess = 1;
   */
  k_eSuccess = 1,
  /**
   * @generated from protobuf enum value: k_eInvalidPartyID = 2;
   */
  k_eInvalidPartyID = 2,
  /**
   * @generated from protobuf enum value: k_eInvalidPermissions = 3;
   */
  k_eInvalidPermissions = 3,
  /**
   * @generated from protobuf enum value: k_eInvalidTarget = 4;
   */
  k_eInvalidTarget = 4,
  /**
   * @generated from protobuf enum value: k_eInvalidValue = 5;
   */
  k_eInvalidValue = 5,
  /**
   * @generated from protobuf enum value: k_eInMatchMaking = 6;
   */
  k_eInMatchMaking = 6,
  /**
   * @generated from protobuf enum value: k_eInMatch = 7;
   */
  k_eInMatch = 7,
  /**
   * @generated from protobuf enum value: k_eDisabled = 8;
   */
  k_eDisabled = 8,
  /**
   * @generated from protobuf enum value: k_eTooBusy = 9;
   */
  k_eTooBusy = 9,
  /**
   * @generated from protobuf enum value: k_eRateLimited = 10;
   */
  k_eRateLimited = 10,
  /**
   * @generated from protobuf enum value: k_eCannotChangeWhileReady = 12;
   */
  k_eCannotChangeWhileReady = 12,
  /**
   * @generated from protobuf enum value: k_eSlotTaken = 13;
   */
  k_eSlotTaken = 13,
}
/**
 * @generated from protobuf message CMsgClientToGCPartySetMode
 */
export interface CMsgClientToGCPartySetMode {
  /**
   * @generated from protobuf field: optional fixed64 party_id = 1;
   */
  party_id?: bigint;
  /**
   * @generated from protobuf field: optional ECitadelMatchMode match_mode = 2;
   */
  match_mode?: ECitadelMatchMode;
  /**
   * @generated from protobuf field: optional ECitadelGameMode game_mode = 3;
   */
  game_mode?: ECitadelGameMode;
  /**
   * @generated from protobuf field: optional ECitadelBotDifficulty bot_difficulty = 4;
   */
  bot_difficulty?: ECitadelBotDifficulty;
  /**
   * @generated from protobuf field: optional string dev_server_command = 5;
   */
  dev_server_command?: string;
  /**
   * @generated from protobuf field: optional ECitadelRegionMode region_mode = 6;
   */
  region_mode?: ECitadelRegionMode;
  /**
   * @generated from protobuf field: optional uint32 ranked_schedule = 7;
   */
  ranked_schedule?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCPartySetModeResponse
 */
export interface CMsgClientToGCPartySetModeResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCPartySetModeResponse.EResponse result = 1;
   */
  result?: CMsgClientToGCPartySetModeResponse_EResponse;
  /**
   * @generated from protobuf field: optional uint32 time_stamp = 2;
   */
  time_stamp?: number;
  /**
   * @generated from protobuf field: optional uint32 account_id = 3;
   */
  account_id?: number;
}
/**
 * @generated from protobuf enum CMsgClientToGCPartySetModeResponse.EResponse
 */
export enum CMsgClientToGCPartySetModeResponse_EResponse {
  /**
   * @generated from protobuf enum value: k_eInternalError = 0;
   */
  k_eInternalError = 0,
  /**
   * @generated from protobuf enum value: k_eSuccess = 1;
   */
  k_eSuccess = 1,
  /**
   * @generated from protobuf enum value: k_eInvalidPartyID = 2;
   */
  k_eInvalidPartyID = 2,
  /**
   * @generated from protobuf enum value: k_eInvalidPermissions = 3;
   */
  k_eInvalidPermissions = 3,
  /**
   * @generated from protobuf enum value: k_ePlayerPermanentBanned = 4;
   */
  k_ePlayerPermanentBanned = 4,
  /**
   * @generated from protobuf enum value: k_eInvalidValue = 5;
   */
  k_eInvalidValue = 5,
  /**
   * @generated from protobuf enum value: k_eInMatchMaking = 6;
   */
  k_eInMatchMaking = 6,
  /**
   * @generated from protobuf enum value: k_eInMatch = 7;
   */
  k_eInMatch = 7,
  /**
   * @generated from protobuf enum value: k_eDisabled = 8;
   */
  k_eDisabled = 8,
  /**
   * @generated from protobuf enum value: k_eTooBusy = 9;
   */
  k_eTooBusy = 9,
  /**
   * @generated from protobuf enum value: k_eRateLimited = 10;
   */
  k_eRateLimited = 10,
  /**
   * @generated from protobuf enum value: k_eAlreadyDrafting = 11;
   */
  k_eAlreadyDrafting = 11,
  /**
   * @generated from protobuf enum value: k_eCannotChangeWhileReady = 12;
   */
  k_eCannotChangeWhileReady = 12,
  /**
   * @generated from protobuf enum value: k_eTooFewPlayers = 13;
   */
  k_eTooFewPlayers = 13,
  /**
   * @generated from protobuf enum value: k_eTooManyPlayers = 14;
   */
  k_eTooManyPlayers = 14,
  /**
   * @generated from protobuf enum value: k_ePlayerBanned = 15;
   */
  k_ePlayerBanned = 15,
  /**
   * @generated from protobuf enum value: k_eTooManyHighMMR = 16;
   */
  k_eTooManyHighMMR = 16,
  /**
   * @generated from protobuf enum value: k_eFiveStacksNotAllowed = 18;
   */
  k_eFiveStacksNotAllowed = 18,
  /**
   * @generated from protobuf enum value: k_eRankedMMNotOpen = 19;
   */
  k_eRankedMMNotOpen = 19,
  /**
   * @generated from protobuf enum value: k_eRankedNotunlocked = 20;
   */
  k_eRankedNotunlocked = 20,
}
/**
 * @generated from protobuf message CMsgClientToGCPartyStartMatch
 */
export interface CMsgClientToGCPartyStartMatch {
  /**
   * @generated from protobuf field: optional fixed64 party_id = 1;
   */
  party_id?: bigint;
}
/**
 * @generated from protobuf message CMsgClientToGCPartyStartMatchResponse
 */
export interface CMsgClientToGCPartyStartMatchResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCPartyStartMatchResponse.EResponse result = 1;
   */
  result?: CMsgClientToGCPartyStartMatchResponse_EResponse;
  /**
   * @generated from protobuf field: optional uint32 account_id = 2;
   */
  account_id?: number;
}
/**
 * @generated from protobuf enum CMsgClientToGCPartyStartMatchResponse.EResponse
 */
export enum CMsgClientToGCPartyStartMatchResponse_EResponse {
  /**
   * @generated from protobuf enum value: k_eInternalError = 0;
   */
  k_eInternalError = 0,
  /**
   * @generated from protobuf enum value: k_eSuccess = 1;
   */
  k_eSuccess = 1,
  /**
   * @generated from protobuf enum value: k_eDisabled = 2;
   */
  k_eDisabled = 2,
  /**
   * @generated from protobuf enum value: k_eInvalidPartyID = 3;
   */
  k_eInvalidPartyID = 3,
  /**
   * @generated from protobuf enum value: k_eInvalidPermissions = 4;
   */
  k_eInvalidPermissions = 4,
  /**
   * @generated from protobuf enum value: k_eTooBusy = 5;
   */
  k_eTooBusy = 5,
  /**
   * @generated from protobuf enum value: k_eInMatchmaking = 6;
   */
  k_eInMatchmaking = 6,
  /**
   * @generated from protobuf enum value: k_eInMatch = 7;
   */
  k_eInMatch = 7,
  /**
   * @generated from protobuf enum value: k_eInvalidVersion = 10;
   */
  k_eInvalidVersion = 10,
  /**
   * @generated from protobuf enum value: k_ePlayersNotReady = 11;
   */
  k_ePlayersNotReady = 11,
  /**
   * @generated from protobuf enum value: k_eCannotSelectRegion = 12;
   */
  k_eCannotSelectRegion = 12,
  /**
   * @generated from protobuf enum value: k_eNotAllPlayersAvailable = 13;
   */
  k_eNotAllPlayersAvailable = 13,
  /**
   * @generated from protobuf enum value: k_eTooManyPlayersForMM = 14;
   */
  k_eTooManyPlayersForMM = 14,
  /**
   * @generated from protobuf enum value: k_eTooManyPlayersForPrivate = 15;
   */
  k_eTooManyPlayersForPrivate = 15,
  /**
   * @generated from protobuf enum value: k_eTooManySpectatorsForMM = 16;
   */
  k_eTooManySpectatorsForMM = 16,
  /**
   * @generated from protobuf enum value: k_eTooManySpectatorsForPrivate = 17;
   */
  k_eTooManySpectatorsForPrivate = 17,
  /**
   * @generated from protobuf enum value: k_eTooFewPlayersForMM = 18;
   */
  k_eTooFewPlayersForMM = 18,
  /**
   * @generated from protobuf enum value: k_eTooFewPlayersForPrivate = 19;
   */
  k_eTooFewPlayersForPrivate = 19,
  /**
   * @generated from protobuf enum value: k_eMismatchedVersions = 20;
   */
  k_eMismatchedVersions = 20,
  /**
   * @generated from protobuf enum value: k_eInvalidPartyMatchMode = 21;
   */
  k_eInvalidPartyMatchMode = 21,
  /**
   * @generated from protobuf enum value: k_ePlayerBannedFromMode = 22;
   */
  k_ePlayerBannedFromMode = 22,
  /**
   * @generated from protobuf enum value: k_eTooManyPlayersOnTeam = 23;
   */
  k_eTooManyPlayersOnTeam = 23,
  /**
   * @generated from protobuf enum value: k_eInvalidTeam = 24;
   */
  k_eInvalidTeam = 24,
  /**
   * @generated from protobuf enum value: k_eInvalidHeroLineup = 25;
   */
  k_eInvalidHeroLineup = 25,
  /**
   * @generated from protobuf enum value: k_eInvalidGroupHeroLineup = 26;
   */
  k_eInvalidGroupHeroLineup = 26,
  /**
   * @generated from protobuf enum value: k_eUnassignedPlayers = 27;
   */
  k_eUnassignedPlayers = 27,
  /**
   * @generated from protobuf enum value: k_eRankedMMNotOpen = 28;
   */
  k_eRankedMMNotOpen = 28,
}
/**
 * @generated from protobuf message CMsgClientToGCPartyInviteUser
 */
export interface CMsgClientToGCPartyInviteUser {
  /**
   * @generated from protobuf field: optional fixed64 party_id = 1;
   */
  party_id?: bigint;
  /**
   * @generated from protobuf field: optional uint32 invite_account_id = 2;
   */
  invite_account_id?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCPartyInviteUserResponse
 */
export interface CMsgClientToGCPartyInviteUserResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCPartyInviteUserResponse.EResponse result = 1;
   */
  result?: CMsgClientToGCPartyInviteUserResponse_EResponse;
  /**
   * @generated from protobuf field: optional bool user_online = 2;
   */
  user_online?: boolean;
}
/**
 * @generated from protobuf enum CMsgClientToGCPartyInviteUserResponse.EResponse
 */
export enum CMsgClientToGCPartyInviteUserResponse_EResponse {
  /**
   * @generated from protobuf enum value: k_eInternalError = 0;
   */
  k_eInternalError = 0,
  /**
   * @generated from protobuf enum value: k_eSuccess = 1;
   */
  k_eSuccess = 1,
  /**
   * @generated from protobuf enum value: k_eAlreadyInvited = 2;
   */
  k_eAlreadyInvited = 2,
  /**
   * @generated from protobuf enum value: k_eInvalidPermissions = 3;
   */
  k_eInvalidPermissions = 3,
  /**
   * @generated from protobuf enum value: k_eInvalidPartyID = 4;
   */
  k_eInvalidPartyID = 4,
  /**
   * @generated from protobuf enum value: k_eDisabled = 5;
   */
  k_eDisabled = 5,
  /**
   * @generated from protobuf enum value: k_eTooManyInvites = 6;
   */
  k_eTooManyInvites = 6,
  /**
   * @generated from protobuf enum value: k_eNotFriends = 7;
   */
  k_eNotFriends = 7,
  /**
   * @generated from protobuf enum value: k_eTooBusy = 8;
   */
  k_eTooBusy = 8,
  /**
   * @generated from protobuf enum value: k_eRateLimited = 9;
   */
  k_eRateLimited = 9,
  /**
   * @generated from protobuf enum value: k_eInvalidPartyMode = 10;
   */
  k_eInvalidPartyMode = 10,
  /**
   * @generated from protobuf enum value: k_ePlayerDoesntHaveGame = 11;
   */
  k_ePlayerDoesntHaveGame = 11,
}
/**
 * @generated from protobuf message CMsgGCToClientPartyEvent
 */
export interface CMsgGCToClientPartyEvent {
  /**
   * @generated from protobuf field: optional fixed64 party_id = 1;
   */
  party_id?: bigint;
  /**
   * @generated from protobuf field: optional CMsgGCToClientPartyEvent.EEvent event = 2;
   */
  event?: CMsgGCToClientPartyEvent_EEvent;
  /**
   * @generated from protobuf field: optional uint32 initiator_account_id = 3;
   */
  initiator_account_id?: number;
  /**
   * @generated from protobuf field: optional uint32 target_account_id = 4;
   */
  target_account_id?: number;
  /**
   * @generated from protobuf field: optional bytes bytes_data = 5;
   */
  bytes_data?: Uint8Array;
  /**
   * @generated from protobuf field: optional string str_data = 6;
   */
  str_data?: string;
  /**
   * @generated from protobuf field: optional uint64 uint_data = 7;
   */
  uint_data?: bigint;
}
/**
 * @generated from protobuf enum CMsgGCToClientPartyEvent.EEvent
 */
export enum CMsgGCToClientPartyEvent_EEvent {
  /**
   * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
   */
  UNSPECIFIED$ = 0,
  /**
   * @generated from protobuf enum value: k_ePlayerKicked = 1;
   */
  k_ePlayerKicked = 1,
  /**
   * @generated from protobuf enum value: k_eJoinedParty = 3;
   */
  k_eJoinedParty = 3,
  /**
   * @generated from protobuf enum value: k_eMatchCompleted = 4;
   */
  k_eMatchCompleted = 4,
  /**
   * @generated from protobuf enum value: k_eMatchMakingStopped_User = 5;
   */
  k_eMatchMakingStopped_User = 5,
  /**
   * @generated from protobuf enum value: k_eMatchMakingStopped_Version = 6;
   */
  k_eMatchMakingStopped_Version = 6,
  /**
   * @generated from protobuf enum value: k_eMatchMakingStopped_NoServerRegion = 7;
   */
  k_eMatchMakingStopped_NoServerRegion = 7,
  /**
   * @generated from protobuf enum value: k_eLeftParty = 8;
   */
  k_eLeftParty = 8,
  /**
   * @generated from protobuf enum value: k_eDeclinedInvite = 9;
   */
  k_eDeclinedInvite = 9,
  /**
   * @generated from protobuf enum value: k_eMatchMakingStopped_FailedOther = 10;
   */
  k_eMatchMakingStopped_FailedOther = 10,
  /**
   * @generated from protobuf enum value: k_eDraftEnded_User = 11;
   */
  k_eDraftEnded_User = 11,
  /**
   * @generated from protobuf enum value: k_eStartDraftMMFailed = 12;
   */
  k_eStartDraftMMFailed = 12,
  /**
   * @generated from protobuf enum value: k_eMatchMakingStopped_Cancelled = 13;
   */
  k_eMatchMakingStopped_Cancelled = 13,
}
/**
 * @generated from protobuf message CMsgGCToClientCanRejoinParty
 */
export interface CMsgGCToClientCanRejoinParty {
  /**
   * @generated from protobuf field: optional fixed64 party_id = 1;
   */
  party_id?: bigint;
}
/**
 * @generated from protobuf message CMsgClientToGCPartyJoinViaCode
 */
export interface CMsgClientToGCPartyJoinViaCode {
  /**
   * @generated from protobuf field: optional uint64 join_code = 1;
   */
  join_code?: bigint;
  /**
   * @generated from protobuf field: optional CMsgPartyMMInfo party_mm_info = 2;
   */
  party_mm_info?: CMsgPartyMMInfo;
}
/**
 * @generated from protobuf message CMsgClientToGCPartyJoinViaCodeResponse
 */
export interface CMsgClientToGCPartyJoinViaCodeResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCPartyJoinResponse.EResponse result = 1;
   */
  result?: CMsgClientToGCPartyJoinResponse_EResponse;
  /**
   * @generated from protobuf field: optional fixed64 party_id = 2;
   */
  party_id?: bigint;
}
/**
 * @generated from protobuf message CMsgClientToGCPartySetReadyState
 */
export interface CMsgClientToGCPartySetReadyState {
  /**
   * @generated from protobuf field: optional fixed64 party_id = 1;
   */
  party_id?: bigint;
  /**
   * @generated from protobuf field: optional bool ready_state = 2;
   */
  ready_state?: boolean;
  /**
   * @generated from protobuf field: optional CMsgHeroSelectionMatchInfo hero_roster = 3;
   */
  hero_roster?: CMsgHeroSelectionMatchInfo;
}
/**
 * @generated from protobuf message CMsgClientToGCPartySetReadyStateResponse
 */
export interface CMsgClientToGCPartySetReadyStateResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCPartySetReadyStateResponse.EResponse result = 1;
   */
  result?: CMsgClientToGCPartySetReadyStateResponse_EResponse;
}
/**
 * @generated from protobuf enum CMsgClientToGCPartySetReadyStateResponse.EResponse
 */
export enum CMsgClientToGCPartySetReadyStateResponse_EResponse {
  /**
   * @generated from protobuf enum value: k_eInternalError = 0;
   */
  k_eInternalError = 0,
  /**
   * @generated from protobuf enum value: k_eSuccess = 1;
   */
  k_eSuccess = 1,
  /**
   * @generated from protobuf enum value: k_eInvalidPermissions = 2;
   */
  k_eInvalidPermissions = 2,
  /**
   * @generated from protobuf enum value: k_eDisabled = 3;
   */
  k_eDisabled = 3,
  /**
   * @generated from protobuf enum value: k_eTooBusy = 4;
   */
  k_eTooBusy = 4,
  /**
   * @generated from protobuf enum value: k_eRateLimited = 5;
   */
  k_eRateLimited = 5,
  /**
   * @generated from protobuf enum value: k_eInvalidRoster = 6;
   */
  k_eInvalidRoster = 6,
  /**
   * @generated from protobuf enum value: k_eMatchForming = 7;
   */
  k_eMatchForming = 7,
  /**
   * @generated from protobuf enum value: k_eInvalidGroupRoster = 8;
   */
  k_eInvalidGroupRoster = 8,
  /**
   * @generated from protobuf enum value: k_eInMatch = 9;
   */
  k_eInMatch = 9,
  /**
   * @generated from protobuf enum value: k_eHeroesNotUnlocked = 10;
   */
  k_eHeroesNotUnlocked = 10,
  /**
   * @generated from protobuf enum value: k_eModeLocked = 11;
   */
  k_eModeLocked = 11,
  /**
   * @generated from protobuf enum value: k_eModeBanned = 12;
   */
  k_eModeBanned = 12,
}
/**
 * @generated from protobuf message CMsgClientToGCDevSetMMBias
 */
export interface CMsgClientToGCDevSetMMBias {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  account_id?: number;
  /**
   * @generated from protobuf field: optional uint32 value = 2;
   */
  value?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCGetMatchHistory
 */
export interface CMsgClientToGCGetMatchHistory {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  account_id?: number;
  /**
   * @generated from protobuf field: optional uint64 continue_cursor = 2;
   */
  continue_cursor?: bigint;
}
/**
 * @generated from protobuf message CMsgClientToGCGetMatchHistoryResponse
 */
export interface CMsgClientToGCGetMatchHistoryResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCGetMatchHistoryResponse.EResult result = 1;
   */
  result?: CMsgClientToGCGetMatchHistoryResponse_EResult;
  /**
   * @generated from protobuf field: optional uint64 continue_cursor = 2;
   */
  continue_cursor?: bigint;
  /**
   * @generated from protobuf field: repeated CMsgClientToGCGetMatchHistoryResponse.Match matches = 3;
   */
  matches: CMsgClientToGCGetMatchHistoryResponse_Match[];
}
/**
 * @generated from protobuf message CMsgClientToGCGetMatchHistoryResponse.Match
 */
export interface CMsgClientToGCGetMatchHistoryResponse_Match {
  /**
   * @generated from protobuf field: optional uint64 match_id = 1;
   */
  match_id?: bigint;
  /**
   * @generated from protobuf field: optional uint32 hero_id = 2;
   */
  hero_id?: number;
  /**
   * @generated from protobuf field: optional uint32 match_duration_s = 3;
   */
  match_duration_s?: number;
  /**
   * @generated from protobuf field: optional uint32 start_time = 4;
   */
  start_time?: number;
  /**
   * @generated from protobuf field: optional uint32 match_result = 5;
   */
  match_result?: number;
  /**
   * @generated from protobuf field: optional ECitadelLobbyTeam player_team = 6;
   */
  player_team?: ECitadelLobbyTeam;
  /**
   * @generated from protobuf field: optional uint32 player_kills = 7;
   */
  player_kills?: number;
  /**
   * @generated from protobuf field: optional uint32 player_deaths = 8;
   */
  player_deaths?: number;
  /**
   * @generated from protobuf field: optional uint32 player_assists = 9;
   */
  player_assists?: number;
  /**
   * @generated from protobuf field: optional uint32 last_hits = 11;
   */
  last_hits?: number;
  /**
   * @generated from protobuf field: optional uint32 denies = 12;
   */
  denies?: number;
  /**
   * @generated from protobuf field: optional uint32 hero_level = 13;
   */
  hero_level?: number;
  /**
   * @generated from protobuf field: optional uint32 net_worth = 14;
   */
  net_worth?: number;
  /**
   * @generated from protobuf field: optional uint64 objectives_mask_team0 = 15;
   */
  objectives_mask_team0?: bigint;
  /**
   * @generated from protobuf field: optional uint64 objectives_mask_team1 = 16;
   */
  objectives_mask_team1?: bigint;
  /**
   * @generated from protobuf field: optional bool team_abandoned = 17;
   */
  team_abandoned?: boolean;
  /**
   * @generated from protobuf field: optional uint32 abandoned_time_s = 18;
   */
  abandoned_time_s?: number;
}
/**
 * @generated from protobuf enum CMsgClientToGCGetMatchHistoryResponse.EResult
 */
export enum CMsgClientToGCGetMatchHistoryResponse_EResult {
  /**
   * @generated from protobuf enum value: k_eResult_InternalError = 0;
   */
  k_eResult_InternalError = 0,
  /**
   * @generated from protobuf enum value: k_eResult_Success = 1;
   */
  k_eResult_Success = 1,
  /**
   * @generated from protobuf enum value: k_eResult_InvalidPermission = 2;
   */
  k_eResult_InvalidPermission = 2,
  /**
   * @generated from protobuf enum value: k_eResult_TemporarilyDisabled = 3;
   */
  k_eResult_TemporarilyDisabled = 3,
  /**
   * @generated from protobuf enum value: k_eResult_TooBusy = 4;
   */
  k_eResult_TooBusy = 4,
  /**
   * @generated from protobuf enum value: k_eResult_RateLimited = 5;
   */
  k_eResult_RateLimited = 5,
}
/**
 * @generated from protobuf message CMsgClientToGCSpectateUser
 */
export interface CMsgClientToGCSpectateUser {
  /**
   * @generated from protobuf field: optional uint32 spectate_account_id = 1;
   */
  spectate_account_id?: number;
  /**
   * @generated from protobuf field: optional ECitadelRegionMode region_mode = 2;
   */
  region_mode?: ECitadelRegionMode;
  /**
   * @generated from protobuf field: optional uint32 client_version = 3;
   */
  client_version?: number;
  /**
   * @generated from protobuf field: optional EGCPlatform client_platform = 4;
   */
  client_platform?: EGCPlatform;
}
/**
 * @generated from protobuf message CMsgClientToGCSpectateUserResponse
 */
export interface CMsgClientToGCSpectateUserResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCSpectateUserResponse.EResponse result = 1;
   */
  result?: CMsgClientToGCSpectateUserResponse_EResponse;
  /**
   * @generated from protobuf field: optional fixed64 server_steam_id = 3;
   */
  server_steam_id?: bigint;
  /**
   * @generated from protobuf field: optional bytes sdr_key = 4;
   */
  sdr_key?: Uint8Array;
  /**
   * @generated from protobuf field: optional uint32 udp_connect_ip = 5;
   */
  udp_connect_ip?: number;
  /**
   * @generated from protobuf field: optional uint32 udp_connect_port = 6;
   */
  udp_connect_port?: number;
  /**
   * @generated from protobuf field: optional fixed64 lobby_id = 7;
   */
  lobby_id?: bigint;
  /**
   * @generated from protobuf field: optional string client_broadcast_url = 8;
   */
  client_broadcast_url?: string;
}
/**
 * @generated from protobuf enum CMsgClientToGCSpectateUserResponse.EResponse
 */
export enum CMsgClientToGCSpectateUserResponse_EResponse {
  /**
   * @generated from protobuf enum value: k_eInternalError = 0;
   */
  k_eInternalError = 0,
  /**
   * @generated from protobuf enum value: k_eSuccess = 1;
   */
  k_eSuccess = 1,
  /**
   * @generated from protobuf enum value: k_eDisabled = 2;
   */
  k_eDisabled = 2,
  /**
   * @generated from protobuf enum value: k_eTooBusy = 3;
   */
  k_eTooBusy = 3,
  /**
   * @generated from protobuf enum value: k_eRateLimited = 4;
   */
  k_eRateLimited = 4,
  /**
   * @generated from protobuf enum value: k_eNotInGame = 5;
   */
  k_eNotInGame = 5,
  /**
   * @generated from protobuf enum value: k_eDisabledForGame = 6;
   */
  k_eDisabledForGame = 6,
  /**
   * @generated from protobuf enum value: k_eServerFull = 7;
   */
  k_eServerFull = 7,
  /**
   * @generated from protobuf enum value: k_eNotFriends = 8;
   */
  k_eNotFriends = 8,
  /**
   * @generated from protobuf enum value: k_eRegionInfoNotProvided = 9;
   */
  k_eRegionInfoNotProvided = 9,
  /**
   * @generated from protobuf enum value: k_eDurationControlBlocked = 10;
   */
  k_eDurationControlBlocked = 10,
  /**
   * @generated from protobuf enum value: k_eInvalidClientVersion = 11;
   */
  k_eInvalidClientVersion = 11,
  /**
   * @generated from protobuf enum value: k_eInvalidRegion = 12;
   */
  k_eInvalidRegion = 12,
}
/**
 * @generated from protobuf message CMsgClientToGCSpectateLobby
 */
export interface CMsgClientToGCSpectateLobby {
  /**
   * @generated from protobuf field: optional uint64 lobby_id = 1;
   */
  lobby_id?: bigint;
  /**
   * @generated from protobuf field: optional ECitadelRegionMode region_mode = 2;
   */
  region_mode?: ECitadelRegionMode;
  /**
   * @generated from protobuf field: optional uint32 client_version = 3;
   */
  client_version?: number;
  /**
   * @generated from protobuf field: optional EGCPlatform client_platform = 4;
   */
  client_platform?: EGCPlatform;
  /**
   * @generated from protobuf field: optional uint64 match_id = 5;
   */
  match_id?: bigint;
}
/**
 * @generated from protobuf message CMsgClientToGCSpectateLobbyResponse
 */
export interface CMsgClientToGCSpectateLobbyResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCSpectateUserResponse result = 1;
   */
  result?: CMsgClientToGCSpectateUserResponse;
}
/**
 * @generated from protobuf message CMsgClientToGCGetProfileCard
 */
export interface CMsgClientToGCGetProfileCard {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  account_id?: number;
  /**
   * @generated from protobuf field: optional bool dev_access_hint = 2;
   */
  dev_access_hint?: boolean;
  /**
   * @generated from protobuf field: optional bool friend_access_hint = 3;
   */
  friend_access_hint?: boolean;
}
/**
 * @generated from protobuf message CMsgCitadelProfileCard
 */
export interface CMsgCitadelProfileCard {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  account_id?: number;
  /**
   * @generated from protobuf field: repeated CMsgCitadelProfileCard.Slot slots = 2;
   */
  slots: CMsgCitadelProfileCard_Slot[];
}
/**
 * @generated from protobuf message CMsgCitadelProfileCard.Slot
 */
export interface CMsgCitadelProfileCard_Slot {
  /**
   * @generated from protobuf field: optional uint32 slot_id = 1;
   */
  slot_id?: number;
  /**
   * @generated from protobuf field: optional CMsgCitadelProfileCard.Slot.Stat stat = 2;
   */
  stat?: CMsgCitadelProfileCard_Slot_Stat;
  /**
   * @generated from protobuf field: optional CMsgCitadelProfileCard.Slot.Hero hero = 3;
   */
  hero?: CMsgCitadelProfileCard_Slot_Hero;
}
/**
 * @generated from protobuf message CMsgCitadelProfileCard.Slot.Stat
 */
export interface CMsgCitadelProfileCard_Slot_Stat {
  /**
   * @generated from protobuf field: optional CMsgCitadelProfileCard.EStatID stat_id = 1;
   */
  stat_id?: CMsgCitadelProfileCard_EStatID;
  /**
   * @generated from protobuf field: optional uint32 stat_score = 2;
   */
  stat_score?: number;
}
/**
 * @generated from protobuf message CMsgCitadelProfileCard.Slot.Hero
 */
export interface CMsgCitadelProfileCard_Slot_Hero {
  /**
   * @generated from protobuf field: optional uint32 hero_id = 1;
   */
  hero_id?: number;
  /**
   * @generated from protobuf field: optional uint32 hero_wins = 2;
   */
  hero_wins?: number;
  /**
   * @generated from protobuf field: optional uint32 hero_kills = 3;
   */
  hero_kills?: number;
}
/**
 * @generated from protobuf enum CMsgCitadelProfileCard.EStatID
 */
export enum CMsgCitadelProfileCard_EStatID {
  /**
   * @generated from protobuf enum value: k_eStat_Invalid = 0;
   */
  k_eStat_Invalid = 0,
  /**
   * @generated from protobuf enum value: k_eStat_Wins = 1;
   */
  k_eStat_Wins = 1,
  /**
   * @generated from protobuf enum value: k_eStat_Kills = 2;
   */
  k_eStat_Kills = 2,
  /**
   * @generated from protobuf enum value: k_eStat_GamesPlayed = 3;
   */
  k_eStat_GamesPlayed = 3,
}
/**
 * @generated from protobuf message CMsgClientToGCUpdateRoster
 */
export interface CMsgClientToGCUpdateRoster {
  /**
   * @generated from protobuf field: optional CMsgHeroSelectionMatchInfo heroes = 1;
   */
  heroes?: CMsgHeroSelectionMatchInfo;
  /**
   * @generated from protobuf field: optional ECitadelGameMode game_mode = 2;
   */
  game_mode?: ECitadelGameMode;
  /**
   * @generated from protobuf field: optional ECitadelMatchMode match_mode = 3;
   */
  match_mode?: ECitadelMatchMode;
  /**
   * @generated from protobuf field: optional bool solo_match = 4;
   */
  solo_match?: boolean;
}
/**
 * @generated from protobuf message CMsgClientToGCUpdateRosterResponse
 */
export interface CMsgClientToGCUpdateRosterResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCUpdateRosterResponse.EResponse result = 1;
   */
  result?: CMsgClientToGCUpdateRosterResponse_EResponse;
}
/**
 * @generated from protobuf enum CMsgClientToGCUpdateRosterResponse.EResponse
 */
export enum CMsgClientToGCUpdateRosterResponse_EResponse {
  /**
   * @generated from protobuf enum value: k_eInternalError = 0;
   */
  k_eInternalError = 0,
  /**
   * @generated from protobuf enum value: k_eSuccess = 1;
   */
  k_eSuccess = 1,
  /**
   * @generated from protobuf enum value: k_eDisabled = 2;
   */
  k_eDisabled = 2,
  /**
   * @generated from protobuf enum value: k_eTooBusy = 3;
   */
  k_eTooBusy = 3,
  /**
   * @generated from protobuf enum value: k_eRateLimited = 4;
   */
  k_eRateLimited = 4,
  /**
   * @generated from protobuf enum value: k_eMMBusy = 5;
   */
  k_eMMBusy = 5,
  /**
   * @generated from protobuf enum value: k_eInvalidHeroSelection = 6;
   */
  k_eInvalidHeroSelection = 6,
  /**
   * @generated from protobuf enum value: k_eHeroesNotUnlocked = 7;
   */
  k_eHeroesNotUnlocked = 7,
}
/**
 * @generated from protobuf message CMsgClientToGCGetAccountStats
 */
export interface CMsgClientToGCGetAccountStats {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  account_id?: number;
  /**
   * @generated from protobuf field: optional bool dev_access_hint = 2;
   */
  dev_access_hint?: boolean;
  /**
   * @generated from protobuf field: optional bool friend_access_hint = 3;
   */
  friend_access_hint?: boolean;
}
/**
 * @generated from protobuf message CMsgClientToGCGetAccountStatsResponse
 */
export interface CMsgClientToGCGetAccountStatsResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCGetAccountStatsResponse.EResult result = 1;
   */
  result?: CMsgClientToGCGetAccountStatsResponse_EResult;
  /**
   * @generated from protobuf field: optional CMsgAccountStats stats = 2;
   */
  stats?: CMsgAccountStats;
}
/**
 * @generated from protobuf enum CMsgClientToGCGetAccountStatsResponse.EResult
 */
export enum CMsgClientToGCGetAccountStatsResponse_EResult {
  /**
   * @generated from protobuf enum value: k_eInternalError = 0;
   */
  k_eInternalError = 0,
  /**
   * @generated from protobuf enum value: k_eSuccess = 1;
   */
  k_eSuccess = 1,
  /**
   * @generated from protobuf enum value: k_eDisabled = 2;
   */
  k_eDisabled = 2,
  /**
   * @generated from protobuf enum value: k_eTooBusy = 3;
   */
  k_eTooBusy = 3,
  /**
   * @generated from protobuf enum value: k_eRateLimited = 4;
   */
  k_eRateLimited = 4,
  /**
   * @generated from protobuf enum value: k_eInvalidPermissions = 5;
   */
  k_eInvalidPermissions = 5,
}
/**
 * @generated from protobuf message CMsgClientToGCGetMatchMetaData
 */
export interface CMsgClientToGCGetMatchMetaData {
  /**
   * @generated from protobuf field: optional uint64 match_id = 1;
   */
  match_id?: bigint;
  /**
   * @generated from protobuf field: optional uint32 metadata_salt = 3;
   */
  metadata_salt?: number;
  /**
   * @generated from protobuf field: optional uint32 target_account_id = 4;
   */
  target_account_id?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCGetMatchMetaDataResponse
 */
export interface CMsgClientToGCGetMatchMetaDataResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCGetMatchMetaDataResponse.EResult result = 1;
   */
  result?: CMsgClientToGCGetMatchMetaDataResponse_EResult;
  /**
   * @generated from protobuf field: optional uint32 replay_salt = 2;
   */
  replay_salt?: number;
  /**
   * @generated from protobuf field: optional uint32 metadata_salt = 3;
   */
  metadata_salt?: number;
  /**
   * @generated from protobuf field: optional uint32 replay_valid_through = 4;
   */
  replay_valid_through?: number;
  /**
   * @generated from protobuf field: optional uint32 cluster_id = 5;
   */
  cluster_id?: number;
  /**
   * @generated from protobuf field: optional uint32 replay_processing_through = 6;
   */
  replay_processing_through?: number;
}
/**
 * @generated from protobuf enum CMsgClientToGCGetMatchMetaDataResponse.EResult
 */
export enum CMsgClientToGCGetMatchMetaDataResponse_EResult {
  /**
   * @generated from protobuf enum value: k_eResult_InternalError = 0;
   */
  k_eResult_InternalError = 0,
  /**
   * @generated from protobuf enum value: k_eResult_Success = 1;
   */
  k_eResult_Success = 1,
  /**
   * @generated from protobuf enum value: k_eResult_InvalidPermission = 2;
   */
  k_eResult_InvalidPermission = 2,
  /**
   * @generated from protobuf enum value: k_eResult_TemporarilyDisabled = 3;
   */
  k_eResult_TemporarilyDisabled = 3,
  /**
   * @generated from protobuf enum value: k_eResult_TooBusy = 4;
   */
  k_eResult_TooBusy = 4,
  /**
   * @generated from protobuf enum value: k_eResult_RateLimited = 5;
   */
  k_eResult_RateLimited = 5,
  /**
   * @generated from protobuf enum value: k_eResult_InvalidMatch = 6;
   */
  k_eResult_InvalidMatch = 6,
  /**
   * @generated from protobuf enum value: k_eResult_MatchInFlight = 7;
   */
  k_eResult_MatchInFlight = 7,
}
/**
 * @generated from protobuf message CMsgGCToClientDevAnnouncements
 */
export interface CMsgGCToClientDevAnnouncements {
  /**
   * @generated from protobuf field: repeated CMsgGCToClientDevAnnouncements.Announcement announcements = 1;
   */
  announcements: CMsgGCToClientDevAnnouncements_Announcement[];
}
/**
 * @generated from protobuf message CMsgGCToClientDevAnnouncements.Announcement
 */
export interface CMsgGCToClientDevAnnouncements_Announcement {
  /**
   * @generated from protobuf field: optional uint32 priority = 1;
   */
  priority?: number;
  /**
   * @generated from protobuf field: optional string title = 2;
   */
  title?: string;
  /**
   * @generated from protobuf field: optional string message = 3;
   */
  message?: string;
  /**
   * @generated from protobuf field: optional string url = 4;
   */
  url?: string;
  /**
   * @generated from protobuf field: optional uint32 unique_id = 5;
   */
  unique_id?: number;
  /**
   * @generated from protobuf field: optional uint32 posted_time = 6;
   */
  posted_time?: number;
  /**
   * @generated from protobuf field: optional string patch_version = 7;
   */
  patch_version?: string;
}
/**
 * @generated from protobuf message CMsgClientToGCModifyDevAnnouncements
 */
export interface CMsgClientToGCModifyDevAnnouncements {
  /**
   * @generated from protobuf field: optional CMsgClientToGCModifyDevAnnouncements.EOperation operation = 1;
   */
  operation?: CMsgClientToGCModifyDevAnnouncements_EOperation;
  /**
   * @generated from protobuf field: optional uint32 target_id = 2;
   */
  target_id?: number;
  /**
   * @generated from protobuf field: optional uint32 priority = 3;
   */
  priority?: number;
  /**
   * @generated from protobuf field: optional string title = 4;
   */
  title?: string;
  /**
   * @generated from protobuf field: optional string message = 5;
   */
  message?: string;
  /**
   * @generated from protobuf field: optional string url = 6;
   */
  url?: string;
  /**
   * @generated from protobuf field: optional string patch_version = 7;
   */
  patch_version?: string;
}
/**
 * @generated from protobuf enum CMsgClientToGCModifyDevAnnouncements.EOperation
 */
export enum CMsgClientToGCModifyDevAnnouncements_EOperation {
  /**
   * @generated from protobuf enum value: k_eCreate = 0;
   */
  k_eCreate = 0,
  /**
   * @generated from protobuf enum value: k_eUpdate = 1;
   */
  k_eUpdate = 1,
  /**
   * @generated from protobuf enum value: k_eDelete = 2;
   */
  k_eDelete = 2,
}
/**
 * @generated from protobuf message CMsgClientToGCModifyDevAnnouncementsResponse
 */
export interface CMsgClientToGCModifyDevAnnouncementsResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCModifyDevAnnouncementsResponse.EResult result = 1;
   */
  result?: CMsgClientToGCModifyDevAnnouncementsResponse_EResult;
}
/**
 * @generated from protobuf enum CMsgClientToGCModifyDevAnnouncementsResponse.EResult
 */
export enum CMsgClientToGCModifyDevAnnouncementsResponse_EResult {
  /**
   * @generated from protobuf enum value: k_eSuccess = 0;
   */
  k_eSuccess = 0,
  /**
   * @generated from protobuf enum value: k_eInvalidPermission = 1;
   */
  k_eInvalidPermission = 1,
  /**
   * @generated from protobuf enum value: k_eInvalidTarget = 2;
   */
  k_eInvalidTarget = 2,
  /**
   * @generated from protobuf enum value: k_eInternalError = 3;
   */
  k_eInternalError = 3,
}
/**
 * @generated from protobuf message CMsgClientToGCDevAction
 */
export interface CMsgClientToGCDevAction {
  /**
   * @generated from protobuf field: optional CMsgClientToGCDevAction.EAction action = 1;
   */
  action?: CMsgClientToGCDevAction_EAction;
  /**
   * @generated from protobuf field: optional uint32 account_id = 2;
   */
  account_id?: number;
  /**
   * @generated from protobuf field: optional uint32 uint_value = 3;
   */
  uint_value?: number;
  /**
   * @generated from protobuf field: optional int32 int_value = 4;
   */
  int_value?: number;
  /**
   * @generated from protobuf field: optional bool bool_value = 5;
   */
  bool_value?: boolean;
  /**
   * @generated from protobuf field: optional string str_value = 6;
   */
  str_value?: string;
}
/**
 * @generated from protobuf enum CMsgClientToGCDevAction.EAction
 */
export enum CMsgClientToGCDevAction_EAction {
  /**
   * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
   */
  UNSPECIFIED$ = 0,
  /**
   * @generated from protobuf enum value: k_eSetDeveloper = 1;
   */
  k_eSetDeveloper = 1,
  /**
   * @generated from protobuf enum value: k_eSetMMR = 2;
   */
  k_eSetMMR = 2,
  /**
   * @generated from protobuf enum value: k_eSetMMRUncertainty = 3;
   */
  k_eSetMMRUncertainty = 3,
  /**
   * @generated from protobuf enum value: k_eSetHeroStatus = 4;
   */
  k_eSetHeroStatus = 4,
  /**
   * @generated from protobuf enum value: k_eSetPermission = 5;
   */
  k_eSetPermission = 5,
  /**
   * @generated from protobuf enum value: k_eSetNewPlayerProgress = 6;
   */
  k_eSetNewPlayerProgress = 6,
  /**
   * @generated from protobuf enum value: k_eForceAccountStorage = 7;
   */
  k_eForceAccountStorage = 7,
  /**
   * @generated from protobuf enum value: k_eBookReset = 9;
   */
  k_eBookReset = 9,
  /**
   * @generated from protobuf enum value: k_eBookXPGrant = 10;
   */
  k_eBookXPGrant = 10,
  /**
   * @generated from protobuf enum value: k_eBanAccount = 11;
   */
  k_eBanAccount = 11,
}
/**
 * @generated from protobuf message CMsgClientToGCDevActionResponse
 */
export interface CMsgClientToGCDevActionResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCDevActionResponse.EResult result = 1;
   */
  result?: CMsgClientToGCDevActionResponse_EResult;
}
/**
 * @generated from protobuf enum CMsgClientToGCDevActionResponse.EResult
 */
export enum CMsgClientToGCDevActionResponse_EResult {
  /**
   * @generated from protobuf enum value: k_eSuccess = 0;
   */
  k_eSuccess = 0,
  /**
   * @generated from protobuf enum value: k_eInvalidPermission = 1;
   */
  k_eInvalidPermission = 1,
  /**
   * @generated from protobuf enum value: k_eInvalidTarget = 2;
   */
  k_eInvalidTarget = 2,
  /**
   * @generated from protobuf enum value: k_eInternalError = 3;
   */
  k_eInternalError = 3,
}
/**
 * @generated from protobuf message CMsgClientToGCRecordClientEvents
 */
export interface CMsgClientToGCRecordClientEvents {
  /**
   * @generated from protobuf field: repeated CMsgClientToGCRecordClientEvents.Event events = 1;
   */
  events: CMsgClientToGCRecordClientEvents_Event[];
  /**
   * @generated from protobuf field: optional uint32 client_run_token = 2;
   */
  client_run_token?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCRecordClientEvents.Event
 */
export interface CMsgClientToGCRecordClientEvents_Event {
  /**
   * @generated from protobuf field: optional uint32 time_stamp = 1;
   */
  time_stamp?: number;
  /**
   * @generated from protobuf field: optional ECitadelClientAccountEvent event_id = 2;
   */
  event_id?: ECitadelClientAccountEvent;
  /**
   * @generated from protobuf field: optional uint64 event_data = 3;
   */
  event_data?: bigint;
  /**
   * @generated from protobuf field: optional uint32 client_event_index = 4;
   */
  client_event_index?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCRecordClientEventsResponse
 */
export interface CMsgClientToGCRecordClientEventsResponse {
  /**
   * @generated from protobuf field: optional bool success = 1;
   */
  success?: boolean;
}
/**
 * @generated from protobuf message CMsgClientToGCSetNewPlayerProgress
 */
export interface CMsgClientToGCSetNewPlayerProgress {
  /**
   * @generated from protobuf field: optional ECitadelNewPlayerProgressFlag flag = 1;
   */
  flag?: ECitadelNewPlayerProgressFlag;
}
/**
 * @generated from protobuf message CMsgClientToGCSetNewPlayerProgressResponse
 */
export interface CMsgClientToGCSetNewPlayerProgressResponse {
  /**
   * @generated from protobuf field: optional bool success = 1;
   */
  success?: boolean;
}
/**
 * @generated from protobuf message CMsgClientToGCUpdateAccountSync
 */
export interface CMsgClientToGCUpdateAccountSync {
  /**
   * @generated from protobuf field: repeated uint32 ids = 1;
   */
  ids: number[];
  /**
   * @generated from protobuf field: repeated uint32 values = 2;
   */
  values: number[];
}
/**
 * @generated from protobuf message CMsgClientToGCUpdateAccountSyncResponse
 */
export interface CMsgClientToGCUpdateAccountSyncResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCUpdateAccountSyncResponse.EResponse result = 1;
   */
  result?: CMsgClientToGCUpdateAccountSyncResponse_EResponse;
}
/**
 * @generated from protobuf enum CMsgClientToGCUpdateAccountSyncResponse.EResponse
 */
export enum CMsgClientToGCUpdateAccountSyncResponse_EResponse {
  /**
   * @generated from protobuf enum value: k_eInternalError = 0;
   */
  k_eInternalError = 0,
  /**
   * @generated from protobuf enum value: k_eSuccess = 1;
   */
  k_eSuccess = 1,
  /**
   * @generated from protobuf enum value: k_eDisabled = 2;
   */
  k_eDisabled = 2,
  /**
   * @generated from protobuf enum value: k_eTooBusy = 3;
   */
  k_eTooBusy = 3,
  /**
   * @generated from protobuf enum value: k_eInvalidMessage = 4;
   */
  k_eInvalidMessage = 4,
}
/**
 * @generated from protobuf message CMsgClientToGCGetHeroChoice
 */
export interface CMsgClientToGCGetHeroChoice {}
/**
 * @generated from protobuf message CMsgClientToGCGetHeroChoiceResponse
 */
export interface CMsgClientToGCGetHeroChoiceResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCGetHeroChoiceResponse.EResult result = 1;
   */
  result?: CMsgClientToGCGetHeroChoiceResponse_EResult;
  /**
   * @generated from protobuf field: repeated CMsgClientToGCGetHeroChoiceResponse.Hero hero_selections = 2;
   */
  hero_selections: CMsgClientToGCGetHeroChoiceResponse_Hero[];
  /**
   * @generated from protobuf field: optional uint32 hero_choice_id = 3;
   */
  hero_choice_id?: number;
  /**
   * @generated from protobuf field: optional uint32 select_count = 4;
   */
  select_count?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCGetHeroChoiceResponse.Hero
 */
export interface CMsgClientToGCGetHeroChoiceResponse_Hero {
  /**
   * @generated from protobuf field: optional uint32 hero_id = 1;
   */
  hero_id?: number;
}
/**
 * @generated from protobuf enum CMsgClientToGCGetHeroChoiceResponse.EResult
 */
export enum CMsgClientToGCGetHeroChoiceResponse_EResult {
  /**
   * @generated from protobuf enum value: k_eSuccess = 0;
   */
  k_eSuccess = 0,
  /**
   * @generated from protobuf enum value: k_eNoChoices = 1;
   */
  k_eNoChoices = 1,
  /**
   * @generated from protobuf enum value: k_eInvalidTarget = 2;
   */
  k_eInvalidTarget = 2,
  /**
   * @generated from protobuf enum value: k_eInternalError = 3;
   */
  k_eInternalError = 3,
  /**
   * @generated from protobuf enum value: k_eDisabled = 4;
   */
  k_eDisabled = 4,
  /**
   * @generated from protobuf enum value: k_eTooBusy = 5;
   */
  k_eTooBusy = 5,
  /**
   * @generated from protobuf enum value: k_eChoiceClosed = 6;
   */
  k_eChoiceClosed = 6,
}
/**
 * @generated from protobuf message CMsgClientToGCUnlockHero
 */
export interface CMsgClientToGCUnlockHero {
  /**
   * @generated from protobuf field: repeated uint32 hero_ids = 1;
   */
  hero_ids: number[];
  /**
   * @generated from protobuf field: optional uint32 hero_choice_id = 2;
   */
  hero_choice_id?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCUnlockHeroResponse
 */
export interface CMsgClientToGCUnlockHeroResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCUnlockHeroResponse.EResult result = 1;
   */
  result?: CMsgClientToGCUnlockHeroResponse_EResult;
}
/**
 * @generated from protobuf enum CMsgClientToGCUnlockHeroResponse.EResult
 */
export enum CMsgClientToGCUnlockHeroResponse_EResult {
  /**
   * @generated from protobuf enum value: k_eSuccess = 0;
   */
  k_eSuccess = 0,
  /**
   * @generated from protobuf enum value: k_eInternalError = 1;
   */
  k_eInternalError = 1,
  /**
   * @generated from protobuf enum value: k_eInvalidHero = 2;
   */
  k_eInvalidHero = 2,
  /**
   * @generated from protobuf enum value: k_eOutOfSync = 3;
   */
  k_eOutOfSync = 3,
  /**
   * @generated from protobuf enum value: k_eDisabled = 4;
   */
  k_eDisabled = 4,
  /**
   * @generated from protobuf enum value: k_eTooBusy = 5;
   */
  k_eTooBusy = 5,
}
/**
 * @generated from protobuf message CMsgAccountBook
 */
export interface CMsgAccountBook {
  /**
   * @generated from protobuf field: optional uint32 book_id = 1;
   */
  book_id?: number;
  /**
   * @generated from protobuf field: optional uint32 book_xp = 2;
   */
  book_xp?: number;
  /**
   * @generated from protobuf field: optional uint32 spent_xp = 3;
   */
  spent_xp?: number;
  /**
   * @generated from protobuf field: repeated CMsgAccountBook.Unlock unlocks = 4;
   */
  unlocks: CMsgAccountBook_Unlock[];
}
/**
 * @generated from protobuf message CMsgAccountBook.Unlock
 */
export interface CMsgAccountBook_Unlock {
  /**
   * @generated from protobuf field: optional uint32 unlock_id = 1;
   */
  unlock_id?: number;
  /**
   * @generated from protobuf field: optional uint32 flags = 2;
   */
  flags?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCBookUnlock
 */
export interface CMsgClientToGCBookUnlock {
  /**
   * @generated from protobuf field: optional uint32 book_id = 1;
   */
  book_id?: number;
  /**
   * @generated from protobuf field: optional uint32 unlock_id = 2;
   */
  unlock_id?: number;
  /**
   * @generated from protobuf field: optional uint32 expected_cost = 3;
   */
  expected_cost?: number;
  /**
   * @generated from protobuf field: optional uint32 client_version = 4;
   */
  client_version?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCBookUnlockResponse
 */
export interface CMsgClientToGCBookUnlockResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCBookUnlockResponse.EResult result = 1;
   */
  result?: CMsgClientToGCBookUnlockResponse_EResult;
  /**
   * @generated from protobuf field: optional CMsgAccountBook updated_book = 2;
   */
  updated_book?: CMsgAccountBook;
}
/**
 * @generated from protobuf enum CMsgClientToGCBookUnlockResponse.EResult
 */
export enum CMsgClientToGCBookUnlockResponse_EResult {
  /**
   * @generated from protobuf enum value: k_eSuccess = 0;
   */
  k_eSuccess = 0,
  /**
   * @generated from protobuf enum value: k_eInternalError = 1;
   */
  k_eInternalError = 1,
  /**
   * @generated from protobuf enum value: k_eOutOfDateClient = 2;
   */
  k_eOutOfDateClient = 2,
  /**
   * @generated from protobuf enum value: k_eInvalidFunds = 3;
   */
  k_eInvalidFunds = 3,
  /**
   * @generated from protobuf enum value: k_eDisabled = 4;
   */
  k_eDisabled = 4,
  /**
   * @generated from protobuf enum value: k_eTooBusy = 5;
   */
  k_eTooBusy = 5,
  /**
   * @generated from protobuf enum value: k_eAlreadyUnlocked = 6;
   */
  k_eAlreadyUnlocked = 6,
}
/**
 * @generated from protobuf message CMsgClientToGCGetBook
 */
export interface CMsgClientToGCGetBook {
  /**
   * @generated from protobuf field: optional uint32 book_id = 1;
   */
  book_id?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCGetBookResponse
 */
export interface CMsgClientToGCGetBookResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCGetBookResponse.EResult result = 1;
   */
  result?: CMsgClientToGCGetBookResponse_EResult;
  /**
   * @generated from protobuf field: optional CMsgAccountBook book = 2;
   */
  book?: CMsgAccountBook;
}
/**
 * @generated from protobuf enum CMsgClientToGCGetBookResponse.EResult
 */
export enum CMsgClientToGCGetBookResponse_EResult {
  /**
   * @generated from protobuf enum value: k_eSuccess = 0;
   */
  k_eSuccess = 0,
  /**
   * @generated from protobuf enum value: k_eInternalError = 1;
   */
  k_eInternalError = 1,
  /**
   * @generated from protobuf enum value: k_eInvalidBook = 2;
   */
  k_eInvalidBook = 2,
  /**
   * @generated from protobuf enum value: k_eDisabled = 3;
   */
  k_eDisabled = 3,
  /**
   * @generated from protobuf enum value: k_eTooBusy = 4;
   */
  k_eTooBusy = 4,
}
/**
 * @generated from protobuf message CMsgGCToClientBookUpdated
 */
export interface CMsgGCToClientBookUpdated {
  /**
   * @generated from protobuf field: optional CMsgAccountBook book = 1;
   */
  book?: CMsgAccountBook;
}
/**
 * @generated from protobuf message CMsgClientToGCSubmitPlaytestUser
 */
export interface CMsgClientToGCSubmitPlaytestUser {
  /**
   * @generated from protobuf field: optional string location = 3;
   */
  location?: string;
  /**
   * @generated from protobuf field: optional uint32 target_account_id = 4;
   */
  target_account_id?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCSubmitPlaytestUserResponse
 */
export interface CMsgClientToGCSubmitPlaytestUserResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCSubmitPlaytestUserResponse.EResponse response = 1;
   */
  response?: CMsgClientToGCSubmitPlaytestUserResponse_EResponse;
}
/**
 * @generated from protobuf enum CMsgClientToGCSubmitPlaytestUserResponse.EResponse
 */
export enum CMsgClientToGCSubmitPlaytestUserResponse_EResponse {
  /**
   * @generated from protobuf enum value: eResponse_Success = 0;
   */
  eResponse_Success = 0,
  /**
   * @generated from protobuf enum value: eResponse_InternalError = 1;
   */
  eResponse_InternalError = 1,
  /**
   * @generated from protobuf enum value: eResponse_InvalidFriend = 3;
   */
  eResponse_InvalidFriend = 3,
  /**
   * @generated from protobuf enum value: eResponse_NotFriendsLongEnough = 4;
   */
  eResponse_NotFriendsLongEnough = 4,
  /**
   * @generated from protobuf enum value: eResponse_AlreadyHasGame = 5;
   */
  eResponse_AlreadyHasGame = 5,
  /**
   * @generated from protobuf enum value: eResponse_LimitedUser = 6;
   */
  eResponse_LimitedUser = 6,
  /**
   * @generated from protobuf enum value: eResponse_InviteLimitReached = 7;
   */
  eResponse_InviteLimitReached = 7,
}
/**
 * @generated from protobuf message CMsgHeroBuild
 */
export interface CMsgHeroBuild {
  /**
   * @generated from protobuf field: optional uint32 hero_build_id = 1;
   */
  hero_build_id?: number;
  /**
   * @generated from protobuf field: optional uint32 hero_id = 2;
   */
  hero_id?: number;
  /**
   * @generated from protobuf field: optional uint32 author_account_id = 3;
   */
  author_account_id?: number;
  /**
   * @generated from protobuf field: optional uint32 last_updated_timestamp = 4;
   */
  last_updated_timestamp?: number;
  /**
   * @generated from protobuf field: optional string name = 5;
   */
  name?: string;
  /**
   * @generated from protobuf field: optional string description = 6;
   */
  description?: string;
  /**
   * @generated from protobuf field: optional uint32 language = 7;
   */
  language?: number;
  /**
   * @generated from protobuf field: optional uint32 version = 8;
   */
  version?: number;
  /**
   * @generated from protobuf field: optional uint32 origin_build_id = 9;
   */
  origin_build_id?: number;
  /**
   * @generated from protobuf field: optional CMsgHeroBuild.Details_V0 details = 10;
   */
  details?: CMsgHeroBuild_Details_V0;
}
/**
 * @generated from protobuf message CMsgHeroBuild.BuildModEntry
 */
export interface CMsgHeroBuild_BuildModEntry {
  /**
   * @generated from protobuf field: optional uint32 ability_id = 1;
   */
  ability_id?: number;
  /**
   * @generated from protobuf field: optional string annotation = 2;
   */
  annotation?: string;
}
/**
 * @generated from protobuf message CMsgHeroBuild.BuildModCategory
 */
export interface CMsgHeroBuild_BuildModCategory {
  /**
   * @generated from protobuf field: repeated CMsgHeroBuild.BuildModEntry mods = 1;
   */
  mods: CMsgHeroBuild_BuildModEntry[];
  /**
   * @generated from protobuf field: optional string name = 2;
   */
  name?: string;
  /**
   * @generated from protobuf field: optional string description = 3;
   */
  description?: string;
  /**
   * @generated from protobuf field: optional float width = 4;
   */
  width?: number;
  /**
   * @generated from protobuf field: optional float height = 5;
   */
  height?: number;
}
/**
 * @generated from protobuf message CMsgHeroBuild.CurrencyChange
 */
export interface CMsgHeroBuild_CurrencyChange {
  /**
   * @generated from protobuf field: optional uint32 ability_id = 1;
   */
  ability_id?: number;
  /**
   * @generated from protobuf field: optional int32 currency_type = 2;
   */
  currency_type?: number;
  /**
   * @generated from protobuf field: optional int32 delta = 3;
   */
  delta?: number;
  /**
   * @generated from protobuf field: optional string annotation = 4;
   */
  annotation?: string;
}
/**
 * @generated from protobuf message CMsgHeroBuild.AbilityOrder
 */
export interface CMsgHeroBuild_AbilityOrder {
  /**
   * @generated from protobuf field: repeated CMsgHeroBuild.CurrencyChange currency_changes = 1;
   */
  currency_changes: CMsgHeroBuild_CurrencyChange[];
}
/**
 * @generated from protobuf message CMsgHeroBuild.Details_V0
 */
export interface CMsgHeroBuild_Details_V0 {
  /**
   * @generated from protobuf field: repeated CMsgHeroBuild.BuildModCategory mod_categories = 1;
   */
  mod_categories: CMsgHeroBuild_BuildModCategory[];
  /**
   * @generated from protobuf field: optional CMsgHeroBuild.AbilityOrder ability_order = 2;
   */
  ability_order?: CMsgHeroBuild_AbilityOrder;
}
/**
 * @generated from protobuf message CMsgClientToGCUpdateHeroBuild
 */
export interface CMsgClientToGCUpdateHeroBuild {
  /**
   * @generated from protobuf field: optional CMsgHeroBuild hero_build = 1;
   */
  hero_build?: CMsgHeroBuild;
}
/**
 * @generated from protobuf message CMsgClientToGCUpdateHeroBuildResponse
 */
export interface CMsgClientToGCUpdateHeroBuildResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCUpdateHeroBuildResponse.EResponse response = 1;
   */
  response?: CMsgClientToGCUpdateHeroBuildResponse_EResponse;
  /**
   * @generated from protobuf field: optional uint32 hero_build_id = 2;
   */
  hero_build_id?: number;
  /**
   * @generated from protobuf field: optional uint32 version = 3;
   */
  version?: number;
}
/**
 * @generated from protobuf enum CMsgClientToGCUpdateHeroBuildResponse.EResponse
 */
export enum CMsgClientToGCUpdateHeroBuildResponse_EResponse {
  /**
   * @generated from protobuf enum value: k_eInternalError = 0;
   */
  k_eInternalError = 0,
  /**
   * @generated from protobuf enum value: k_eSuccess = 1;
   */
  k_eSuccess = 1,
}
/**
 * @generated from protobuf message CMsgClientToGCFindHeroBuilds
 */
export interface CMsgClientToGCFindHeroBuilds {
  /**
   * @generated from protobuf field: optional uint32 author_account_id = 1;
   */
  author_account_id?: number;
  /**
   * @generated from protobuf field: optional uint32 hero_id = 2;
   */
  hero_id?: number;
  /**
   * @generated from protobuf field: repeated int32 language = 3;
   */
  language: number[];
  /**
   * @generated from protobuf field: optional string search_text = 4;
   */
  search_text?: string;
  /**
   * @generated from protobuf field: optional uint32 hero_build_id = 5;
   */
  hero_build_id?: number;
}
/**
 * @generated from protobuf message CMsgHeroBuildPreference
 */
export interface CMsgHeroBuildPreference {
  /**
   * @generated from protobuf field: optional bool favorited = 1;
   */
  favorited?: boolean;
  /**
   * @generated from protobuf field: optional bool ignored = 2;
   */
  ignored?: boolean;
  /**
   * @generated from protobuf field: optional bool reported = 3;
   */
  reported?: boolean;
}
/**
 * @generated from protobuf message CMsgClientToGCFindHeroBuildsResponse
 */
export interface CMsgClientToGCFindHeroBuildsResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCFindHeroBuildsResponse.EResponse response = 1;
   */
  response?: CMsgClientToGCFindHeroBuildsResponse_EResponse;
  /**
   * @generated from protobuf field: repeated CMsgClientToGCFindHeroBuildsResponse.HeroBuildResult results = 2;
   */
  results: CMsgClientToGCFindHeroBuildsResponse_HeroBuildResult[];
}
/**
 * @generated from protobuf message CMsgClientToGCFindHeroBuildsResponse.HeroBuildResult
 */
export interface CMsgClientToGCFindHeroBuildsResponse_HeroBuildResult {
  /**
   * @generated from protobuf field: optional CMsgHeroBuild hero_build = 1;
   */
  hero_build?: CMsgHeroBuild;
  /**
   * @generated from protobuf field: optional CMsgHeroBuildPreference preference = 2;
   */
  preference?: CMsgHeroBuildPreference;
  /**
   * @generated from protobuf field: optional uint32 num_favorites = 3;
   */
  num_favorites?: number;
  /**
   * @generated from protobuf field: optional uint32 num_ignores = 4;
   */
  num_ignores?: number;
  /**
   * @generated from protobuf field: optional uint32 num_reports = 5;
   */
  num_reports?: number;
  /**
   * @generated from protobuf field: optional uint32 num_weekly_favorites = 6;
   */
  num_weekly_favorites?: number;
  /**
   * @generated from protobuf field: optional uint32 num_daily_favorites = 7;
   */
  num_daily_favorites?: number;
  /**
   * @generated from protobuf field: optional uint32 rollup_category = 8;
   */
  rollup_category?: number;
}
/**
 * @generated from protobuf enum CMsgClientToGCFindHeroBuildsResponse.EResponse
 */
export enum CMsgClientToGCFindHeroBuildsResponse_EResponse {
  /**
   * @generated from protobuf enum value: k_eInternalError = 0;
   */
  k_eInternalError = 0,
  /**
   * @generated from protobuf enum value: k_eSuccess = 1;
   */
  k_eSuccess = 1,
  /**
   * @generated from protobuf enum value: k_eTooBusy = 2;
   */
  k_eTooBusy = 2,
}
/**
 * @generated from protobuf message CMsgClientToGCUpdateHeroBuildPreference
 */
export interface CMsgClientToGCUpdateHeroBuildPreference {
  /**
   * @generated from protobuf field: optional uint32 hero_build_id = 1;
   */
  hero_build_id?: number;
  /**
   * @generated from protobuf field: optional CMsgHeroBuildPreference preference = 2;
   */
  preference?: CMsgHeroBuildPreference;
}
/**
 * @generated from protobuf message CMsgClientToGCUpdateHeroBuildPreferenceResponse
 */
export interface CMsgClientToGCUpdateHeroBuildPreferenceResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCUpdateHeroBuildPreferenceResponse.EResponse response = 1;
   */
  response?: CMsgClientToGCUpdateHeroBuildPreferenceResponse_EResponse;
}
/**
 * @generated from protobuf enum CMsgClientToGCUpdateHeroBuildPreferenceResponse.EResponse
 */
export enum CMsgClientToGCUpdateHeroBuildPreferenceResponse_EResponse {
  /**
   * @generated from protobuf enum value: k_eInternalError = 0;
   */
  k_eInternalError = 0,
  /**
   * @generated from protobuf enum value: k_eSuccess = 1;
   */
  k_eSuccess = 1,
}
/**
 * @generated from protobuf message CMsgClientToGCGetOldHeroBuildData
 */
export interface CMsgClientToGCGetOldHeroBuildData {
  /**
   * @generated from protobuf field: optional uint32 author_account_id = 1;
   */
  author_account_id?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCGetOldHeroBuildDataResponse
 */
export interface CMsgClientToGCGetOldHeroBuildDataResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCGetOldHeroBuildDataResponse.EResponse response = 1;
   */
  response?: CMsgClientToGCGetOldHeroBuildDataResponse_EResponse;
  /**
   * @generated from protobuf field: optional uint32 author_account_id = 2;
   */
  author_account_id?: number;
  /**
   * @generated from protobuf field: repeated CMsgClientToGCGetOldHeroBuildDataResponse.OldBuild results = 3;
   */
  results: CMsgClientToGCGetOldHeroBuildDataResponse_OldBuild[];
}
/**
 * @generated from protobuf message CMsgClientToGCGetOldHeroBuildDataResponse.OldDetails_V0
 */
export interface CMsgClientToGCGetOldHeroBuildDataResponse_OldDetails_V0 {
  /**
   * @generated from protobuf field: repeated uint32 recommended_mod_ability_ids = 1;
   */
  recommended_mod_ability_ids: number[];
}
/**
 * @generated from protobuf message CMsgClientToGCGetOldHeroBuildDataResponse.OldBuild
 */
export interface CMsgClientToGCGetOldHeroBuildDataResponse_OldBuild {
  /**
   * @generated from protobuf field: optional string name = 1;
   */
  name?: string;
  /**
   * @generated from protobuf field: optional uint32 hero_id = 2;
   */
  hero_id?: number;
  /**
   * @generated from protobuf field: optional string description = 3;
   */
  description?: string;
  /**
   * @generated from protobuf field: optional CMsgClientToGCGetOldHeroBuildDataResponse.OldDetails_V0 details = 4;
   */
  details?: CMsgClientToGCGetOldHeroBuildDataResponse_OldDetails_V0;
}
/**
 * @generated from protobuf enum CMsgClientToGCGetOldHeroBuildDataResponse.EResponse
 */
export enum CMsgClientToGCGetOldHeroBuildDataResponse_EResponse {
  /**
   * @generated from protobuf enum value: k_eInternalError = 0;
   */
  k_eInternalError = 0,
  /**
   * @generated from protobuf enum value: k_eSuccess = 1;
   */
  k_eSuccess = 1,
}
/**
 * @generated from protobuf message CMsgClientToGCReportPlayerFromMatch
 */
export interface CMsgClientToGCReportPlayerFromMatch {
  /**
   * @generated from protobuf field: optional uint64 match_id = 1;
   */
  match_id?: bigint;
  /**
   * @generated from protobuf field: optional uint32 target_account_id = 2;
   */
  target_account_id?: number;
  /**
   * @generated from protobuf field: optional CMsgClientToGCReportPlayerFromMatch.EReportType report_type = 3;
   */
  report_type?: CMsgClientToGCReportPlayerFromMatch_EReportType;
  /**
   * @generated from protobuf field: optional string report_text = 4;
   */
  report_text?: string;
}
/**
 * @generated from protobuf enum CMsgClientToGCReportPlayerFromMatch.EReportType
 */
export enum CMsgClientToGCReportPlayerFromMatch_EReportType {
  /**
   * @generated from protobuf enum value: k_eReport_None = 0;
   */
  k_eReport_None = 0,
  /**
   * @generated from protobuf enum value: k_eReport_VoiceChat = 1;
   */
  k_eReport_VoiceChat = 1,
  /**
   * @generated from protobuf enum value: k_eReport_Griefing = 2;
   */
  k_eReport_Griefing = 2,
  /**
   * @generated from protobuf enum value: k_eReport_LeftMatch = 3;
   */
  k_eReport_LeftMatch = 3,
  /**
   * @generated from protobuf enum value: k_eReport_Matchmaking = 4;
   */
  k_eReport_Matchmaking = 4,
  /**
   * @generated from protobuf enum value: k_eReport_Cheating = 5;
   */
  k_eReport_Cheating = 5,
}
/**
 * @generated from protobuf message CMsgClientToGCReportPlayerFromMatchResponse
 */
export interface CMsgClientToGCReportPlayerFromMatchResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCReportPlayerFromMatchResponse.EResponse response = 1;
   */
  response?: CMsgClientToGCReportPlayerFromMatchResponse_EResponse;
}
/**
 * @generated from protobuf enum CMsgClientToGCReportPlayerFromMatchResponse.EResponse
 */
export enum CMsgClientToGCReportPlayerFromMatchResponse_EResponse {
  /**
   * @generated from protobuf enum value: k_eInternalError = 0;
   */
  k_eInternalError = 0,
  /**
   * @generated from protobuf enum value: k_eSuccess = 1;
   */
  k_eSuccess = 1,
  /**
   * @generated from protobuf enum value: k_eRateLimited = 2;
   */
  k_eRateLimited = 2,
  /**
   * @generated from protobuf enum value: k_eAlreadyReported = 3;
   */
  k_eAlreadyReported = 3,
  /**
   * @generated from protobuf enum value: k_eDisabled = 4;
   */
  k_eDisabled = 4,
  /**
   * @generated from protobuf enum value: k_eInvalidPermissions = 5;
   */
  k_eInvalidPermissions = 5,
  /**
   * @generated from protobuf enum value: k_eReportingWindowExpired = 6;
   */
  k_eReportingWindowExpired = 6,
  /**
   * @generated from protobuf enum value: k_eTooBusy = 7;
   */
  k_eTooBusy = 7,
  /**
   * @generated from protobuf enum value: k_eBannedFromReporting = 8;
   */
  k_eBannedFromReporting = 8,
}
/**
 * @generated from protobuf message CMsgClientToGCGetAccountMatchReports
 */
export interface CMsgClientToGCGetAccountMatchReports {
  /**
   * @generated from protobuf field: optional uint64 match_id = 1;
   */
  match_id?: bigint;
}
/**
 * @generated from protobuf message CMsgClientToGCGetAccountMatchReportsResponse
 */
export interface CMsgClientToGCGetAccountMatchReportsResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCGetAccountMatchReportsResponse.EResponse response = 1;
   */
  response?: CMsgClientToGCGetAccountMatchReportsResponse_EResponse;
  /**
   * @generated from protobuf field: repeated CMsgClientToGCGetAccountMatchReportsResponse.Report reports = 2;
   */
  reports: CMsgClientToGCGetAccountMatchReportsResponse_Report[];
}
/**
 * @generated from protobuf message CMsgClientToGCGetAccountMatchReportsResponse.Report
 */
export interface CMsgClientToGCGetAccountMatchReportsResponse_Report {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  account_id?: number;
}
/**
 * @generated from protobuf enum CMsgClientToGCGetAccountMatchReportsResponse.EResponse
 */
export enum CMsgClientToGCGetAccountMatchReportsResponse_EResponse {
  /**
   * @generated from protobuf enum value: k_eInternalError = 0;
   */
  k_eInternalError = 0,
  /**
   * @generated from protobuf enum value: k_eSuccess = 1;
   */
  k_eSuccess = 1,
  /**
   * @generated from protobuf enum value: k_eDisabled = 4;
   */
  k_eDisabled = 4,
  /**
   * @generated from protobuf enum value: k_eTooBusy = 7;
   */
  k_eTooBusy = 7,
}
/**
 * @generated from protobuf message CMsgClientToGCDeleteHeroBuild
 */
export interface CMsgClientToGCDeleteHeroBuild {
  /**
   * @generated from protobuf field: optional uint32 author_account_id = 1;
   */
  author_account_id?: number;
  /**
   * @generated from protobuf field: optional uint32 hero_build_id = 2;
   */
  hero_build_id?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCDeleteHeroBuildResponse
 */
export interface CMsgClientToGCDeleteHeroBuildResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCDeleteHeroBuildResponse.EResponse response = 1;
   */
  response?: CMsgClientToGCDeleteHeroBuildResponse_EResponse;
  /**
   * @generated from protobuf field: optional uint32 builds_deleted = 2;
   */
  builds_deleted?: number;
}
/**
 * @generated from protobuf enum CMsgClientToGCDeleteHeroBuildResponse.EResponse
 */
export enum CMsgClientToGCDeleteHeroBuildResponse_EResponse {
  /**
   * @generated from protobuf enum value: k_eInternalError = 0;
   */
  k_eInternalError = 0,
  /**
   * @generated from protobuf enum value: k_eSuccess = 1;
   */
  k_eSuccess = 1,
}
/**
 * @generated from protobuf message CMsgClientToGCGetActiveMatches
 */
export interface CMsgClientToGCGetActiveMatches {}
/**
 * @generated from protobuf message CMsgClientToGCGetActiveMatchesResponse
 */
export interface CMsgClientToGCGetActiveMatchesResponse {
  /**
   * @generated from protobuf field: repeated CMsgDevMatchInfo active_matches = 1;
   */
  active_matches: CMsgDevMatchInfo[];
}
/**
 * @generated from protobuf message CMsgClientToGCGetDiscordLink
 */
export interface CMsgClientToGCGetDiscordLink {}
/**
 * @generated from protobuf message CMsgClientToGCGetDiscordLinkResponse
 */
export interface CMsgClientToGCGetDiscordLinkResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCGetDiscordLinkResponse.EResponse response = 1;
   */
  response?: CMsgClientToGCGetDiscordLinkResponse_EResponse;
  /**
   * @generated from protobuf field: optional string discord_link = 2;
   */
  discord_link?: string;
  /**
   * @generated from protobuf field: optional uint32 valid_hours = 3;
   */
  valid_hours?: number;
}
/**
 * @generated from protobuf enum CMsgClientToGCGetDiscordLinkResponse.EResponse
 */
export enum CMsgClientToGCGetDiscordLinkResponse_EResponse {
  /**
   * @generated from protobuf enum value: k_eInternalError = 0;
   */
  k_eInternalError = 0,
  /**
   * @generated from protobuf enum value: k_eSuccess = 1;
   */
  k_eSuccess = 1,
  /**
   * @generated from protobuf enum value: k_eDiscordTooBusy = 2;
   */
  k_eDiscordTooBusy = 2,
  /**
   * @generated from protobuf enum value: k_eAlreadyClaimed = 3;
   */
  k_eAlreadyClaimed = 3,
  /**
   * @generated from protobuf enum value: k_eDisabled = 4;
   */
  k_eDisabled = 4,
}
/**
 * @generated from protobuf message CMsgClientToGCGrantForumAccess
 */
export interface CMsgClientToGCGrantForumAccess {
  /**
   * @generated from protobuf field: optional string email = 1;
   */
  email?: string;
}
/**
 * @generated from protobuf message CMsgClientToGCGrantForumAccessResponse
 */
export interface CMsgClientToGCGrantForumAccessResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCGrantForumAccessResponse.EResponse response = 1;
   */
  response?: CMsgClientToGCGrantForumAccessResponse_EResponse;
  /**
   * @generated from protobuf field: optional string email = 2;
   */
  email?: string;
  /**
   * @generated from protobuf field: optional string username = 3;
   */
  username?: string;
  /**
   * @generated from protobuf field: optional string forum_password = 4;
   */
  forum_password?: string;
}
/**
 * @generated from protobuf enum CMsgClientToGCGrantForumAccessResponse.EResponse
 */
export enum CMsgClientToGCGrantForumAccessResponse_EResponse {
  /**
   * @generated from protobuf enum value: k_eInternalError = 0;
   */
  k_eInternalError = 0,
  /**
   * @generated from protobuf enum value: k_eSuccess = 1;
   */
  k_eSuccess = 1,
  /**
   * @generated from protobuf enum value: k_eAlreadyClaimed = 2;
   */
  k_eAlreadyClaimed = 2,
  /**
   * @generated from protobuf enum value: k_eDisabled = 3;
   */
  k_eDisabled = 3,
  /**
   * @generated from protobuf enum value: k_eEmailUsed = 4;
   */
  k_eEmailUsed = 4,
}
/**
 * @generated from protobuf message CMsgClientToGCModeratorRequest
 */
export interface CMsgClientToGCModeratorRequest {
  /**
   * @generated from protobuf field: optional uint32 account_id = 1;
   */
  account_id?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCModeratorRequestResponse
 */
export interface CMsgClientToGCModeratorRequestResponse {
  /**
   * @generated from protobuf field: optional bool success = 1;
   */
  success?: boolean;
  /**
   * @generated from protobuf field: repeated string response_text = 2;
   */
  response_text: string[];
}
/**
 * @generated from protobuf message CMsgClientToGCGetFriendGameStatus
 */
export interface CMsgClientToGCGetFriendGameStatus {
  /**
   * @generated from protobuf field: optional bool include_invited = 1;
   */
  include_invited?: boolean;
}
/**
 * @generated from protobuf message CMsgClientToGCGetFriendGameStatusResponse
 */
export interface CMsgClientToGCGetFriendGameStatusResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCGetFriendGameStatusResponse.EResponse response = 1;
   */
  response?: CMsgClientToGCGetFriendGameStatusResponse_EResponse;
  /**
   * @generated from protobuf field: repeated uint32 friends_played_game = 2 [packed = true];
   */
  friends_played_game: number[];
  /**
   * @generated from protobuf field: repeated uint32 friends_invited = 3 [packed = true];
   */
  friends_invited: number[];
  /**
   * @generated from protobuf field: repeated uint32 friends_invites_sent = 4 [packed = true];
   */
  friends_invites_sent: number[];
}
/**
 * @generated from protobuf enum CMsgClientToGCGetFriendGameStatusResponse.EResponse
 */
export enum CMsgClientToGCGetFriendGameStatusResponse_EResponse {
  /**
   * @generated from protobuf enum value: k_eInternalError = 0;
   */
  k_eInternalError = 0,
  /**
   * @generated from protobuf enum value: k_eSuccess = 1;
   */
  k_eSuccess = 1,
  /**
   * @generated from protobuf enum value: k_eTooBusy = 2;
   */
  k_eTooBusy = 2,
  /**
   * @generated from protobuf enum value: k_eDisabled = 3;
   */
  k_eDisabled = 3,
}
/**
 * @generated from protobuf message CMsgClientToGCUpdateSpectatorStatus
 */
export interface CMsgClientToGCUpdateSpectatorStatus {
  /**
   * @generated from protobuf field: optional fixed64 spectating_lobby_id = 1;
   */
  spectating_lobby_id?: bigint;
  /**
   * @generated from protobuf field: optional bool stopped_spectating = 2;
   */
  stopped_spectating?: boolean;
}
/**
 * @generated from protobuf message CMsgClientToGCSetRankedSchedule
 */
export interface CMsgClientToGCSetRankedSchedule {
  /**
   * @generated from protobuf field: optional ECitadelRegionMode region_mode = 1;
   */
  region_mode?: ECitadelRegionMode;
  /**
   * @generated from protobuf field: optional uint32 schedule = 2;
   */
  schedule?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCSetRankedScheduleResponse
 */
export interface CMsgClientToGCSetRankedScheduleResponse {
  /**
   * @generated from protobuf field: optional CMsgClientToGCSetRankedScheduleResponse.EResult result = 1;
   */
  result?: CMsgClientToGCSetRankedScheduleResponse_EResult;
}
/**
 * @generated from protobuf enum CMsgClientToGCSetRankedScheduleResponse.EResult
 */
export enum CMsgClientToGCSetRankedScheduleResponse_EResult {
  /**
   * @generated from protobuf enum value: k_eInternalError = 0;
   */
  k_eInternalError = 0,
  /**
   * @generated from protobuf enum value: k_eSuccess = 1;
   */
  k_eSuccess = 1,
  /**
   * @generated from protobuf enum value: k_eInCooldown = 2;
   */
  k_eInCooldown = 2,
  /**
   * @generated from protobuf enum value: k_eInvalidValue = 3;
   */
  k_eInvalidValue = 3,
  /**
   * @generated from protobuf enum value: k_eRankedNotUnlocked = 4;
   */
  k_eRankedNotUnlocked = 4,
}
/**
 * @generated from protobuf enum EGCCitadelClientMessages
 */
export enum EGCCitadelClientMessages {
  /**
   * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
   */
  UNSPECIFIED$ = 0,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCStartMatchmaking = 9010;
   */
  k_EMsgClientToGCStartMatchmaking = 9010,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCStartMatchmakingResponse = 9011;
   */
  k_EMsgClientToGCStartMatchmakingResponse = 9011,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCStopMatchmaking = 9012;
   */
  k_EMsgClientToGCStopMatchmaking = 9012,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCStopMatchmakingResponse = 9013;
   */
  k_EMsgClientToGCStopMatchmakingResponse = 9013,
  /**
   * @generated from protobuf enum value: k_EMsgGCToClientMatchmakingStopped = 9014;
   */
  k_EMsgGCToClientMatchmakingStopped = 9014,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCLeaveLobby = 9015;
   */
  k_EMsgClientToGCLeaveLobby = 9015,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCLeaveLobbyResponse = 9016;
   */
  k_EMsgClientToGCLeaveLobbyResponse = 9016,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCIsInMatchmaking = 9017;
   */
  k_EMsgClientToGCIsInMatchmaking = 9017,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCIsInMatchmakingResponse = 9018;
   */
  k_EMsgClientToGCIsInMatchmakingResponse = 9018,
  /**
   * @generated from protobuf enum value: k_EMsgGCToClientDevPlaytestStatus = 9019;
   */
  k_EMsgGCToClientDevPlaytestStatus = 9019,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCDevSetMMBias = 9023;
   */
  k_EMsgClientToGCDevSetMMBias = 9023,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCGetProfileCard = 9024;
   */
  k_EMsgClientToGCGetProfileCard = 9024,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCGetProfileCardResponse = 9025;
   */
  k_EMsgClientToGCGetProfileCardResponse = 9025,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCUpdateRoster = 9026;
   */
  k_EMsgClientToGCUpdateRoster = 9026,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCUpdateRosterResponse = 9027;
   */
  k_EMsgClientToGCUpdateRosterResponse = 9027,
  /**
   * @generated from protobuf enum value: k_EMsgGCToClientProfileCardUpdated = 9028;
   */
  k_EMsgGCToClientProfileCardUpdated = 9028,
  /**
   * @generated from protobuf enum value: k_EMsgGCToClientDevAnnouncements = 9029;
   */
  k_EMsgGCToClientDevAnnouncements = 9029,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCModifyDevAnnouncements = 9030;
   */
  k_EMsgClientToGCModifyDevAnnouncements = 9030,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCModifyDevAnnouncementsResponse = 9031;
   */
  k_EMsgClientToGCModifyDevAnnouncementsResponse = 9031,
  /**
   * @generated from protobuf enum value: k_EMsgGCToClientSDRTicket = 9100;
   */
  k_EMsgGCToClientSDRTicket = 9100,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCReplacementSDRTicket = 9101;
   */
  k_EMsgClientToGCReplacementSDRTicket = 9101,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCReplacementSDRTicketResponse = 9102;
   */
  k_EMsgClientToGCReplacementSDRTicketResponse = 9102,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCSetServerConVar = 9107;
   */
  k_EMsgClientToGCSetServerConVar = 9107,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCSetServerConVarResponse = 9108;
   */
  k_EMsgClientToGCSetServerConVarResponse = 9108,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCSpectateLobby = 9109;
   */
  k_EMsgClientToGCSpectateLobby = 9109,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCSpectateLobbyResponse = 9110;
   */
  k_EMsgClientToGCSpectateLobbyResponse = 9110,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCPostMatchSurveyResponse = 9111;
   */
  k_EMsgClientToGCPostMatchSurveyResponse = 9111,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCGetMatchHistory = 9112;
   */
  k_EMsgClientToGCGetMatchHistory = 9112,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCGetMatchHistoryResponse = 9113;
   */
  k_EMsgClientToGCGetMatchHistoryResponse = 9113,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCSpectateUser = 9116;
   */
  k_EMsgClientToGCSpectateUser = 9116,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCSpectateUserResponse = 9117;
   */
  k_EMsgClientToGCSpectateUserResponse = 9117,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCPartyCreate = 9123;
   */
  k_EMsgClientToGCPartyCreate = 9123,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCPartyCreateResponse = 9124;
   */
  k_EMsgClientToGCPartyCreateResponse = 9124,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCPartyLeave = 9125;
   */
  k_EMsgClientToGCPartyLeave = 9125,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCPartyLeaveResponse = 9126;
   */
  k_EMsgClientToGCPartyLeaveResponse = 9126,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCPartyJoin = 9127;
   */
  k_EMsgClientToGCPartyJoin = 9127,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCPartyJoinResponse = 9128;
   */
  k_EMsgClientToGCPartyJoinResponse = 9128,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCPartyAction = 9129;
   */
  k_EMsgClientToGCPartyAction = 9129,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCPartyActionResponse = 9130;
   */
  k_EMsgClientToGCPartyActionResponse = 9130,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCPartyStartMatch = 9131;
   */
  k_EMsgClientToGCPartyStartMatch = 9131,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCPartyStartMatchResponse = 9132;
   */
  k_EMsgClientToGCPartyStartMatchResponse = 9132,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCPartyInviteUser = 9133;
   */
  k_EMsgClientToGCPartyInviteUser = 9133,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCPartyInviteUserResponse = 9134;
   */
  k_EMsgClientToGCPartyInviteUserResponse = 9134,
  /**
   * @generated from protobuf enum value: k_EMsgGCToClientPartyEvent = 9135;
   */
  k_EMsgGCToClientPartyEvent = 9135,
  /**
   * @generated from protobuf enum value: k_EMsgGCToClientCanRejoinParty = 9137;
   */
  k_EMsgGCToClientCanRejoinParty = 9137,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCPartyJoinViaCode = 9138;
   */
  k_EMsgClientToGCPartyJoinViaCode = 9138,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCPartyJoinViaCodeResponse = 9139;
   */
  k_EMsgClientToGCPartyJoinViaCodeResponse = 9139,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCPartySetReadyState = 9142;
   */
  k_EMsgClientToGCPartySetReadyState = 9142,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCPartySetReadyStateResponse = 9143;
   */
  k_EMsgClientToGCPartySetReadyStateResponse = 9143,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCGetAccountStats = 9164;
   */
  k_EMsgClientToGCGetAccountStats = 9164,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCGetAccountStatsResponse = 9165;
   */
  k_EMsgClientToGCGetAccountStatsResponse = 9165,
  /**
   * @generated from protobuf enum value: k_EMsgGCToClientAccountStatsUpdated = 9166;
   */
  k_EMsgGCToClientAccountStatsUpdated = 9166,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCGetMatchMetaData = 9167;
   */
  k_EMsgClientToGCGetMatchMetaData = 9167,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCGetMatchMetaDataResponse = 9168;
   */
  k_EMsgClientToGCGetMatchMetaDataResponse = 9168,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCDevAction = 9172;
   */
  k_EMsgClientToGCDevAction = 9172,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCDevActionResponse = 9173;
   */
  k_EMsgClientToGCDevActionResponse = 9173,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCRecordClientEvents = 9174;
   */
  k_EMsgClientToGCRecordClientEvents = 9174,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCRecordClientEventsResponse = 9175;
   */
  k_EMsgClientToGCRecordClientEventsResponse = 9175,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCSetNewPlayerProgress = 9176;
   */
  k_EMsgClientToGCSetNewPlayerProgress = 9176,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCSetNewPlayerProgressResponse = 9177;
   */
  k_EMsgClientToGCSetNewPlayerProgressResponse = 9177,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCUpdateAccountSync = 9178;
   */
  k_EMsgClientToGCUpdateAccountSync = 9178,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCUpdateAccountSyncResponse = 9179;
   */
  k_EMsgClientToGCUpdateAccountSyncResponse = 9179,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCGetHeroChoice = 9180;
   */
  k_EMsgClientToGCGetHeroChoice = 9180,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCGetHeroChoiceResponse = 9181;
   */
  k_EMsgClientToGCGetHeroChoiceResponse = 9181,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCUnlockHero = 9182;
   */
  k_EMsgClientToGCUnlockHero = 9182,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCUnlockHeroResponse = 9183;
   */
  k_EMsgClientToGCUnlockHeroResponse = 9183,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCBookUnlock = 9184;
   */
  k_EMsgClientToGCBookUnlock = 9184,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCBookUnlockResponse = 9185;
   */
  k_EMsgClientToGCBookUnlockResponse = 9185,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCGetBook = 9186;
   */
  k_EMsgClientToGCGetBook = 9186,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCGetBookResponse = 9187;
   */
  k_EMsgClientToGCGetBookResponse = 9187,
  /**
   * @generated from protobuf enum value: k_EMsgGCToClientBookUpdated = 9188;
   */
  k_EMsgGCToClientBookUpdated = 9188,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCSubmitPlaytestUser = 9189;
   */
  k_EMsgClientToGCSubmitPlaytestUser = 9189,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCSubmitPlaytestUserResponse = 9190;
   */
  k_EMsgClientToGCSubmitPlaytestUserResponse = 9190,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCUpdateHeroBuild = 9193;
   */
  k_EMsgClientToGCUpdateHeroBuild = 9193,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCUpdateHeroBuildResponse = 9194;
   */
  k_EMsgClientToGCUpdateHeroBuildResponse = 9194,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCFindHeroBuilds = 9195;
   */
  k_EMsgClientToGCFindHeroBuilds = 9195,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCFindHeroBuildsResponse = 9196;
   */
  k_EMsgClientToGCFindHeroBuildsResponse = 9196,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCReportPlayerFromMatch = 9197;
   */
  k_EMsgClientToGCReportPlayerFromMatch = 9197,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCReportPlayerFromMatchResponse = 9198;
   */
  k_EMsgClientToGCReportPlayerFromMatchResponse = 9198,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCGetAccountMatchReports = 9199;
   */
  k_EMsgClientToGCGetAccountMatchReports = 9199,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCGetAccountMatchReportsResponse = 9200;
   */
  k_EMsgClientToGCGetAccountMatchReportsResponse = 9200,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCDeleteHeroBuild = 9201;
   */
  k_EMsgClientToGCDeleteHeroBuild = 9201,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCDeleteHeroBuildResponse = 9202;
   */
  k_EMsgClientToGCDeleteHeroBuildResponse = 9202,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCGetActiveMatches = 9203;
   */
  k_EMsgClientToGCGetActiveMatches = 9203,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCGetActiveMatchesResponse = 9204;
   */
  k_EMsgClientToGCGetActiveMatchesResponse = 9204,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCGetDiscordLink = 9205;
   */
  k_EMsgClientToGCGetDiscordLink = 9205,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCGetDiscordLinkResponse = 9206;
   */
  k_EMsgClientToGCGetDiscordLinkResponse = 9206,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCPartySetMode = 9207;
   */
  k_EMsgClientToGCPartySetMode = 9207,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCPartySetModeResponse = 9208;
   */
  k_EMsgClientToGCPartySetModeResponse = 9208,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCGrantForumAccess = 9209;
   */
  k_EMsgClientToGCGrantForumAccess = 9209,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCGrantForumAccessResponse = 9210;
   */
  k_EMsgClientToGCGrantForumAccessResponse = 9210,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCModeratorRequest = 9211;
   */
  k_EMsgClientToGCModeratorRequest = 9211,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCModeratorRequestResponse = 9212;
   */
  k_EMsgClientToGCModeratorRequestResponse = 9212,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCGetFriendGameStatus = 9213;
   */
  k_EMsgClientToGCGetFriendGameStatus = 9213,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCGetFriendGameStatusResponse = 9214;
   */
  k_EMsgClientToGCGetFriendGameStatusResponse = 9214,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCUpdateHeroBuildPreference = 9215;
   */
  k_EMsgClientToGCUpdateHeroBuildPreference = 9215,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCUpdateHeroBuildPreferenceResponse = 9216;
   */
  k_EMsgClientToGCUpdateHeroBuildPreferenceResponse = 9216,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCGetOldHeroBuildData = 9217;
   */
  k_EMsgClientToGCGetOldHeroBuildData = 9217,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCGetOldHeroBuildDataResponse = 9218;
   */
  k_EMsgClientToGCGetOldHeroBuildDataResponse = 9218,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCUpdateSpectatorStatus = 9219;
   */
  k_EMsgClientToGCUpdateSpectatorStatus = 9219,
  /**
   * @generated from protobuf enum value: k_EMsgGCToClientRankedSchedule = 9220;
   */
  k_EMsgGCToClientRankedSchedule = 9220,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCSetRankedSchedule = 9221;
   */
  k_EMsgClientToGCSetRankedSchedule = 9221,
  /**
   * @generated from protobuf enum value: k_EMsgClientToGCSetRankedScheduleResponse = 9222;
   */
  k_EMsgClientToGCSetRankedScheduleResponse = 9222,
}
/**
 * @generated from protobuf enum ECitadelAccountPermissionFlag
 */
export enum ECitadelAccountPermissionFlag {
  /**
   * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
   */
  UNSPECIFIED$ = 0,
  /**
   * @generated from protobuf enum value: k_eAccountPermission_Ranked = 1;
   */
  k_eAccountPermission_Ranked = 1,
}
/**
 * @generated from protobuf enum ECitadelNewPlayerProgressFlag
 */
export enum ECitadelNewPlayerProgressFlag {
  /**
   * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
   */
  UNSPECIFIED$ = 0,
  /**
   * @generated from protobuf enum value: k_eNewPlayerProgress_GettingStarted = 1;
   */
  k_eNewPlayerProgress_GettingStarted = 1,
  /**
   * @generated from protobuf enum value: k_eNewPlayerProgress_HeroTraining = 2;
   */
  k_eNewPlayerProgress_HeroTraining = 2,
  /**
   * @generated from protobuf enum value: k_eNewPlayerProgress_LaneTraining = 3;
   */
  k_eNewPlayerProgress_LaneTraining = 3,
}
/**
 * @generated from protobuf enum EProfileCardSlotType
 */
export enum EProfileCardSlotType {
  /**
   * @generated from protobuf enum value: k_EProfileCardSlotType_Empty = 0;
   */
  k_EProfileCardSlotType_Empty = 0,
  /**
   * @generated from protobuf enum value: k_EProfileCardSlotType_Stat = 1;
   */
  k_EProfileCardSlotType_Stat = 1,
  /**
   * @generated from protobuf enum value: k_EProfileCardSlotType_Hero = 2;
   */
  k_EProfileCardSlotType_Hero = 2,
}
/**
 * @generated from protobuf enum ECitadelClientAccountEvent
 */
export enum ECitadelClientAccountEvent {
  /**
   * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
   */
  UNSPECIFIED$ = 0,
  /**
   * @generated from protobuf enum value: k_eLaunchedHeroTest = 1;
   */
  k_eLaunchedHeroTest = 1,
  /**
   * @generated from protobuf enum value: k_eViewedProfile = 2;
   */
  k_eViewedProfile = 2,
  /**
   * @generated from protobuf enum value: k_eViewedSocial = 3;
   */
  k_eViewedSocial = 3,
  /**
   * @generated from protobuf enum value: k_eViewedHeroes = 4;
   */
  k_eViewedHeroes = 4,
  /**
   * @generated from protobuf enum value: k_eViewedHeroDetails = 5;
   */
  k_eViewedHeroDetails = 5,
  /**
   * @generated from protobuf enum value: k_eViewedPatchNotes = 6;
   */
  k_eViewedPatchNotes = 6,
  /**
   * @generated from protobuf enum value: k_eViewedEvents = 7;
   */
  k_eViewedEvents = 7,
  /**
   * @generated from protobuf enum value: k_eViewedGettingStarted = 8;
   */
  k_eViewedGettingStarted = 8,
  /**
   * @generated from protobuf enum value: k_eViewedGuidePage = 9;
   */
  k_eViewedGuidePage = 9,
  /**
   * @generated from protobuf enum value: k_eLaunchedClient = 10;
   */
  k_eLaunchedClient = 10,
  /**
   * @generated from protobuf enum value: k_eEditRoster = 11;
   */
  k_eEditRoster = 11,
  /**
   * @generated from protobuf enum value: k_eViewedWatch = 12;
   */
  k_eViewedWatch = 12,
  /**
   * @generated from protobuf enum value: k_eCreatedParty = 13;
   */
  k_eCreatedParty = 13,
  /**
   * @generated from protobuf enum value: k_eCreatedPartyWithInvite = 14;
   */
  k_eCreatedPartyWithInvite = 14,
  /**
   * @generated from protobuf enum value: k_eViewedSelfProfile = 15;
   */
  k_eViewedSelfProfile = 15,
  /**
   * @generated from protobuf enum value: k_eJoinedPartyCode = 16;
   */
  k_eJoinedPartyCode = 16,
  /**
   * @generated from protobuf enum value: k_eSentPartyInvite = 17;
   */
  k_eSentPartyInvite = 17,
  /**
   * @generated from protobuf enum value: k_eAcceptPartyInvite = 18;
   */
  k_eAcceptPartyInvite = 18,
  /**
   * @generated from protobuf enum value: k_eRejectPartyInvite = 19;
   */
  k_eRejectPartyInvite = 19,
  /**
   * @generated from protobuf enum value: k_eSpectateUser = 20;
   */
  k_eSpectateUser = 20,
  /**
   * @generated from protobuf enum value: k_eSpectateMatch = 21;
   */
  k_eSpectateMatch = 21,
  /**
   * @generated from protobuf enum value: k_eEnteredMatchMaking = 22;
   */
  k_eEnteredMatchMaking = 22,
  /**
   * @generated from protobuf enum value: k_eLeftMatchMaking = 23;
   */
  k_eLeftMatchMaking = 23,
  /**
   * @generated from protobuf enum value: k_eEnteredPartyMatchMaking = 24;
   */
  k_eEnteredPartyMatchMaking = 24,
  /**
   * @generated from protobuf enum value: k_eLeftPartyMatchMaking = 25;
   */
  k_eLeftPartyMatchMaking = 25,
  /**
   * @generated from protobuf enum value: k_eDownloadedReplay = 26;
   */
  k_eDownloadedReplay = 26,
  /**
   * @generated from protobuf enum value: k_eWatchedReplay = 27;
   */
  k_eWatchedReplay = 27,
  /**
   * @generated from protobuf enum value: k_eViewMatchDetails = 28;
   */
  k_eViewMatchDetails = 28,
  /**
   * @generated from protobuf enum value: k_eMatchDetailsTab = 29;
   */
  k_eMatchDetailsTab = 29,
  /**
   * @generated from protobuf enum value: k_eDeleteReplay = 30;
   */
  k_eDeleteReplay = 30,
  /**
   * @generated from protobuf enum value: k_eBotMatch_Guided = 31;
   */
  k_eBotMatch_Guided = 31,
  /**
   * @generated from protobuf enum value: k_eBotMatch_Easy = 32;
   */
  k_eBotMatch_Easy = 32,
  /**
   * @generated from protobuf enum value: k_eBotMatch_Hard = 33;
   */
  k_eBotMatch_Hard = 33,
  /**
   * @generated from protobuf enum value: k_eLiveUpdatedRoster = 34;
   */
  k_eLiveUpdatedRoster = 34,
  /**
   * @generated from protobuf enum value: k_eMatchMakingIdle_Displayed = 35;
   */
  k_eMatchMakingIdle_Displayed = 35,
  /**
   * @generated from protobuf enum value: k_eMatchMakingIdle_Stopped = 36;
   */
  k_eMatchMakingIdle_Stopped = 36,
  /**
   * @generated from protobuf enum value: k_eConnectReacquireTicket = 37;
   */
  k_eConnectReacquireTicket = 37,
  /**
   * @generated from protobuf enum value: k_eConnectAttemptReconnect = 38;
   */
  k_eConnectAttemptReconnect = 38,
  /**
   * @generated from protobuf enum value: k_eDisconnectPresentedPrompt = 39;
   */
  k_eDisconnectPresentedPrompt = 39,
  /**
   * @generated from protobuf enum value: k_eDisconnectConfirmed = 40;
   */
  k_eDisconnectConfirmed = 40,
  /**
   * @generated from protobuf enum value: k_eViewedSettings_Options = 41;
   */
  k_eViewedSettings_Options = 41,
  /**
   * @generated from protobuf enum value: k_eViewedSettings_Video = 42;
   */
  k_eViewedSettings_Video = 42,
  /**
   * @generated from protobuf enum value: k_eViewedSettings_Audio = 43;
   */
  k_eViewedSettings_Audio = 43,
  /**
   * @generated from protobuf enum value: k_eViewedSettings_HotKey = 44;
   */
  k_eViewedSettings_HotKey = 44,
  /**
   * @generated from protobuf enum value: k_eViewedSettings_ChatWheel = 45;
   */
  k_eViewedSettings_ChatWheel = 45,
  /**
   * @generated from protobuf enum value: k_eViewedSettings_About = 46;
   */
  k_eViewedSettings_About = 46,
  /**
   * @generated from protobuf enum value: k_eOpenedSubmitFeedback = 47;
   */
  k_eOpenedSubmitFeedback = 47,
  /**
   * @generated from protobuf enum value: k_eTutorialSkip_Pressed = 48;
   */
  k_eTutorialSkip_Pressed = 48,
  /**
   * @generated from protobuf enum value: k_eTutorialSkip_Confirmed = 49;
   */
  k_eTutorialSkip_Confirmed = 49,
  /**
   * @generated from protobuf enum value: k_eViewedGuidePage_5s = 50;
   */
  k_eViewedGuidePage_5s = 50,
  /**
   * @generated from protobuf enum value: k_eViewedGuidePage_15s = 51;
   */
  k_eViewedGuidePage_15s = 51,
  /**
   * @generated from protobuf enum value: k_eViewedGuidePage_30s = 52;
   */
  k_eViewedGuidePage_30s = 52,
  /**
   * @generated from protobuf enum value: k_eViewedGuidePage_60s = 53;
   */
  k_eViewedGuidePage_60s = 53,
  /**
   * @generated from protobuf enum value: k_eOpenedBookTest = 54;
   */
  k_eOpenedBookTest = 54,
  /**
   * @generated from protobuf enum value: k_eSandboxViaHeroPage = 55;
   */
  k_eSandboxViaHeroPage = 55,
}
// @generated message type with reflection information, may provide speed optimized methods
class CSOGameAccountClient$Type extends MessageType<CSOGameAccountClient> {
  constructor() {
    super("CSOGameAccountClient", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        localName: "account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
        options: { key_field: true },
      },
      {
        no: 2,
        name: "flags",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 3,
        name: "wins",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "losses",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "kills",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "most_played_hero_id",
        kind: "scalar",
        localName: "most_played_hero_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 7,
        name: "permissions",
        kind: "scalar",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 8,
        name: "new_player_progress",
        kind: "scalar",
        localName: "new_player_progress",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 9,
        name: "hero_unlock_credits",
        kind: "scalar",
        localName: "hero_unlock_credits",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 10,
        name: "mm_ban_until",
        kind: "scalar",
        localName: "mm_ban_until",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 11,
        name: "comms_ban_until",
        kind: "scalar",
        localName: "comms_ban_until",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 12,
        name: "low_priority_games_remaining",
        kind: "scalar",
        localName: "low_priority_games_remaining",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 13,
        name: "report_ban_until",
        kind: "scalar",
        localName: "report_ban_until",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 14,
        name: "ranked_badge_level",
        kind: "scalar",
        localName: "ranked_badge_level",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 15,
        name: "ranked_badge_detail",
        kind: "scalar",
        localName: "ranked_badge_detail",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 16,
        name: "ranked_badge_interval",
        kind: "scalar",
        localName: "ranked_badge_interval",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 17,
        name: "ranked_matches",
        kind: "scalar",
        localName: "ranked_matches",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 18,
        name: "ranked_interval",
        kind: "scalar",
        localName: "ranked_interval",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 19,
        name: "ranked_schedule",
        kind: "scalar",
        localName: "ranked_schedule",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 20,
        name: "ranked_schedule_time",
        kind: "scalar",
        localName: "ranked_schedule_time",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CSOGameAccountClient>): CSOGameAccountClient {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CSOGameAccountClient>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CSOGameAccountClient,
  ): CSOGameAccountClient {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.account_id = reader.uint32();
          break;
        case /* optional uint64 flags */ 2:
          message.flags = reader.uint64().toBigInt();
          break;
        case /* optional uint32 wins */ 3:
          message.wins = reader.uint32();
          break;
        case /* optional uint32 losses */ 4:
          message.losses = reader.uint32();
          break;
        case /* optional uint32 kills */ 5:
          message.kills = reader.uint32();
          break;
        case /* optional uint32 most_played_hero_id */ 6:
          message.most_played_hero_id = reader.uint32();
          break;
        case /* optional uint64 permissions */ 7:
          message.permissions = reader.uint64().toBigInt();
          break;
        case /* optional uint64 new_player_progress */ 8:
          message.new_player_progress = reader.uint64().toBigInt();
          break;
        case /* optional uint32 hero_unlock_credits */ 9:
          message.hero_unlock_credits = reader.uint32();
          break;
        case /* optional uint32 mm_ban_until */ 10:
          message.mm_ban_until = reader.uint32();
          break;
        case /* optional uint32 comms_ban_until */ 11:
          message.comms_ban_until = reader.uint32();
          break;
        case /* optional uint32 low_priority_games_remaining */ 12:
          message.low_priority_games_remaining = reader.uint32();
          break;
        case /* optional uint32 report_ban_until */ 13:
          message.report_ban_until = reader.uint32();
          break;
        case /* optional uint32 ranked_badge_level */ 14:
          message.ranked_badge_level = reader.uint32();
          break;
        case /* optional uint32 ranked_badge_detail */ 15:
          message.ranked_badge_detail = reader.uint32();
          break;
        case /* optional uint32 ranked_badge_interval */ 16:
          message.ranked_badge_interval = reader.uint32();
          break;
        case /* optional uint32 ranked_matches */ 17:
          message.ranked_matches = reader.uint32();
          break;
        case /* optional uint32 ranked_interval */ 18:
          message.ranked_interval = reader.uint32();
          break;
        case /* optional uint32 ranked_schedule */ 19:
          message.ranked_schedule = reader.uint32();
          break;
        case /* optional uint32 ranked_schedule_time */ 20:
          message.ranked_schedule_time = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CSOGameAccountClient,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
    /* optional uint64 flags = 2; */
    if (message.flags !== undefined) writer.tag(2, WireType.Varint).uint64(message.flags);
    /* optional uint32 wins = 3; */
    if (message.wins !== undefined) writer.tag(3, WireType.Varint).uint32(message.wins);
    /* optional uint32 losses = 4; */
    if (message.losses !== undefined) writer.tag(4, WireType.Varint).uint32(message.losses);
    /* optional uint32 kills = 5; */
    if (message.kills !== undefined) writer.tag(5, WireType.Varint).uint32(message.kills);
    /* optional uint32 most_played_hero_id = 6; */
    if (message.most_played_hero_id !== undefined) writer.tag(6, WireType.Varint).uint32(message.most_played_hero_id);
    /* optional uint64 permissions = 7; */
    if (message.permissions !== undefined) writer.tag(7, WireType.Varint).uint64(message.permissions);
    /* optional uint64 new_player_progress = 8; */
    if (message.new_player_progress !== undefined) writer.tag(8, WireType.Varint).uint64(message.new_player_progress);
    /* optional uint32 hero_unlock_credits = 9; */
    if (message.hero_unlock_credits !== undefined) writer.tag(9, WireType.Varint).uint32(message.hero_unlock_credits);
    /* optional uint32 mm_ban_until = 10; */
    if (message.mm_ban_until !== undefined) writer.tag(10, WireType.Varint).uint32(message.mm_ban_until);
    /* optional uint32 comms_ban_until = 11; */
    if (message.comms_ban_until !== undefined) writer.tag(11, WireType.Varint).uint32(message.comms_ban_until);
    /* optional uint32 low_priority_games_remaining = 12; */
    if (message.low_priority_games_remaining !== undefined)
      writer.tag(12, WireType.Varint).uint32(message.low_priority_games_remaining);
    /* optional uint32 report_ban_until = 13; */
    if (message.report_ban_until !== undefined) writer.tag(13, WireType.Varint).uint32(message.report_ban_until);
    /* optional uint32 ranked_badge_level = 14; */
    if (message.ranked_badge_level !== undefined) writer.tag(14, WireType.Varint).uint32(message.ranked_badge_level);
    /* optional uint32 ranked_badge_detail = 15; */
    if (message.ranked_badge_detail !== undefined) writer.tag(15, WireType.Varint).uint32(message.ranked_badge_detail);
    /* optional uint32 ranked_badge_interval = 16; */
    if (message.ranked_badge_interval !== undefined)
      writer.tag(16, WireType.Varint).uint32(message.ranked_badge_interval);
    /* optional uint32 ranked_matches = 17; */
    if (message.ranked_matches !== undefined) writer.tag(17, WireType.Varint).uint32(message.ranked_matches);
    /* optional uint32 ranked_interval = 18; */
    if (message.ranked_interval !== undefined) writer.tag(18, WireType.Varint).uint32(message.ranked_interval);
    /* optional uint32 ranked_schedule = 19; */
    if (message.ranked_schedule !== undefined) writer.tag(19, WireType.Varint).uint32(message.ranked_schedule);
    /* optional uint32 ranked_schedule_time = 20; */
    if (message.ranked_schedule_time !== undefined)
      writer.tag(20, WireType.Varint).uint32(message.ranked_schedule_time);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CSOGameAccountClient
 */
export const CSOGameAccountClient = new CSOGameAccountClient$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSOAccountSyncStorage$Type extends MessageType<CSOAccountSyncStorage> {
  constructor() {
    super("CSOAccountSyncStorage", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        localName: "account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "id",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "value",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CSOAccountSyncStorage>): CSOAccountSyncStorage {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CSOAccountSyncStorage>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CSOAccountSyncStorage,
  ): CSOAccountSyncStorage {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.account_id = reader.uint32();
          break;
        case /* optional uint32 id */ 2:
          message.id = reader.uint32();
          break;
        case /* optional uint32 value */ 3:
          message.value = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CSOAccountSyncStorage,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
    /* optional uint32 id = 2; */
    if (message.id !== undefined) writer.tag(2, WireType.Varint).uint32(message.id);
    /* optional uint32 value = 3; */
    if (message.value !== undefined) writer.tag(3, WireType.Varint).uint32(message.value);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CSOAccountSyncStorage
 */
export const CSOAccountSyncStorage = new CSOAccountSyncStorage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSOAccountHeroInfo$Type extends MessageType<CSOAccountHeroInfo> {
  constructor() {
    super("CSOAccountHeroInfo", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        localName: "account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
        options: { key_field: true },
      },
      {
        no: 2,
        name: "hero_id",
        kind: "scalar",
        localName: "hero_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "status",
        kind: "enum",
        opt: true,
        T: () => ["CSOAccountHeroInfo.EHeroStatus", CSOAccountHeroInfo_EHeroStatus],
      },
      {
        no: 4,
        name: "wins",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "kills",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CSOAccountHeroInfo>): CSOAccountHeroInfo {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CSOAccountHeroInfo>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CSOAccountHeroInfo,
  ): CSOAccountHeroInfo {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.account_id = reader.uint32();
          break;
        case /* optional uint32 hero_id */ 2:
          message.hero_id = reader.uint32();
          break;
        case /* optional CSOAccountHeroInfo.EHeroStatus status */ 3:
          message.status = reader.int32();
          break;
        case /* optional uint32 wins */ 4:
          message.wins = reader.uint32();
          break;
        case /* optional uint32 kills */ 5:
          message.kills = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: CSOAccountHeroInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
    /* optional uint32 hero_id = 2; */
    if (message.hero_id !== undefined) writer.tag(2, WireType.Varint).uint32(message.hero_id);
    /* optional CSOAccountHeroInfo.EHeroStatus status = 3; */
    if (message.status !== undefined) writer.tag(3, WireType.Varint).int32(message.status);
    /* optional uint32 wins = 4; */
    if (message.wins !== undefined) writer.tag(4, WireType.Varint).uint32(message.wins);
    /* optional uint32 kills = 5; */
    if (message.kills !== undefined) writer.tag(5, WireType.Varint).uint32(message.kills);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CSOAccountHeroInfo
 */
export const CSOAccountHeroInfo = new CSOAccountHeroInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgCitadelClientHello$Type extends MessageType<CMsgCitadelClientHello> {
  constructor() {
    super("CMsgCitadelClientHello", [
      {
        no: 1,
        name: "region_mode",
        kind: "enum",
        localName: "region_mode",
        opt: true,
        T: () => ["ECitadelRegionMode", ECitadelRegionMode],
      },
    ]);
  }
  create(value?: PartialMessage<CMsgCitadelClientHello>): CMsgCitadelClientHello {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgCitadelClientHello>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgCitadelClientHello,
  ): CMsgCitadelClientHello {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional ECitadelRegionMode region_mode */ 1:
          message.region_mode = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgCitadelClientHello,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional ECitadelRegionMode region_mode = 1; */
    if (message.region_mode !== undefined) writer.tag(1, WireType.Varint).int32(message.region_mode);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgCitadelClientHello
 */
export const CMsgCitadelClientHello = new CMsgCitadelClientHello$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCStartMatchmaking$Type extends MessageType<CMsgClientToGCStartMatchmaking> {
  constructor() {
    super("CMsgClientToGCStartMatchmaking", [
      {
        no: 1,
        name: "client_version",
        kind: "scalar",
        localName: "client_version",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "client_platform",
        kind: "enum",
        localName: "client_platform",
        opt: true,
        T: () => ["EGCPlatform", EGCPlatform],
      },
      {
        no: 3,
        name: "match_info",
        kind: "message",
        localName: "match_info",
        T: () => CMsgStartFindingMatchInfo,
      },
      {
        no: 4,
        name: "ping_times",
        kind: "message",
        localName: "ping_times",
        T: () => CMsgRegionPingTimesClient,
      },
      {
        no: 5,
        name: "heroes",
        kind: "message",
        T: () => CMsgHeroSelectionMatchInfo,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCStartMatchmaking>): CMsgClientToGCStartMatchmaking {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCStartMatchmaking>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCStartMatchmaking,
  ): CMsgClientToGCStartMatchmaking {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 client_version */ 1:
          message.client_version = reader.uint32();
          break;
        case /* optional EGCPlatform client_platform */ 2:
          message.client_platform = reader.int32();
          break;
        case /* optional CMsgStartFindingMatchInfo match_info */ 3:
          message.match_info = CMsgStartFindingMatchInfo.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.match_info,
          );
          break;
        case /* optional CMsgRegionPingTimesClient ping_times */ 4:
          message.ping_times = CMsgRegionPingTimesClient.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.ping_times,
          );
          break;
        case /* optional CMsgHeroSelectionMatchInfo heroes */ 5:
          message.heroes = CMsgHeroSelectionMatchInfo.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.heroes,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCStartMatchmaking,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 client_version = 1; */
    if (message.client_version !== undefined) writer.tag(1, WireType.Varint).uint32(message.client_version);
    /* optional EGCPlatform client_platform = 2; */
    if (message.client_platform !== undefined) writer.tag(2, WireType.Varint).int32(message.client_platform);
    /* optional CMsgStartFindingMatchInfo match_info = 3; */
    if (message.match_info)
      CMsgStartFindingMatchInfo.internalBinaryWrite(
        message.match_info,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional CMsgRegionPingTimesClient ping_times = 4; */
    if (message.ping_times)
      CMsgRegionPingTimesClient.internalBinaryWrite(
        message.ping_times,
        writer.tag(4, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional CMsgHeroSelectionMatchInfo heroes = 5; */
    if (message.heroes)
      CMsgHeroSelectionMatchInfo.internalBinaryWrite(
        message.heroes,
        writer.tag(5, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCStartMatchmaking
 */
export const CMsgClientToGCStartMatchmaking = new CMsgClientToGCStartMatchmaking$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCStartMatchmakingResponse$Type extends MessageType<CMsgClientToGCStartMatchmakingResponse> {
  constructor() {
    super("CMsgClientToGCStartMatchmakingResponse", [
      {
        no: 1,
        name: "result",
        kind: "enum",
        opt: true,
        T: () => [
          "CMsgClientToGCStartMatchmakingResponse.EResultCode",
          CMsgClientToGCStartMatchmakingResponse_EResultCode,
        ],
      },
      {
        no: 2,
        name: "time_stamp",
        kind: "scalar",
        localName: "time_stamp",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "debug_message",
        kind: "scalar",
        localName: "debug_message",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCStartMatchmakingResponse>): CMsgClientToGCStartMatchmakingResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCStartMatchmakingResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCStartMatchmakingResponse,
  ): CMsgClientToGCStartMatchmakingResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCStartMatchmakingResponse.EResultCode result */ 1:
          message.result = reader.int32();
          break;
        case /* optional uint32 time_stamp */ 2:
          message.time_stamp = reader.uint32();
          break;
        case /* optional string debug_message */ 3:
          message.debug_message = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCStartMatchmakingResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCStartMatchmakingResponse.EResultCode result = 1; */
    if (message.result !== undefined) writer.tag(1, WireType.Varint).int32(message.result);
    /* optional uint32 time_stamp = 2; */
    if (message.time_stamp !== undefined) writer.tag(2, WireType.Varint).uint32(message.time_stamp);
    /* optional string debug_message = 3; */
    if (message.debug_message !== undefined) writer.tag(3, WireType.LengthDelimited).string(message.debug_message);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCStartMatchmakingResponse
 */
export const CMsgClientToGCStartMatchmakingResponse = new CMsgClientToGCStartMatchmakingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCStopMatchmaking$Type extends MessageType<CMsgClientToGCStopMatchmaking> {
  constructor() {
    super("CMsgClientToGCStopMatchmaking", []);
  }
  create(value?: PartialMessage<CMsgClientToGCStopMatchmaking>): CMsgClientToGCStopMatchmaking {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCStopMatchmaking>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCStopMatchmaking,
  ): CMsgClientToGCStopMatchmaking {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: CMsgClientToGCStopMatchmaking,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCStopMatchmaking
 */
export const CMsgClientToGCStopMatchmaking = new CMsgClientToGCStopMatchmaking$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCStopMatchmakingResponse$Type extends MessageType<CMsgClientToGCStopMatchmakingResponse> {
  constructor() {
    super("CMsgClientToGCStopMatchmakingResponse", [
      {
        no: 1,
        name: "success",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCStopMatchmakingResponse>): CMsgClientToGCStopMatchmakingResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCStopMatchmakingResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCStopMatchmakingResponse,
  ): CMsgClientToGCStopMatchmakingResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional bool success */ 1:
          message.success = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCStopMatchmakingResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional bool success = 1; */
    if (message.success !== undefined) writer.tag(1, WireType.Varint).bool(message.success);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCStopMatchmakingResponse
 */
export const CMsgClientToGCStopMatchmakingResponse = new CMsgClientToGCStopMatchmakingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToClientMatchmakingStopped$Type extends MessageType<CMsgGCToClientMatchmakingStopped> {
  constructor() {
    super("CMsgGCToClientMatchmakingStopped", [
      {
        no: 1,
        name: "reason",
        kind: "enum",
        opt: true,
        T: () => ["CMsgGCToClientMatchmakingStopped.EReason", CMsgGCToClientMatchmakingStopped_EReason],
      },
    ]);
  }
  create(value?: PartialMessage<CMsgGCToClientMatchmakingStopped>): CMsgGCToClientMatchmakingStopped {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgGCToClientMatchmakingStopped>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgGCToClientMatchmakingStopped,
  ): CMsgGCToClientMatchmakingStopped {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgGCToClientMatchmakingStopped.EReason reason */ 1:
          message.reason = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgGCToClientMatchmakingStopped,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgGCToClientMatchmakingStopped.EReason reason = 1; */
    if (message.reason !== undefined) writer.tag(1, WireType.Varint).int32(message.reason);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgGCToClientMatchmakingStopped
 */
export const CMsgGCToClientMatchmakingStopped = new CMsgGCToClientMatchmakingStopped$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCLeaveLobby$Type extends MessageType<CMsgClientToGCLeaveLobby> {
  constructor() {
    super("CMsgClientToGCLeaveLobby", [
      {
        no: 1,
        name: "lobby_id",
        kind: "scalar",
        localName: "lobby_id",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCLeaveLobby>): CMsgClientToGCLeaveLobby {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCLeaveLobby>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCLeaveLobby,
  ): CMsgClientToGCLeaveLobby {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 lobby_id */ 1:
          message.lobby_id = reader.uint64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCLeaveLobby,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint64 lobby_id = 1; */
    if (message.lobby_id !== undefined) writer.tag(1, WireType.Varint).uint64(message.lobby_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCLeaveLobby
 */
export const CMsgClientToGCLeaveLobby = new CMsgClientToGCLeaveLobby$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCLeaveLobbyResponse$Type extends MessageType<CMsgClientToGCLeaveLobbyResponse> {
  constructor() {
    super("CMsgClientToGCLeaveLobbyResponse", []);
  }
  create(value?: PartialMessage<CMsgClientToGCLeaveLobbyResponse>): CMsgClientToGCLeaveLobbyResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCLeaveLobbyResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCLeaveLobbyResponse,
  ): CMsgClientToGCLeaveLobbyResponse {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: CMsgClientToGCLeaveLobbyResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCLeaveLobbyResponse
 */
export const CMsgClientToGCLeaveLobbyResponse = new CMsgClientToGCLeaveLobbyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientWelcomeCitadel$Type extends MessageType<CMsgClientWelcomeCitadel> {
  constructor() {
    super("CMsgClientWelcomeCitadel", [
      {
        no: 1,
        name: "currency",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "extra_messages",
        kind: "message",
        localName: "extra_messages",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CExtraMsgBlock,
      },
      {
        no: 3,
        name: "compatibility_version",
        kind: "scalar",
        localName: "compatibility_version",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "region_mode",
        kind: "enum",
        localName: "region_mode",
        opt: true,
        T: () => ["ECitadelRegionMode", ECitadelRegionMode],
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientWelcomeCitadel>): CMsgClientWelcomeCitadel {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.extra_messages = [];
    if (value !== undefined) reflectionMergePartial<CMsgClientWelcomeCitadel>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientWelcomeCitadel,
  ): CMsgClientWelcomeCitadel {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 currency */ 1:
          message.currency = reader.uint32();
          break;
        case /* repeated CExtraMsgBlock extra_messages */ 2:
          message.extra_messages.push(CExtraMsgBlock.internalBinaryRead(reader, reader.uint32(), options));
          break;
        case /* optional uint32 compatibility_version */ 3:
          message.compatibility_version = reader.uint32();
          break;
        case /* optional ECitadelRegionMode region_mode */ 4:
          message.region_mode = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientWelcomeCitadel,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 currency = 1; */
    if (message.currency !== undefined) writer.tag(1, WireType.Varint).uint32(message.currency);
    /* repeated CExtraMsgBlock extra_messages = 2; */
    for (let i = 0; i < message.extra_messages.length; i++)
      CExtraMsgBlock.internalBinaryWrite(
        message.extra_messages[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional uint32 compatibility_version = 3; */
    if (message.compatibility_version !== undefined)
      writer.tag(3, WireType.Varint).uint32(message.compatibility_version);
    /* optional ECitadelRegionMode region_mode = 4; */
    if (message.region_mode !== undefined) writer.tag(4, WireType.Varint).int32(message.region_mode);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientWelcomeCitadel
 */
export const CMsgClientWelcomeCitadel = new CMsgClientWelcomeCitadel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCIsInMatchmaking$Type extends MessageType<CMsgClientToGCIsInMatchmaking> {
  constructor() {
    super("CMsgClientToGCIsInMatchmaking", []);
  }
  create(value?: PartialMessage<CMsgClientToGCIsInMatchmaking>): CMsgClientToGCIsInMatchmaking {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCIsInMatchmaking>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCIsInMatchmaking,
  ): CMsgClientToGCIsInMatchmaking {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: CMsgClientToGCIsInMatchmaking,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCIsInMatchmaking
 */
export const CMsgClientToGCIsInMatchmaking = new CMsgClientToGCIsInMatchmaking$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCIsInMatchmakingResponse$Type extends MessageType<CMsgClientToGCIsInMatchmakingResponse> {
  constructor() {
    super("CMsgClientToGCIsInMatchmakingResponse", [
      {
        no: 1,
        name: "in_matchmaking",
        kind: "scalar",
        localName: "in_matchmaking",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCIsInMatchmakingResponse>): CMsgClientToGCIsInMatchmakingResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCIsInMatchmakingResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCIsInMatchmakingResponse,
  ): CMsgClientToGCIsInMatchmakingResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional bool in_matchmaking */ 1:
          message.in_matchmaking = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCIsInMatchmakingResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional bool in_matchmaking = 1; */
    if (message.in_matchmaking !== undefined) writer.tag(1, WireType.Varint).bool(message.in_matchmaking);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCIsInMatchmakingResponse
 */
export const CMsgClientToGCIsInMatchmakingResponse = new CMsgClientToGCIsInMatchmakingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgDevMatchInfo$Type extends MessageType<CMsgDevMatchInfo> {
  constructor() {
    super("CMsgDevMatchInfo", [
      {
        no: 1,
        name: "start_time",
        kind: "scalar",
        localName: "start_time",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "winning_team",
        kind: "enum",
        localName: "winning_team",
        opt: true,
        T: () => ["ECitadelLobbyTeam", ECitadelLobbyTeam],
      },
      {
        no: 3,
        name: "match_id",
        kind: "scalar",
        localName: "match_id",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 4,
        name: "players",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgDevMatchInfo_MatchPlayer,
      },
      {
        no: 5,
        name: "lobby_id",
        kind: "scalar",
        localName: "lobby_id",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 9,
        name: "net_worth_team_0",
        kind: "scalar",
        localName: "net_worth_team_0",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 10,
        name: "net_worth_team_1",
        kind: "scalar",
        localName: "net_worth_team_1",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 11,
        name: "duration_s",
        kind: "scalar",
        localName: "duration_s",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 12,
        name: "spectators",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 13,
        name: "open_spectator_slots",
        kind: "scalar",
        localName: "open_spectator_slots",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 14,
        name: "objectives_mask_team0",
        kind: "scalar",
        localName: "objectives_mask_team0",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 15,
        name: "objectives_mask_team1",
        kind: "scalar",
        localName: "objectives_mask_team1",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 16,
        name: "match_mode",
        kind: "enum",
        localName: "match_mode",
        opt: true,
        T: () => ["ECitadelMatchMode", ECitadelMatchMode],
      },
      {
        no: 17,
        name: "game_mode",
        kind: "enum",
        localName: "game_mode",
        opt: true,
        T: () => ["ECitadelGameMode", ECitadelGameMode],
      },
      {
        no: 18,
        name: "match_score",
        kind: "scalar",
        localName: "match_score",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 19,
        name: "region_mode",
        kind: "enum",
        localName: "region_mode",
        opt: true,
        T: () => ["ECitadelRegionMode", ECitadelRegionMode],
      },
    ]);
  }
  create(value?: PartialMessage<CMsgDevMatchInfo>): CMsgDevMatchInfo {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.players = [];
    if (value !== undefined) reflectionMergePartial<CMsgDevMatchInfo>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgDevMatchInfo,
  ): CMsgDevMatchInfo {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 start_time */ 1:
          message.start_time = reader.uint32();
          break;
        case /* optional ECitadelLobbyTeam winning_team */ 2:
          message.winning_team = reader.int32();
          break;
        case /* optional uint64 match_id */ 3:
          message.match_id = reader.uint64().toBigInt();
          break;
        case /* repeated CMsgDevMatchInfo.MatchPlayer players */ 4:
          message.players.push(CMsgDevMatchInfo_MatchPlayer.internalBinaryRead(reader, reader.uint32(), options));
          break;
        case /* optional fixed64 lobby_id */ 5:
          message.lobby_id = reader.fixed64().toBigInt();
          break;
        case /* optional uint32 net_worth_team_0 */ 9:
          message.net_worth_team_0 = reader.uint32();
          break;
        case /* optional uint32 net_worth_team_1 */ 10:
          message.net_worth_team_1 = reader.uint32();
          break;
        case /* optional uint32 duration_s */ 11:
          message.duration_s = reader.uint32();
          break;
        case /* optional uint32 spectators */ 12:
          message.spectators = reader.uint32();
          break;
        case /* optional uint32 open_spectator_slots */ 13:
          message.open_spectator_slots = reader.uint32();
          break;
        case /* optional uint64 objectives_mask_team0 */ 14:
          message.objectives_mask_team0 = reader.uint64().toBigInt();
          break;
        case /* optional uint64 objectives_mask_team1 */ 15:
          message.objectives_mask_team1 = reader.uint64().toBigInt();
          break;
        case /* optional ECitadelMatchMode match_mode */ 16:
          message.match_mode = reader.int32();
          break;
        case /* optional ECitadelGameMode game_mode */ 17:
          message.game_mode = reader.int32();
          break;
        case /* optional uint32 match_score */ 18:
          message.match_score = reader.uint32();
          break;
        case /* optional ECitadelRegionMode region_mode */ 19:
          message.region_mode = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: CMsgDevMatchInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* optional uint32 start_time = 1; */
    if (message.start_time !== undefined) writer.tag(1, WireType.Varint).uint32(message.start_time);
    /* optional ECitadelLobbyTeam winning_team = 2; */
    if (message.winning_team !== undefined) writer.tag(2, WireType.Varint).int32(message.winning_team);
    /* optional uint64 match_id = 3; */
    if (message.match_id !== undefined) writer.tag(3, WireType.Varint).uint64(message.match_id);
    /* repeated CMsgDevMatchInfo.MatchPlayer players = 4; */
    for (let i = 0; i < message.players.length; i++)
      CMsgDevMatchInfo_MatchPlayer.internalBinaryWrite(
        message.players[i],
        writer.tag(4, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional fixed64 lobby_id = 5; */
    if (message.lobby_id !== undefined) writer.tag(5, WireType.Bit64).fixed64(message.lobby_id);
    /* optional uint32 net_worth_team_0 = 9; */
    if (message.net_worth_team_0 !== undefined) writer.tag(9, WireType.Varint).uint32(message.net_worth_team_0);
    /* optional uint32 net_worth_team_1 = 10; */
    if (message.net_worth_team_1 !== undefined) writer.tag(10, WireType.Varint).uint32(message.net_worth_team_1);
    /* optional uint32 duration_s = 11; */
    if (message.duration_s !== undefined) writer.tag(11, WireType.Varint).uint32(message.duration_s);
    /* optional uint32 spectators = 12; */
    if (message.spectators !== undefined) writer.tag(12, WireType.Varint).uint32(message.spectators);
    /* optional uint32 open_spectator_slots = 13; */
    if (message.open_spectator_slots !== undefined)
      writer.tag(13, WireType.Varint).uint32(message.open_spectator_slots);
    /* optional uint64 objectives_mask_team0 = 14; */
    if (message.objectives_mask_team0 !== undefined)
      writer.tag(14, WireType.Varint).uint64(message.objectives_mask_team0);
    /* optional uint64 objectives_mask_team1 = 15; */
    if (message.objectives_mask_team1 !== undefined)
      writer.tag(15, WireType.Varint).uint64(message.objectives_mask_team1);
    /* optional ECitadelMatchMode match_mode = 16; */
    if (message.match_mode !== undefined) writer.tag(16, WireType.Varint).int32(message.match_mode);
    /* optional ECitadelGameMode game_mode = 17; */
    if (message.game_mode !== undefined) writer.tag(17, WireType.Varint).int32(message.game_mode);
    /* optional uint32 match_score = 18; */
    if (message.match_score !== undefined) writer.tag(18, WireType.Varint).uint32(message.match_score);
    /* optional ECitadelRegionMode region_mode = 19; */
    if (message.region_mode !== undefined) writer.tag(19, WireType.Varint).int32(message.region_mode);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgDevMatchInfo
 */
export const CMsgDevMatchInfo = new CMsgDevMatchInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgDevMatchInfo_MatchPlayer$Type extends MessageType<CMsgDevMatchInfo_MatchPlayer> {
  constructor() {
    super("CMsgDevMatchInfo.MatchPlayer", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        localName: "account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "team",
        kind: "enum",
        opt: true,
        T: () => ["ECitadelLobbyTeam", ECitadelLobbyTeam],
      },
      {
        no: 3,
        name: "abandoned",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 4,
        name: "hero_id",
        kind: "scalar",
        localName: "hero_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgDevMatchInfo_MatchPlayer>): CMsgDevMatchInfo_MatchPlayer {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgDevMatchInfo_MatchPlayer>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgDevMatchInfo_MatchPlayer,
  ): CMsgDevMatchInfo_MatchPlayer {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.account_id = reader.uint32();
          break;
        case /* optional ECitadelLobbyTeam team */ 2:
          message.team = reader.int32();
          break;
        case /* optional bool abandoned */ 3:
          message.abandoned = reader.bool();
          break;
        case /* optional uint32 hero_id */ 4:
          message.hero_id = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgDevMatchInfo_MatchPlayer,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
    /* optional ECitadelLobbyTeam team = 2; */
    if (message.team !== undefined) writer.tag(2, WireType.Varint).int32(message.team);
    /* optional bool abandoned = 3; */
    if (message.abandoned !== undefined) writer.tag(3, WireType.Varint).bool(message.abandoned);
    /* optional uint32 hero_id = 4; */
    if (message.hero_id !== undefined) writer.tag(4, WireType.Varint).uint32(message.hero_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgDevMatchInfo.MatchPlayer
 */
export const CMsgDevMatchInfo_MatchPlayer = new CMsgDevMatchInfo_MatchPlayer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToClientRankedSchedule$Type extends MessageType<CMsgGCToClientRankedSchedule> {
  constructor() {
    super("CMsgGCToClientRankedSchedule", [
      {
        no: 1,
        name: "schedules",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgGCToClientRankedSchedule_Schedule,
      },
      {
        no: 2,
        name: "active_ranked_interval",
        kind: "scalar",
        localName: "active_ranked_interval",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "active_interval_start",
        kind: "scalar",
        localName: "active_interval_start",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "active_interval_end",
        kind: "scalar",
        localName: "active_interval_end",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgGCToClientRankedSchedule>): CMsgGCToClientRankedSchedule {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.schedules = [];
    if (value !== undefined) reflectionMergePartial<CMsgGCToClientRankedSchedule>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgGCToClientRankedSchedule,
  ): CMsgGCToClientRankedSchedule {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated CMsgGCToClientRankedSchedule.Schedule schedules */ 1:
          message.schedules.push(
            CMsgGCToClientRankedSchedule_Schedule.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* optional uint32 active_ranked_interval */ 2:
          message.active_ranked_interval = reader.uint32();
          break;
        case /* optional uint32 active_interval_start */ 3:
          message.active_interval_start = reader.uint32();
          break;
        case /* optional uint32 active_interval_end */ 4:
          message.active_interval_end = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgGCToClientRankedSchedule,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated CMsgGCToClientRankedSchedule.Schedule schedules = 1; */
    for (let i = 0; i < message.schedules.length; i++)
      CMsgGCToClientRankedSchedule_Schedule.internalBinaryWrite(
        message.schedules[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional uint32 active_ranked_interval = 2; */
    if (message.active_ranked_interval !== undefined)
      writer.tag(2, WireType.Varint).uint32(message.active_ranked_interval);
    /* optional uint32 active_interval_start = 3; */
    if (message.active_interval_start !== undefined)
      writer.tag(3, WireType.Varint).uint32(message.active_interval_start);
    /* optional uint32 active_interval_end = 4; */
    if (message.active_interval_end !== undefined) writer.tag(4, WireType.Varint).uint32(message.active_interval_end);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgGCToClientRankedSchedule
 */
export const CMsgGCToClientRankedSchedule = new CMsgGCToClientRankedSchedule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToClientRankedSchedule_TimeRange$Type extends MessageType<CMsgGCToClientRankedSchedule_TimeRange> {
  constructor() {
    super("CMsgGCToClientRankedSchedule.TimeRange", [
      {
        no: 1,
        name: "start_time",
        kind: "scalar",
        localName: "start_time",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 2,
        name: "end_time",
        kind: "scalar",
        localName: "end_time",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgGCToClientRankedSchedule_TimeRange>): CMsgGCToClientRankedSchedule_TimeRange {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgGCToClientRankedSchedule_TimeRange>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgGCToClientRankedSchedule_TimeRange,
  ): CMsgGCToClientRankedSchedule_TimeRange {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional int32 start_time */ 1:
          message.start_time = reader.int32();
          break;
        case /* optional int32 end_time */ 2:
          message.end_time = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgGCToClientRankedSchedule_TimeRange,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional int32 start_time = 1; */
    if (message.start_time !== undefined) writer.tag(1, WireType.Varint).int32(message.start_time);
    /* optional int32 end_time = 2; */
    if (message.end_time !== undefined) writer.tag(2, WireType.Varint).int32(message.end_time);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgGCToClientRankedSchedule.TimeRange
 */
export const CMsgGCToClientRankedSchedule_TimeRange = new CMsgGCToClientRankedSchedule_TimeRange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToClientRankedSchedule_Schedule$Type extends MessageType<CMsgGCToClientRankedSchedule_Schedule> {
  constructor() {
    super("CMsgGCToClientRankedSchedule.Schedule", [
      {
        no: 1,
        name: "schedule_id",
        kind: "scalar",
        localName: "schedule_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "weekends",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgGCToClientRankedSchedule_TimeRange,
      },
      {
        no: 3,
        name: "weekdays",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgGCToClientRankedSchedule_TimeRange,
      },
      {
        no: 4,
        name: "is_open",
        kind: "scalar",
        localName: "is_open",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 5,
        name: "regions",
        kind: "enum",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => ["ECitadelRegionMode", ECitadelRegionMode],
      },
    ]);
  }
  create(value?: PartialMessage<CMsgGCToClientRankedSchedule_Schedule>): CMsgGCToClientRankedSchedule_Schedule {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.weekends = [];
    message.weekdays = [];
    message.regions = [];
    if (value !== undefined) reflectionMergePartial<CMsgGCToClientRankedSchedule_Schedule>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgGCToClientRankedSchedule_Schedule,
  ): CMsgGCToClientRankedSchedule_Schedule {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 schedule_id */ 1:
          message.schedule_id = reader.uint32();
          break;
        case /* repeated CMsgGCToClientRankedSchedule.TimeRange weekends */ 2:
          message.weekends.push(
            CMsgGCToClientRankedSchedule_TimeRange.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* repeated CMsgGCToClientRankedSchedule.TimeRange weekdays */ 3:
          message.weekdays.push(
            CMsgGCToClientRankedSchedule_TimeRange.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* optional bool is_open */ 4:
          message.is_open = reader.bool();
          break;
        case /* repeated ECitadelRegionMode regions */ 5:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.regions.push(reader.int32());
          else message.regions.push(reader.int32());
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgGCToClientRankedSchedule_Schedule,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 schedule_id = 1; */
    if (message.schedule_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.schedule_id);
    /* repeated CMsgGCToClientRankedSchedule.TimeRange weekends = 2; */
    for (let i = 0; i < message.weekends.length; i++)
      CMsgGCToClientRankedSchedule_TimeRange.internalBinaryWrite(
        message.weekends[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated CMsgGCToClientRankedSchedule.TimeRange weekdays = 3; */
    for (let i = 0; i < message.weekdays.length; i++)
      CMsgGCToClientRankedSchedule_TimeRange.internalBinaryWrite(
        message.weekdays[i],
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional bool is_open = 4; */
    if (message.is_open !== undefined) writer.tag(4, WireType.Varint).bool(message.is_open);
    /* repeated ECitadelRegionMode regions = 5; */
    for (let i = 0; i < message.regions.length; i++) writer.tag(5, WireType.Varint).int32(message.regions[i]);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgGCToClientRankedSchedule.Schedule
 */
export const CMsgGCToClientRankedSchedule_Schedule = new CMsgGCToClientRankedSchedule_Schedule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToClientDevPlaytestStatus$Type extends MessageType<CMsgGCToClientDevPlaytestStatus> {
  constructor() {
    super("CMsgGCToClientDevPlaytestStatus", [
      {
        no: 4,
        name: "is_mm_enabled",
        kind: "scalar",
        localName: "is_mm_enabled",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 8,
        name: "locked_heroes",
        kind: "scalar",
        localName: "locked_heroes",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 9,
        name: "party_shared_heroes",
        kind: "scalar",
        localName: "party_shared_heroes",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 10,
        name: "hero_whitelists",
        kind: "message",
        localName: "hero_whitelists",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgGCToClientDevPlaytestStatus_HeroWhitelist,
      },
      {
        no: 14,
        name: "mm_pause_time",
        kind: "scalar",
        localName: "mm_pause_time",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 15,
        name: "valid_client_versions",
        kind: "scalar",
        localName: "valid_client_versions",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 21,
        name: "active_match_count",
        kind: "scalar",
        localName: "active_match_count",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 22,
        name: "regions",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgGCToClientDevPlaytestStatus_RegionInfo,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgGCToClientDevPlaytestStatus>): CMsgGCToClientDevPlaytestStatus {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.hero_whitelists = [];
    message.valid_client_versions = [];
    message.regions = [];
    if (value !== undefined) reflectionMergePartial<CMsgGCToClientDevPlaytestStatus>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgGCToClientDevPlaytestStatus,
  ): CMsgGCToClientDevPlaytestStatus {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional bool is_mm_enabled */ 4:
          message.is_mm_enabled = reader.bool();
          break;
        case /* optional bool locked_heroes */ 8:
          message.locked_heroes = reader.bool();
          break;
        case /* optional bool party_shared_heroes */ 9:
          message.party_shared_heroes = reader.bool();
          break;
        case /* repeated CMsgGCToClientDevPlaytestStatus.HeroWhitelist hero_whitelists */ 10:
          message.hero_whitelists.push(
            CMsgGCToClientDevPlaytestStatus_HeroWhitelist.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* optional uint32 mm_pause_time */ 14:
          message.mm_pause_time = reader.uint32();
          break;
        case /* repeated uint32 valid_client_versions */ 15:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.valid_client_versions.push(reader.uint32());
          else message.valid_client_versions.push(reader.uint32());
          break;
        case /* optional uint32 active_match_count */ 21:
          message.active_match_count = reader.uint32();
          break;
        case /* repeated CMsgGCToClientDevPlaytestStatus.RegionInfo regions */ 22:
          message.regions.push(
            CMsgGCToClientDevPlaytestStatus_RegionInfo.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgGCToClientDevPlaytestStatus,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional bool is_mm_enabled = 4; */
    if (message.is_mm_enabled !== undefined) writer.tag(4, WireType.Varint).bool(message.is_mm_enabled);
    /* optional bool locked_heroes = 8; */
    if (message.locked_heroes !== undefined) writer.tag(8, WireType.Varint).bool(message.locked_heroes);
    /* optional bool party_shared_heroes = 9; */
    if (message.party_shared_heroes !== undefined) writer.tag(9, WireType.Varint).bool(message.party_shared_heroes);
    /* repeated CMsgGCToClientDevPlaytestStatus.HeroWhitelist hero_whitelists = 10; */
    for (let i = 0; i < message.hero_whitelists.length; i++)
      CMsgGCToClientDevPlaytestStatus_HeroWhitelist.internalBinaryWrite(
        message.hero_whitelists[i],
        writer.tag(10, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional uint32 mm_pause_time = 14; */
    if (message.mm_pause_time !== undefined) writer.tag(14, WireType.Varint).uint32(message.mm_pause_time);
    /* repeated uint32 valid_client_versions = 15; */
    for (let i = 0; i < message.valid_client_versions.length; i++)
      writer.tag(15, WireType.Varint).uint32(message.valid_client_versions[i]);
    /* optional uint32 active_match_count = 21; */
    if (message.active_match_count !== undefined) writer.tag(21, WireType.Varint).uint32(message.active_match_count);
    /* repeated CMsgGCToClientDevPlaytestStatus.RegionInfo regions = 22; */
    for (let i = 0; i < message.regions.length; i++)
      CMsgGCToClientDevPlaytestStatus_RegionInfo.internalBinaryWrite(
        message.regions[i],
        writer.tag(22, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgGCToClientDevPlaytestStatus
 */
export const CMsgGCToClientDevPlaytestStatus = new CMsgGCToClientDevPlaytestStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToClientDevPlaytestStatus_HeroWhitelist$Type extends MessageType<CMsgGCToClientDevPlaytestStatus_HeroWhitelist> {
  constructor() {
    super("CMsgGCToClientDevPlaytestStatus.HeroWhitelist", [
      {
        no: 1,
        name: "hero_id",
        kind: "scalar",
        localName: "hero_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "account_ids",
        kind: "scalar",
        localName: "account_ids",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgGCToClientDevPlaytestStatus_HeroWhitelist>,
  ): CMsgGCToClientDevPlaytestStatus_HeroWhitelist {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.account_ids = [];
    if (value !== undefined)
      reflectionMergePartial<CMsgGCToClientDevPlaytestStatus_HeroWhitelist>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgGCToClientDevPlaytestStatus_HeroWhitelist,
  ): CMsgGCToClientDevPlaytestStatus_HeroWhitelist {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 hero_id */ 1:
          message.hero_id = reader.uint32();
          break;
        case /* repeated uint32 account_ids */ 2:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.account_ids.push(reader.uint32());
          else message.account_ids.push(reader.uint32());
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgGCToClientDevPlaytestStatus_HeroWhitelist,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 hero_id = 1; */
    if (message.hero_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.hero_id);
    /* repeated uint32 account_ids = 2; */
    for (let i = 0; i < message.account_ids.length; i++) writer.tag(2, WireType.Varint).uint32(message.account_ids[i]);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgGCToClientDevPlaytestStatus.HeroWhitelist
 */
export const CMsgGCToClientDevPlaytestStatus_HeroWhitelist = new CMsgGCToClientDevPlaytestStatus_HeroWhitelist$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToClientDevPlaytestStatus_RegionInfo$Type extends MessageType<CMsgGCToClientDevPlaytestStatus_RegionInfo> {
  constructor() {
    super("CMsgGCToClientDevPlaytestStatus.RegionInfo", [
      {
        no: 1,
        name: "region",
        kind: "enum",
        opt: true,
        T: () => ["ECitadelRegionMode", ECitadelRegionMode],
      },
      {
        no: 5,
        name: "unranked_queue_size",
        kind: "scalar",
        localName: "unranked_queue_size",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "coop_queue_size",
        kind: "scalar",
        localName: "coop_queue_size",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 8,
        name: "coop_mm_formation_time",
        kind: "scalar",
        localName: "coop_mm_formation_time",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 9,
        name: "available_servers",
        kind: "scalar",
        localName: "available_servers",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgGCToClientDevPlaytestStatus_RegionInfo>,
  ): CMsgGCToClientDevPlaytestStatus_RegionInfo {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgGCToClientDevPlaytestStatus_RegionInfo>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgGCToClientDevPlaytestStatus_RegionInfo,
  ): CMsgGCToClientDevPlaytestStatus_RegionInfo {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional ECitadelRegionMode region */ 1:
          message.region = reader.int32();
          break;
        case /* optional uint32 unranked_queue_size */ 5:
          message.unranked_queue_size = reader.uint32();
          break;
        case /* optional uint32 coop_queue_size */ 6:
          message.coop_queue_size = reader.uint32();
          break;
        case /* optional uint32 coop_mm_formation_time */ 8:
          message.coop_mm_formation_time = reader.uint32();
          break;
        case /* optional uint32 available_servers */ 9:
          message.available_servers = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgGCToClientDevPlaytestStatus_RegionInfo,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional ECitadelRegionMode region = 1; */
    if (message.region !== undefined) writer.tag(1, WireType.Varint).int32(message.region);
    /* optional uint32 unranked_queue_size = 5; */
    if (message.unranked_queue_size !== undefined) writer.tag(5, WireType.Varint).uint32(message.unranked_queue_size);
    /* optional uint32 coop_queue_size = 6; */
    if (message.coop_queue_size !== undefined) writer.tag(6, WireType.Varint).uint32(message.coop_queue_size);
    /* optional uint32 coop_mm_formation_time = 8; */
    if (message.coop_mm_formation_time !== undefined)
      writer.tag(8, WireType.Varint).uint32(message.coop_mm_formation_time);
    /* optional uint32 available_servers = 9; */
    if (message.available_servers !== undefined) writer.tag(9, WireType.Varint).uint32(message.available_servers);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgGCToClientDevPlaytestStatus.RegionInfo
 */
export const CMsgGCToClientDevPlaytestStatus_RegionInfo = new CMsgGCToClientDevPlaytestStatus_RegionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToClientSDRTicket$Type extends MessageType<CMsgGCToClientSDRTicket> {
  constructor() {
    super("CMsgGCToClientSDRTicket", [
      {
        no: 1,
        name: "ticket",
        kind: "scalar",
        opt: true,
        T: 12 /*ScalarType.BYTES*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgGCToClientSDRTicket>): CMsgGCToClientSDRTicket {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgGCToClientSDRTicket>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgGCToClientSDRTicket,
  ): CMsgGCToClientSDRTicket {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional bytes ticket */ 1:
          message.ticket = reader.bytes();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgGCToClientSDRTicket,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional bytes ticket = 1; */
    if (message.ticket !== undefined) writer.tag(1, WireType.LengthDelimited).bytes(message.ticket);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgGCToClientSDRTicket
 */
export const CMsgGCToClientSDRTicket = new CMsgGCToClientSDRTicket$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCReplacementSDRTicket$Type extends MessageType<CMsgClientToGCReplacementSDRTicket> {
  constructor() {
    super("CMsgClientToGCReplacementSDRTicket", [
      {
        no: 1,
        name: "lobby_id",
        kind: "scalar",
        localName: "lobby_id",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCReplacementSDRTicket>): CMsgClientToGCReplacementSDRTicket {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCReplacementSDRTicket>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCReplacementSDRTicket,
  ): CMsgClientToGCReplacementSDRTicket {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional fixed64 lobby_id */ 1:
          message.lobby_id = reader.fixed64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCReplacementSDRTicket,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional fixed64 lobby_id = 1; */
    if (message.lobby_id !== undefined) writer.tag(1, WireType.Bit64).fixed64(message.lobby_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCReplacementSDRTicket
 */
export const CMsgClientToGCReplacementSDRTicket = new CMsgClientToGCReplacementSDRTicket$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCReplacementSDRTicketResponse$Type extends MessageType<CMsgClientToGCReplacementSDRTicketResponse> {
  constructor() {
    super("CMsgClientToGCReplacementSDRTicketResponse", [
      {
        no: 1,
        name: "ticket",
        kind: "scalar",
        opt: true,
        T: 12 /*ScalarType.BYTES*/,
      },
      {
        no: 2,
        name: "error_message",
        kind: "scalar",
        localName: "error_message",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgClientToGCReplacementSDRTicketResponse>,
  ): CMsgClientToGCReplacementSDRTicketResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCReplacementSDRTicketResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCReplacementSDRTicketResponse,
  ): CMsgClientToGCReplacementSDRTicketResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional bytes ticket */ 1:
          message.ticket = reader.bytes();
          break;
        case /* optional string error_message */ 2:
          message.error_message = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCReplacementSDRTicketResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional bytes ticket = 1; */
    if (message.ticket !== undefined) writer.tag(1, WireType.LengthDelimited).bytes(message.ticket);
    /* optional string error_message = 2; */
    if (message.error_message !== undefined) writer.tag(2, WireType.LengthDelimited).string(message.error_message);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCReplacementSDRTicketResponse
 */
export const CMsgClientToGCReplacementSDRTicketResponse = new CMsgClientToGCReplacementSDRTicketResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCSetServerConVar$Type extends MessageType<CMsgClientToGCSetServerConVar> {
  constructor() {
    super("CMsgClientToGCSetServerConVar", [
      {
        no: 1,
        name: "convar_name",
        kind: "scalar",
        localName: "convar_name",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 2,
        name: "convar_value",
        kind: "scalar",
        localName: "convar_value",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 3,
        name: "lobby_id",
        kind: "scalar",
        localName: "lobby_id",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCSetServerConVar>): CMsgClientToGCSetServerConVar {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCSetServerConVar>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCSetServerConVar,
  ): CMsgClientToGCSetServerConVar {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string convar_name */ 1:
          message.convar_name = reader.string();
          break;
        case /* optional string convar_value */ 2:
          message.convar_value = reader.string();
          break;
        case /* optional fixed64 lobby_id */ 3:
          message.lobby_id = reader.fixed64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCSetServerConVar,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional string convar_name = 1; */
    if (message.convar_name !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.convar_name);
    /* optional string convar_value = 2; */
    if (message.convar_value !== undefined) writer.tag(2, WireType.LengthDelimited).string(message.convar_value);
    /* optional fixed64 lobby_id = 3; */
    if (message.lobby_id !== undefined) writer.tag(3, WireType.Bit64).fixed64(message.lobby_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCSetServerConVar
 */
export const CMsgClientToGCSetServerConVar = new CMsgClientToGCSetServerConVar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCSetServerConVarResponse$Type extends MessageType<CMsgClientToGCSetServerConVarResponse> {
  constructor() {
    super("CMsgClientToGCSetServerConVarResponse", [
      {
        no: 1,
        name: "message",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCSetServerConVarResponse>): CMsgClientToGCSetServerConVarResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCSetServerConVarResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCSetServerConVarResponse,
  ): CMsgClientToGCSetServerConVarResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string message */ 1:
          message.message = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCSetServerConVarResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional string message = 1; */
    if (message.message !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.message);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCSetServerConVarResponse
 */
export const CMsgClientToGCSetServerConVarResponse = new CMsgClientToGCSetServerConVarResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPostMatchSurveyResponse$Type extends MessageType<CMsgClientToGCPostMatchSurveyResponse> {
  constructor() {
    super("CMsgClientToGCPostMatchSurveyResponse", [
      {
        no: 1,
        name: "post_match_survey",
        kind: "message",
        localName: "post_match_survey",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgClientToGCPostMatchSurveyResponse_PostMatchSurvey,
      },
      {
        no: 2,
        name: "match_id",
        kind: "scalar",
        localName: "match_id",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCPostMatchSurveyResponse>): CMsgClientToGCPostMatchSurveyResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.post_match_survey = [];
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCPostMatchSurveyResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCPostMatchSurveyResponse,
  ): CMsgClientToGCPostMatchSurveyResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated CMsgClientToGCPostMatchSurveyResponse.PostMatchSurvey post_match_survey */ 1:
          message.post_match_survey.push(
            CMsgClientToGCPostMatchSurveyResponse_PostMatchSurvey.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* optional uint64 match_id */ 2:
          message.match_id = reader.uint64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCPostMatchSurveyResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated CMsgClientToGCPostMatchSurveyResponse.PostMatchSurvey post_match_survey = 1; */
    for (let i = 0; i < message.post_match_survey.length; i++)
      CMsgClientToGCPostMatchSurveyResponse_PostMatchSurvey.internalBinaryWrite(
        message.post_match_survey[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional uint64 match_id = 2; */
    if (message.match_id !== undefined) writer.tag(2, WireType.Varint).uint64(message.match_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPostMatchSurveyResponse
 */
export const CMsgClientToGCPostMatchSurveyResponse = new CMsgClientToGCPostMatchSurveyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPostMatchSurveyResponse_PostMatchSurvey$Type extends MessageType<CMsgClientToGCPostMatchSurveyResponse_PostMatchSurvey> {
  constructor() {
    super("CMsgClientToGCPostMatchSurveyResponse.PostMatchSurvey", [
      {
        no: 1,
        name: "question_id",
        kind: "scalar",
        localName: "question_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "response_value",
        kind: "scalar",
        localName: "response_value",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgClientToGCPostMatchSurveyResponse_PostMatchSurvey>,
  ): CMsgClientToGCPostMatchSurveyResponse_PostMatchSurvey {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgClientToGCPostMatchSurveyResponse_PostMatchSurvey>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCPostMatchSurveyResponse_PostMatchSurvey,
  ): CMsgClientToGCPostMatchSurveyResponse_PostMatchSurvey {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 question_id */ 1:
          message.question_id = reader.uint32();
          break;
        case /* optional uint32 response_value */ 2:
          message.response_value = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCPostMatchSurveyResponse_PostMatchSurvey,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 question_id = 1; */
    if (message.question_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.question_id);
    /* optional uint32 response_value = 2; */
    if (message.response_value !== undefined) writer.tag(2, WireType.Varint).uint32(message.response_value);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPostMatchSurveyResponse.PostMatchSurvey
 */
export const CMsgClientToGCPostMatchSurveyResponse_PostMatchSurvey =
  new CMsgClientToGCPostMatchSurveyResponse_PostMatchSurvey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgPartyMMInfo$Type extends MessageType<CMsgPartyMMInfo> {
  constructor() {
    super("CMsgPartyMMInfo", [
      {
        no: 1,
        name: "platform",
        kind: "enum",
        opt: true,
        T: () => ["EGCPlatform", EGCPlatform],
      },
      {
        no: 2,
        name: "ping_times",
        kind: "message",
        localName: "ping_times",
        T: () => CMsgRegionPingTimesClient,
      },
      {
        no: 3,
        name: "client_version",
        kind: "scalar",
        localName: "client_version",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "region_mode",
        kind: "enum",
        localName: "region_mode",
        opt: true,
        T: () => ["ECitadelRegionMode", ECitadelRegionMode],
      },
    ]);
  }
  create(value?: PartialMessage<CMsgPartyMMInfo>): CMsgPartyMMInfo {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgPartyMMInfo>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgPartyMMInfo,
  ): CMsgPartyMMInfo {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional EGCPlatform platform */ 1:
          message.platform = reader.int32();
          break;
        case /* optional CMsgRegionPingTimesClient ping_times */ 2:
          message.ping_times = CMsgRegionPingTimesClient.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.ping_times,
          );
          break;
        case /* optional uint32 client_version */ 3:
          message.client_version = reader.uint32();
          break;
        case /* optional ECitadelRegionMode region_mode */ 4:
          message.region_mode = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: CMsgPartyMMInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* optional EGCPlatform platform = 1; */
    if (message.platform !== undefined) writer.tag(1, WireType.Varint).int32(message.platform);
    /* optional CMsgRegionPingTimesClient ping_times = 2; */
    if (message.ping_times)
      CMsgRegionPingTimesClient.internalBinaryWrite(
        message.ping_times,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional uint32 client_version = 3; */
    if (message.client_version !== undefined) writer.tag(3, WireType.Varint).uint32(message.client_version);
    /* optional ECitadelRegionMode region_mode = 4; */
    if (message.region_mode !== undefined) writer.tag(4, WireType.Varint).int32(message.region_mode);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgPartyMMInfo
 */
export const CMsgPartyMMInfo = new CMsgPartyMMInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPartyCreate$Type extends MessageType<CMsgClientToGCPartyCreate> {
  constructor() {
    super("CMsgClientToGCPartyCreate", [
      {
        no: 1,
        name: "party_mm_info",
        kind: "message",
        localName: "party_mm_info",
        T: () => CMsgPartyMMInfo,
      },
      {
        no: 3,
        name: "invite_account_id",
        kind: "scalar",
        localName: "invite_account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "disable_party_code",
        kind: "scalar",
        localName: "disable_party_code",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 5,
        name: "is_private_lobby",
        kind: "scalar",
        localName: "is_private_lobby",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 6,
        name: "region_mode",
        kind: "enum",
        localName: "region_mode",
        opt: true,
        T: () => ["ECitadelRegionMode", ECitadelRegionMode],
      },
      {
        no: 7,
        name: "server_search_key",
        kind: "scalar",
        localName: "server_search_key",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCPartyCreate>): CMsgClientToGCPartyCreate {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCPartyCreate>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCPartyCreate,
  ): CMsgClientToGCPartyCreate {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgPartyMMInfo party_mm_info */ 1:
          message.party_mm_info = CMsgPartyMMInfo.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.party_mm_info,
          );
          break;
        case /* optional uint32 invite_account_id */ 3:
          message.invite_account_id = reader.uint32();
          break;
        case /* optional bool disable_party_code */ 4:
          message.disable_party_code = reader.bool();
          break;
        case /* optional bool is_private_lobby */ 5:
          message.is_private_lobby = reader.bool();
          break;
        case /* optional ECitadelRegionMode region_mode */ 6:
          message.region_mode = reader.int32();
          break;
        case /* optional string server_search_key */ 7:
          message.server_search_key = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCPartyCreate,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgPartyMMInfo party_mm_info = 1; */
    if (message.party_mm_info)
      CMsgPartyMMInfo.internalBinaryWrite(
        message.party_mm_info,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional uint32 invite_account_id = 3; */
    if (message.invite_account_id !== undefined) writer.tag(3, WireType.Varint).uint32(message.invite_account_id);
    /* optional bool disable_party_code = 4; */
    if (message.disable_party_code !== undefined) writer.tag(4, WireType.Varint).bool(message.disable_party_code);
    /* optional bool is_private_lobby = 5; */
    if (message.is_private_lobby !== undefined) writer.tag(5, WireType.Varint).bool(message.is_private_lobby);
    /* optional ECitadelRegionMode region_mode = 6; */
    if (message.region_mode !== undefined) writer.tag(6, WireType.Varint).int32(message.region_mode);
    /* optional string server_search_key = 7; */
    if (message.server_search_key !== undefined)
      writer.tag(7, WireType.LengthDelimited).string(message.server_search_key);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPartyCreate
 */
export const CMsgClientToGCPartyCreate = new CMsgClientToGCPartyCreate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPartyCreateResponse$Type extends MessageType<CMsgClientToGCPartyCreateResponse> {
  constructor() {
    super("CMsgClientToGCPartyCreateResponse", [
      {
        no: 1,
        name: "result",
        kind: "enum",
        opt: true,
        T: () => ["CMsgClientToGCPartyCreateResponse.EResponse", CMsgClientToGCPartyCreateResponse_EResponse],
      },
      {
        no: 2,
        name: "party_id",
        kind: "scalar",
        localName: "party_id",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCPartyCreateResponse>): CMsgClientToGCPartyCreateResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCPartyCreateResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCPartyCreateResponse,
  ): CMsgClientToGCPartyCreateResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCPartyCreateResponse.EResponse result */ 1:
          message.result = reader.int32();
          break;
        case /* optional fixed64 party_id */ 2:
          message.party_id = reader.fixed64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCPartyCreateResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCPartyCreateResponse.EResponse result = 1; */
    if (message.result !== undefined) writer.tag(1, WireType.Varint).int32(message.result);
    /* optional fixed64 party_id = 2; */
    if (message.party_id !== undefined) writer.tag(2, WireType.Bit64).fixed64(message.party_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPartyCreateResponse
 */
export const CMsgClientToGCPartyCreateResponse = new CMsgClientToGCPartyCreateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPartyLeave$Type extends MessageType<CMsgClientToGCPartyLeave> {
  constructor() {
    super("CMsgClientToGCPartyLeave", [
      {
        no: 1,
        name: "party_id",
        kind: "scalar",
        localName: "party_id",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCPartyLeave>): CMsgClientToGCPartyLeave {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCPartyLeave>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCPartyLeave,
  ): CMsgClientToGCPartyLeave {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional fixed64 party_id */ 1:
          message.party_id = reader.fixed64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCPartyLeave,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional fixed64 party_id = 1; */
    if (message.party_id !== undefined) writer.tag(1, WireType.Bit64).fixed64(message.party_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPartyLeave
 */
export const CMsgClientToGCPartyLeave = new CMsgClientToGCPartyLeave$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPartyLeaveResponse$Type extends MessageType<CMsgClientToGCPartyLeaveResponse> {
  constructor() {
    super("CMsgClientToGCPartyLeaveResponse", [
      {
        no: 1,
        name: "result",
        kind: "enum",
        opt: true,
        T: () => ["CMsgClientToGCPartyLeaveResponse.EResponse", CMsgClientToGCPartyLeaveResponse_EResponse],
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCPartyLeaveResponse>): CMsgClientToGCPartyLeaveResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCPartyLeaveResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCPartyLeaveResponse,
  ): CMsgClientToGCPartyLeaveResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCPartyLeaveResponse.EResponse result */ 1:
          message.result = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCPartyLeaveResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCPartyLeaveResponse.EResponse result = 1; */
    if (message.result !== undefined) writer.tag(1, WireType.Varint).int32(message.result);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPartyLeaveResponse
 */
export const CMsgClientToGCPartyLeaveResponse = new CMsgClientToGCPartyLeaveResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPartyJoin$Type extends MessageType<CMsgClientToGCPartyJoin> {
  constructor() {
    super("CMsgClientToGCPartyJoin", [
      {
        no: 1,
        name: "party_id",
        kind: "scalar",
        localName: "party_id",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 2,
        name: "is_rejoin",
        kind: "scalar",
        localName: "is_rejoin",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 3,
        name: "party_mm_info",
        kind: "message",
        localName: "party_mm_info",
        T: () => CMsgPartyMMInfo,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCPartyJoin>): CMsgClientToGCPartyJoin {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCPartyJoin>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCPartyJoin,
  ): CMsgClientToGCPartyJoin {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional fixed64 party_id */ 1:
          message.party_id = reader.fixed64().toBigInt();
          break;
        case /* optional bool is_rejoin */ 2:
          message.is_rejoin = reader.bool();
          break;
        case /* optional CMsgPartyMMInfo party_mm_info */ 3:
          message.party_mm_info = CMsgPartyMMInfo.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.party_mm_info,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCPartyJoin,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional fixed64 party_id = 1; */
    if (message.party_id !== undefined) writer.tag(1, WireType.Bit64).fixed64(message.party_id);
    /* optional bool is_rejoin = 2; */
    if (message.is_rejoin !== undefined) writer.tag(2, WireType.Varint).bool(message.is_rejoin);
    /* optional CMsgPartyMMInfo party_mm_info = 3; */
    if (message.party_mm_info)
      CMsgPartyMMInfo.internalBinaryWrite(
        message.party_mm_info,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPartyJoin
 */
export const CMsgClientToGCPartyJoin = new CMsgClientToGCPartyJoin$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPartyJoinResponse$Type extends MessageType<CMsgClientToGCPartyJoinResponse> {
  constructor() {
    super("CMsgClientToGCPartyJoinResponse", [
      {
        no: 1,
        name: "result",
        kind: "enum",
        opt: true,
        T: () => ["CMsgClientToGCPartyJoinResponse.EResponse", CMsgClientToGCPartyJoinResponse_EResponse],
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCPartyJoinResponse>): CMsgClientToGCPartyJoinResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCPartyJoinResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCPartyJoinResponse,
  ): CMsgClientToGCPartyJoinResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCPartyJoinResponse.EResponse result */ 1:
          message.result = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCPartyJoinResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCPartyJoinResponse.EResponse result = 1; */
    if (message.result !== undefined) writer.tag(1, WireType.Varint).int32(message.result);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPartyJoinResponse
 */
export const CMsgClientToGCPartyJoinResponse = new CMsgClientToGCPartyJoinResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPartyAction$Type extends MessageType<CMsgClientToGCPartyAction> {
  constructor() {
    super("CMsgClientToGCPartyAction", [
      {
        no: 1,
        name: "party_id",
        kind: "scalar",
        localName: "party_id",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 2,
        name: "target_account_id",
        kind: "scalar",
        localName: "target_account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "action_id",
        kind: "enum",
        localName: "action_id",
        opt: true,
        T: () => ["CMsgClientToGCPartyAction.EAction", CMsgClientToGCPartyAction_EAction],
      },
      {
        no: 4,
        name: "uint_value",
        kind: "scalar",
        localName: "uint_value",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 5,
        name: "bool_value",
        kind: "scalar",
        localName: "bool_value",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 6,
        name: "str_value",
        kind: "scalar",
        localName: "str_value",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCPartyAction>): CMsgClientToGCPartyAction {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCPartyAction>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCPartyAction,
  ): CMsgClientToGCPartyAction {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional fixed64 party_id */ 1:
          message.party_id = reader.fixed64().toBigInt();
          break;
        case /* optional uint32 target_account_id */ 2:
          message.target_account_id = reader.uint32();
          break;
        case /* optional CMsgClientToGCPartyAction.EAction action_id */ 3:
          message.action_id = reader.int32();
          break;
        case /* optional uint64 uint_value */ 4:
          message.uint_value = reader.uint64().toBigInt();
          break;
        case /* optional bool bool_value */ 5:
          message.bool_value = reader.bool();
          break;
        case /* optional string str_value */ 6:
          message.str_value = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCPartyAction,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional fixed64 party_id = 1; */
    if (message.party_id !== undefined) writer.tag(1, WireType.Bit64).fixed64(message.party_id);
    /* optional uint32 target_account_id = 2; */
    if (message.target_account_id !== undefined) writer.tag(2, WireType.Varint).uint32(message.target_account_id);
    /* optional CMsgClientToGCPartyAction.EAction action_id = 3; */
    if (message.action_id !== undefined) writer.tag(3, WireType.Varint).int32(message.action_id);
    /* optional uint64 uint_value = 4; */
    if (message.uint_value !== undefined) writer.tag(4, WireType.Varint).uint64(message.uint_value);
    /* optional bool bool_value = 5; */
    if (message.bool_value !== undefined) writer.tag(5, WireType.Varint).bool(message.bool_value);
    /* optional string str_value = 6; */
    if (message.str_value !== undefined) writer.tag(6, WireType.LengthDelimited).string(message.str_value);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPartyAction
 */
export const CMsgClientToGCPartyAction = new CMsgClientToGCPartyAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPartyActionResponse$Type extends MessageType<CMsgClientToGCPartyActionResponse> {
  constructor() {
    super("CMsgClientToGCPartyActionResponse", [
      {
        no: 1,
        name: "result",
        kind: "enum",
        opt: true,
        T: () => ["CMsgClientToGCPartyActionResponse.EResponse", CMsgClientToGCPartyActionResponse_EResponse],
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCPartyActionResponse>): CMsgClientToGCPartyActionResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCPartyActionResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCPartyActionResponse,
  ): CMsgClientToGCPartyActionResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCPartyActionResponse.EResponse result */ 1:
          message.result = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCPartyActionResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCPartyActionResponse.EResponse result = 1; */
    if (message.result !== undefined) writer.tag(1, WireType.Varint).int32(message.result);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPartyActionResponse
 */
export const CMsgClientToGCPartyActionResponse = new CMsgClientToGCPartyActionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPartySetMode$Type extends MessageType<CMsgClientToGCPartySetMode> {
  constructor() {
    super("CMsgClientToGCPartySetMode", [
      {
        no: 1,
        name: "party_id",
        kind: "scalar",
        localName: "party_id",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 2,
        name: "match_mode",
        kind: "enum",
        localName: "match_mode",
        opt: true,
        T: () => ["ECitadelMatchMode", ECitadelMatchMode],
      },
      {
        no: 3,
        name: "game_mode",
        kind: "enum",
        localName: "game_mode",
        opt: true,
        T: () => ["ECitadelGameMode", ECitadelGameMode],
      },
      {
        no: 4,
        name: "bot_difficulty",
        kind: "enum",
        localName: "bot_difficulty",
        opt: true,
        T: () => ["ECitadelBotDifficulty", ECitadelBotDifficulty],
      },
      {
        no: 5,
        name: "dev_server_command",
        kind: "scalar",
        localName: "dev_server_command",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 6,
        name: "region_mode",
        kind: "enum",
        localName: "region_mode",
        opt: true,
        T: () => ["ECitadelRegionMode", ECitadelRegionMode],
      },
      {
        no: 7,
        name: "ranked_schedule",
        kind: "scalar",
        localName: "ranked_schedule",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCPartySetMode>): CMsgClientToGCPartySetMode {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCPartySetMode>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCPartySetMode,
  ): CMsgClientToGCPartySetMode {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional fixed64 party_id */ 1:
          message.party_id = reader.fixed64().toBigInt();
          break;
        case /* optional ECitadelMatchMode match_mode */ 2:
          message.match_mode = reader.int32();
          break;
        case /* optional ECitadelGameMode game_mode */ 3:
          message.game_mode = reader.int32();
          break;
        case /* optional ECitadelBotDifficulty bot_difficulty */ 4:
          message.bot_difficulty = reader.int32();
          break;
        case /* optional string dev_server_command */ 5:
          message.dev_server_command = reader.string();
          break;
        case /* optional ECitadelRegionMode region_mode */ 6:
          message.region_mode = reader.int32();
          break;
        case /* optional uint32 ranked_schedule */ 7:
          message.ranked_schedule = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCPartySetMode,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional fixed64 party_id = 1; */
    if (message.party_id !== undefined) writer.tag(1, WireType.Bit64).fixed64(message.party_id);
    /* optional ECitadelMatchMode match_mode = 2; */
    if (message.match_mode !== undefined) writer.tag(2, WireType.Varint).int32(message.match_mode);
    /* optional ECitadelGameMode game_mode = 3; */
    if (message.game_mode !== undefined) writer.tag(3, WireType.Varint).int32(message.game_mode);
    /* optional ECitadelBotDifficulty bot_difficulty = 4; */
    if (message.bot_difficulty !== undefined) writer.tag(4, WireType.Varint).int32(message.bot_difficulty);
    /* optional string dev_server_command = 5; */
    if (message.dev_server_command !== undefined)
      writer.tag(5, WireType.LengthDelimited).string(message.dev_server_command);
    /* optional ECitadelRegionMode region_mode = 6; */
    if (message.region_mode !== undefined) writer.tag(6, WireType.Varint).int32(message.region_mode);
    /* optional uint32 ranked_schedule = 7; */
    if (message.ranked_schedule !== undefined) writer.tag(7, WireType.Varint).uint32(message.ranked_schedule);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPartySetMode
 */
export const CMsgClientToGCPartySetMode = new CMsgClientToGCPartySetMode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPartySetModeResponse$Type extends MessageType<CMsgClientToGCPartySetModeResponse> {
  constructor() {
    super("CMsgClientToGCPartySetModeResponse", [
      {
        no: 1,
        name: "result",
        kind: "enum",
        opt: true,
        T: () => ["CMsgClientToGCPartySetModeResponse.EResponse", CMsgClientToGCPartySetModeResponse_EResponse],
      },
      {
        no: 2,
        name: "time_stamp",
        kind: "scalar",
        localName: "time_stamp",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "account_id",
        kind: "scalar",
        localName: "account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCPartySetModeResponse>): CMsgClientToGCPartySetModeResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCPartySetModeResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCPartySetModeResponse,
  ): CMsgClientToGCPartySetModeResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCPartySetModeResponse.EResponse result */ 1:
          message.result = reader.int32();
          break;
        case /* optional uint32 time_stamp */ 2:
          message.time_stamp = reader.uint32();
          break;
        case /* optional uint32 account_id */ 3:
          message.account_id = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCPartySetModeResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCPartySetModeResponse.EResponse result = 1; */
    if (message.result !== undefined) writer.tag(1, WireType.Varint).int32(message.result);
    /* optional uint32 time_stamp = 2; */
    if (message.time_stamp !== undefined) writer.tag(2, WireType.Varint).uint32(message.time_stamp);
    /* optional uint32 account_id = 3; */
    if (message.account_id !== undefined) writer.tag(3, WireType.Varint).uint32(message.account_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPartySetModeResponse
 */
export const CMsgClientToGCPartySetModeResponse = new CMsgClientToGCPartySetModeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPartyStartMatch$Type extends MessageType<CMsgClientToGCPartyStartMatch> {
  constructor() {
    super("CMsgClientToGCPartyStartMatch", [
      {
        no: 1,
        name: "party_id",
        kind: "scalar",
        localName: "party_id",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCPartyStartMatch>): CMsgClientToGCPartyStartMatch {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCPartyStartMatch>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCPartyStartMatch,
  ): CMsgClientToGCPartyStartMatch {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional fixed64 party_id */ 1:
          message.party_id = reader.fixed64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCPartyStartMatch,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional fixed64 party_id = 1; */
    if (message.party_id !== undefined) writer.tag(1, WireType.Bit64).fixed64(message.party_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPartyStartMatch
 */
export const CMsgClientToGCPartyStartMatch = new CMsgClientToGCPartyStartMatch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPartyStartMatchResponse$Type extends MessageType<CMsgClientToGCPartyStartMatchResponse> {
  constructor() {
    super("CMsgClientToGCPartyStartMatchResponse", [
      {
        no: 1,
        name: "result",
        kind: "enum",
        opt: true,
        T: () => ["CMsgClientToGCPartyStartMatchResponse.EResponse", CMsgClientToGCPartyStartMatchResponse_EResponse],
      },
      {
        no: 2,
        name: "account_id",
        kind: "scalar",
        localName: "account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCPartyStartMatchResponse>): CMsgClientToGCPartyStartMatchResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCPartyStartMatchResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCPartyStartMatchResponse,
  ): CMsgClientToGCPartyStartMatchResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCPartyStartMatchResponse.EResponse result */ 1:
          message.result = reader.int32();
          break;
        case /* optional uint32 account_id */ 2:
          message.account_id = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCPartyStartMatchResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCPartyStartMatchResponse.EResponse result = 1; */
    if (message.result !== undefined) writer.tag(1, WireType.Varint).int32(message.result);
    /* optional uint32 account_id = 2; */
    if (message.account_id !== undefined) writer.tag(2, WireType.Varint).uint32(message.account_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPartyStartMatchResponse
 */
export const CMsgClientToGCPartyStartMatchResponse = new CMsgClientToGCPartyStartMatchResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPartyInviteUser$Type extends MessageType<CMsgClientToGCPartyInviteUser> {
  constructor() {
    super("CMsgClientToGCPartyInviteUser", [
      {
        no: 1,
        name: "party_id",
        kind: "scalar",
        localName: "party_id",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 2,
        name: "invite_account_id",
        kind: "scalar",
        localName: "invite_account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCPartyInviteUser>): CMsgClientToGCPartyInviteUser {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCPartyInviteUser>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCPartyInviteUser,
  ): CMsgClientToGCPartyInviteUser {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional fixed64 party_id */ 1:
          message.party_id = reader.fixed64().toBigInt();
          break;
        case /* optional uint32 invite_account_id */ 2:
          message.invite_account_id = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCPartyInviteUser,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional fixed64 party_id = 1; */
    if (message.party_id !== undefined) writer.tag(1, WireType.Bit64).fixed64(message.party_id);
    /* optional uint32 invite_account_id = 2; */
    if (message.invite_account_id !== undefined) writer.tag(2, WireType.Varint).uint32(message.invite_account_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPartyInviteUser
 */
export const CMsgClientToGCPartyInviteUser = new CMsgClientToGCPartyInviteUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPartyInviteUserResponse$Type extends MessageType<CMsgClientToGCPartyInviteUserResponse> {
  constructor() {
    super("CMsgClientToGCPartyInviteUserResponse", [
      {
        no: 1,
        name: "result",
        kind: "enum",
        opt: true,
        T: () => ["CMsgClientToGCPartyInviteUserResponse.EResponse", CMsgClientToGCPartyInviteUserResponse_EResponse],
      },
      {
        no: 2,
        name: "user_online",
        kind: "scalar",
        localName: "user_online",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCPartyInviteUserResponse>): CMsgClientToGCPartyInviteUserResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCPartyInviteUserResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCPartyInviteUserResponse,
  ): CMsgClientToGCPartyInviteUserResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCPartyInviteUserResponse.EResponse result */ 1:
          message.result = reader.int32();
          break;
        case /* optional bool user_online */ 2:
          message.user_online = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCPartyInviteUserResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCPartyInviteUserResponse.EResponse result = 1; */
    if (message.result !== undefined) writer.tag(1, WireType.Varint).int32(message.result);
    /* optional bool user_online = 2; */
    if (message.user_online !== undefined) writer.tag(2, WireType.Varint).bool(message.user_online);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPartyInviteUserResponse
 */
export const CMsgClientToGCPartyInviteUserResponse = new CMsgClientToGCPartyInviteUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToClientPartyEvent$Type extends MessageType<CMsgGCToClientPartyEvent> {
  constructor() {
    super("CMsgGCToClientPartyEvent", [
      {
        no: 1,
        name: "party_id",
        kind: "scalar",
        localName: "party_id",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 2,
        name: "event",
        kind: "enum",
        opt: true,
        T: () => ["CMsgGCToClientPartyEvent.EEvent", CMsgGCToClientPartyEvent_EEvent],
      },
      {
        no: 3,
        name: "initiator_account_id",
        kind: "scalar",
        localName: "initiator_account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "target_account_id",
        kind: "scalar",
        localName: "target_account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "bytes_data",
        kind: "scalar",
        localName: "bytes_data",
        opt: true,
        T: 12 /*ScalarType.BYTES*/,
      },
      {
        no: 6,
        name: "str_data",
        kind: "scalar",
        localName: "str_data",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 7,
        name: "uint_data",
        kind: "scalar",
        localName: "uint_data",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgGCToClientPartyEvent>): CMsgGCToClientPartyEvent {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgGCToClientPartyEvent>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgGCToClientPartyEvent,
  ): CMsgGCToClientPartyEvent {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional fixed64 party_id */ 1:
          message.party_id = reader.fixed64().toBigInt();
          break;
        case /* optional CMsgGCToClientPartyEvent.EEvent event */ 2:
          message.event = reader.int32();
          break;
        case /* optional uint32 initiator_account_id */ 3:
          message.initiator_account_id = reader.uint32();
          break;
        case /* optional uint32 target_account_id */ 4:
          message.target_account_id = reader.uint32();
          break;
        case /* optional bytes bytes_data */ 5:
          message.bytes_data = reader.bytes();
          break;
        case /* optional string str_data */ 6:
          message.str_data = reader.string();
          break;
        case /* optional uint64 uint_data */ 7:
          message.uint_data = reader.uint64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgGCToClientPartyEvent,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional fixed64 party_id = 1; */
    if (message.party_id !== undefined) writer.tag(1, WireType.Bit64).fixed64(message.party_id);
    /* optional CMsgGCToClientPartyEvent.EEvent event = 2; */
    if (message.event !== undefined) writer.tag(2, WireType.Varint).int32(message.event);
    /* optional uint32 initiator_account_id = 3; */
    if (message.initiator_account_id !== undefined) writer.tag(3, WireType.Varint).uint32(message.initiator_account_id);
    /* optional uint32 target_account_id = 4; */
    if (message.target_account_id !== undefined) writer.tag(4, WireType.Varint).uint32(message.target_account_id);
    /* optional bytes bytes_data = 5; */
    if (message.bytes_data !== undefined) writer.tag(5, WireType.LengthDelimited).bytes(message.bytes_data);
    /* optional string str_data = 6; */
    if (message.str_data !== undefined) writer.tag(6, WireType.LengthDelimited).string(message.str_data);
    /* optional uint64 uint_data = 7; */
    if (message.uint_data !== undefined) writer.tag(7, WireType.Varint).uint64(message.uint_data);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgGCToClientPartyEvent
 */
export const CMsgGCToClientPartyEvent = new CMsgGCToClientPartyEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToClientCanRejoinParty$Type extends MessageType<CMsgGCToClientCanRejoinParty> {
  constructor() {
    super("CMsgGCToClientCanRejoinParty", [
      {
        no: 1,
        name: "party_id",
        kind: "scalar",
        localName: "party_id",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgGCToClientCanRejoinParty>): CMsgGCToClientCanRejoinParty {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgGCToClientCanRejoinParty>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgGCToClientCanRejoinParty,
  ): CMsgGCToClientCanRejoinParty {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional fixed64 party_id */ 1:
          message.party_id = reader.fixed64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgGCToClientCanRejoinParty,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional fixed64 party_id = 1; */
    if (message.party_id !== undefined) writer.tag(1, WireType.Bit64).fixed64(message.party_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgGCToClientCanRejoinParty
 */
export const CMsgGCToClientCanRejoinParty = new CMsgGCToClientCanRejoinParty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPartyJoinViaCode$Type extends MessageType<CMsgClientToGCPartyJoinViaCode> {
  constructor() {
    super("CMsgClientToGCPartyJoinViaCode", [
      {
        no: 1,
        name: "join_code",
        kind: "scalar",
        localName: "join_code",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 2,
        name: "party_mm_info",
        kind: "message",
        localName: "party_mm_info",
        T: () => CMsgPartyMMInfo,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCPartyJoinViaCode>): CMsgClientToGCPartyJoinViaCode {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCPartyJoinViaCode>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCPartyJoinViaCode,
  ): CMsgClientToGCPartyJoinViaCode {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 join_code */ 1:
          message.join_code = reader.uint64().toBigInt();
          break;
        case /* optional CMsgPartyMMInfo party_mm_info */ 2:
          message.party_mm_info = CMsgPartyMMInfo.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.party_mm_info,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCPartyJoinViaCode,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint64 join_code = 1; */
    if (message.join_code !== undefined) writer.tag(1, WireType.Varint).uint64(message.join_code);
    /* optional CMsgPartyMMInfo party_mm_info = 2; */
    if (message.party_mm_info)
      CMsgPartyMMInfo.internalBinaryWrite(
        message.party_mm_info,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPartyJoinViaCode
 */
export const CMsgClientToGCPartyJoinViaCode = new CMsgClientToGCPartyJoinViaCode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPartyJoinViaCodeResponse$Type extends MessageType<CMsgClientToGCPartyJoinViaCodeResponse> {
  constructor() {
    super("CMsgClientToGCPartyJoinViaCodeResponse", [
      {
        no: 1,
        name: "result",
        kind: "enum",
        opt: true,
        T: () => ["CMsgClientToGCPartyJoinResponse.EResponse", CMsgClientToGCPartyJoinResponse_EResponse],
      },
      {
        no: 2,
        name: "party_id",
        kind: "scalar",
        localName: "party_id",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCPartyJoinViaCodeResponse>): CMsgClientToGCPartyJoinViaCodeResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCPartyJoinViaCodeResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCPartyJoinViaCodeResponse,
  ): CMsgClientToGCPartyJoinViaCodeResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCPartyJoinResponse.EResponse result */ 1:
          message.result = reader.int32();
          break;
        case /* optional fixed64 party_id */ 2:
          message.party_id = reader.fixed64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCPartyJoinViaCodeResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCPartyJoinResponse.EResponse result = 1; */
    if (message.result !== undefined) writer.tag(1, WireType.Varint).int32(message.result);
    /* optional fixed64 party_id = 2; */
    if (message.party_id !== undefined) writer.tag(2, WireType.Bit64).fixed64(message.party_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPartyJoinViaCodeResponse
 */
export const CMsgClientToGCPartyJoinViaCodeResponse = new CMsgClientToGCPartyJoinViaCodeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPartySetReadyState$Type extends MessageType<CMsgClientToGCPartySetReadyState> {
  constructor() {
    super("CMsgClientToGCPartySetReadyState", [
      {
        no: 1,
        name: "party_id",
        kind: "scalar",
        localName: "party_id",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 2,
        name: "ready_state",
        kind: "scalar",
        localName: "ready_state",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 3,
        name: "hero_roster",
        kind: "message",
        localName: "hero_roster",
        T: () => CMsgHeroSelectionMatchInfo,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCPartySetReadyState>): CMsgClientToGCPartySetReadyState {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCPartySetReadyState>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCPartySetReadyState,
  ): CMsgClientToGCPartySetReadyState {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional fixed64 party_id */ 1:
          message.party_id = reader.fixed64().toBigInt();
          break;
        case /* optional bool ready_state */ 2:
          message.ready_state = reader.bool();
          break;
        case /* optional CMsgHeroSelectionMatchInfo hero_roster */ 3:
          message.hero_roster = CMsgHeroSelectionMatchInfo.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.hero_roster,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCPartySetReadyState,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional fixed64 party_id = 1; */
    if (message.party_id !== undefined) writer.tag(1, WireType.Bit64).fixed64(message.party_id);
    /* optional bool ready_state = 2; */
    if (message.ready_state !== undefined) writer.tag(2, WireType.Varint).bool(message.ready_state);
    /* optional CMsgHeroSelectionMatchInfo hero_roster = 3; */
    if (message.hero_roster)
      CMsgHeroSelectionMatchInfo.internalBinaryWrite(
        message.hero_roster,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPartySetReadyState
 */
export const CMsgClientToGCPartySetReadyState = new CMsgClientToGCPartySetReadyState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPartySetReadyStateResponse$Type extends MessageType<CMsgClientToGCPartySetReadyStateResponse> {
  constructor() {
    super("CMsgClientToGCPartySetReadyStateResponse", [
      {
        no: 1,
        name: "result",
        kind: "enum",
        opt: true,
        T: () => [
          "CMsgClientToGCPartySetReadyStateResponse.EResponse",
          CMsgClientToGCPartySetReadyStateResponse_EResponse,
        ],
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCPartySetReadyStateResponse>): CMsgClientToGCPartySetReadyStateResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCPartySetReadyStateResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCPartySetReadyStateResponse,
  ): CMsgClientToGCPartySetReadyStateResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCPartySetReadyStateResponse.EResponse result */ 1:
          message.result = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCPartySetReadyStateResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCPartySetReadyStateResponse.EResponse result = 1; */
    if (message.result !== undefined) writer.tag(1, WireType.Varint).int32(message.result);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPartySetReadyStateResponse
 */
export const CMsgClientToGCPartySetReadyStateResponse = new CMsgClientToGCPartySetReadyStateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCDevSetMMBias$Type extends MessageType<CMsgClientToGCDevSetMMBias> {
  constructor() {
    super("CMsgClientToGCDevSetMMBias", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        localName: "account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "value",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCDevSetMMBias>): CMsgClientToGCDevSetMMBias {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCDevSetMMBias>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCDevSetMMBias,
  ): CMsgClientToGCDevSetMMBias {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.account_id = reader.uint32();
          break;
        case /* optional uint32 value */ 2:
          message.value = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCDevSetMMBias,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
    /* optional uint32 value = 2; */
    if (message.value !== undefined) writer.tag(2, WireType.Varint).uint32(message.value);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCDevSetMMBias
 */
export const CMsgClientToGCDevSetMMBias = new CMsgClientToGCDevSetMMBias$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetMatchHistory$Type extends MessageType<CMsgClientToGCGetMatchHistory> {
  constructor() {
    super("CMsgClientToGCGetMatchHistory", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        localName: "account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "continue_cursor",
        kind: "scalar",
        localName: "continue_cursor",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCGetMatchHistory>): CMsgClientToGCGetMatchHistory {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetMatchHistory>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGetMatchHistory,
  ): CMsgClientToGCGetMatchHistory {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.account_id = reader.uint32();
          break;
        case /* optional uint64 continue_cursor */ 2:
          message.continue_cursor = reader.uint64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCGetMatchHistory,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
    /* optional uint64 continue_cursor = 2; */
    if (message.continue_cursor !== undefined) writer.tag(2, WireType.Varint).uint64(message.continue_cursor);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetMatchHistory
 */
export const CMsgClientToGCGetMatchHistory = new CMsgClientToGCGetMatchHistory$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetMatchHistoryResponse$Type extends MessageType<CMsgClientToGCGetMatchHistoryResponse> {
  constructor() {
    super("CMsgClientToGCGetMatchHistoryResponse", [
      {
        no: 1,
        name: "result",
        kind: "enum",
        opt: true,
        T: () => ["CMsgClientToGCGetMatchHistoryResponse.EResult", CMsgClientToGCGetMatchHistoryResponse_EResult],
      },
      {
        no: 2,
        name: "continue_cursor",
        kind: "scalar",
        localName: "continue_cursor",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 3,
        name: "matches",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgClientToGCGetMatchHistoryResponse_Match,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCGetMatchHistoryResponse>): CMsgClientToGCGetMatchHistoryResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.matches = [];
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetMatchHistoryResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGetMatchHistoryResponse,
  ): CMsgClientToGCGetMatchHistoryResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCGetMatchHistoryResponse.EResult result */ 1:
          message.result = reader.int32();
          break;
        case /* optional uint64 continue_cursor */ 2:
          message.continue_cursor = reader.uint64().toBigInt();
          break;
        case /* repeated CMsgClientToGCGetMatchHistoryResponse.Match matches */ 3:
          message.matches.push(
            CMsgClientToGCGetMatchHistoryResponse_Match.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCGetMatchHistoryResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCGetMatchHistoryResponse.EResult result = 1; */
    if (message.result !== undefined) writer.tag(1, WireType.Varint).int32(message.result);
    /* optional uint64 continue_cursor = 2; */
    if (message.continue_cursor !== undefined) writer.tag(2, WireType.Varint).uint64(message.continue_cursor);
    /* repeated CMsgClientToGCGetMatchHistoryResponse.Match matches = 3; */
    for (let i = 0; i < message.matches.length; i++)
      CMsgClientToGCGetMatchHistoryResponse_Match.internalBinaryWrite(
        message.matches[i],
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetMatchHistoryResponse
 */
export const CMsgClientToGCGetMatchHistoryResponse = new CMsgClientToGCGetMatchHistoryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetMatchHistoryResponse_Match$Type extends MessageType<CMsgClientToGCGetMatchHistoryResponse_Match> {
  constructor() {
    super("CMsgClientToGCGetMatchHistoryResponse.Match", [
      {
        no: 1,
        name: "match_id",
        kind: "scalar",
        localName: "match_id",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 2,
        name: "hero_id",
        kind: "scalar",
        localName: "hero_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "match_duration_s",
        kind: "scalar",
        localName: "match_duration_s",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "start_time",
        kind: "scalar",
        localName: "start_time",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "match_result",
        kind: "scalar",
        localName: "match_result",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "player_team",
        kind: "enum",
        localName: "player_team",
        opt: true,
        T: () => ["ECitadelLobbyTeam", ECitadelLobbyTeam],
      },
      {
        no: 7,
        name: "player_kills",
        kind: "scalar",
        localName: "player_kills",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 8,
        name: "player_deaths",
        kind: "scalar",
        localName: "player_deaths",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 9,
        name: "player_assists",
        kind: "scalar",
        localName: "player_assists",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 11,
        name: "last_hits",
        kind: "scalar",
        localName: "last_hits",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 12,
        name: "denies",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 13,
        name: "hero_level",
        kind: "scalar",
        localName: "hero_level",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 14,
        name: "net_worth",
        kind: "scalar",
        localName: "net_worth",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 15,
        name: "objectives_mask_team0",
        kind: "scalar",
        localName: "objectives_mask_team0",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 16,
        name: "objectives_mask_team1",
        kind: "scalar",
        localName: "objectives_mask_team1",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 17,
        name: "team_abandoned",
        kind: "scalar",
        localName: "team_abandoned",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 18,
        name: "abandoned_time_s",
        kind: "scalar",
        localName: "abandoned_time_s",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgClientToGCGetMatchHistoryResponse_Match>,
  ): CMsgClientToGCGetMatchHistoryResponse_Match {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetMatchHistoryResponse_Match>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGetMatchHistoryResponse_Match,
  ): CMsgClientToGCGetMatchHistoryResponse_Match {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 match_id */ 1:
          message.match_id = reader.uint64().toBigInt();
          break;
        case /* optional uint32 hero_id */ 2:
          message.hero_id = reader.uint32();
          break;
        case /* optional uint32 match_duration_s */ 3:
          message.match_duration_s = reader.uint32();
          break;
        case /* optional uint32 start_time */ 4:
          message.start_time = reader.uint32();
          break;
        case /* optional uint32 match_result */ 5:
          message.match_result = reader.uint32();
          break;
        case /* optional ECitadelLobbyTeam player_team */ 6:
          message.player_team = reader.int32();
          break;
        case /* optional uint32 player_kills */ 7:
          message.player_kills = reader.uint32();
          break;
        case /* optional uint32 player_deaths */ 8:
          message.player_deaths = reader.uint32();
          break;
        case /* optional uint32 player_assists */ 9:
          message.player_assists = reader.uint32();
          break;
        case /* optional uint32 last_hits */ 11:
          message.last_hits = reader.uint32();
          break;
        case /* optional uint32 denies */ 12:
          message.denies = reader.uint32();
          break;
        case /* optional uint32 hero_level */ 13:
          message.hero_level = reader.uint32();
          break;
        case /* optional uint32 net_worth */ 14:
          message.net_worth = reader.uint32();
          break;
        case /* optional uint64 objectives_mask_team0 */ 15:
          message.objectives_mask_team0 = reader.uint64().toBigInt();
          break;
        case /* optional uint64 objectives_mask_team1 */ 16:
          message.objectives_mask_team1 = reader.uint64().toBigInt();
          break;
        case /* optional bool team_abandoned */ 17:
          message.team_abandoned = reader.bool();
          break;
        case /* optional uint32 abandoned_time_s */ 18:
          message.abandoned_time_s = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCGetMatchHistoryResponse_Match,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint64 match_id = 1; */
    if (message.match_id !== undefined) writer.tag(1, WireType.Varint).uint64(message.match_id);
    /* optional uint32 hero_id = 2; */
    if (message.hero_id !== undefined) writer.tag(2, WireType.Varint).uint32(message.hero_id);
    /* optional uint32 match_duration_s = 3; */
    if (message.match_duration_s !== undefined) writer.tag(3, WireType.Varint).uint32(message.match_duration_s);
    /* optional uint32 start_time = 4; */
    if (message.start_time !== undefined) writer.tag(4, WireType.Varint).uint32(message.start_time);
    /* optional uint32 match_result = 5; */
    if (message.match_result !== undefined) writer.tag(5, WireType.Varint).uint32(message.match_result);
    /* optional ECitadelLobbyTeam player_team = 6; */
    if (message.player_team !== undefined) writer.tag(6, WireType.Varint).int32(message.player_team);
    /* optional uint32 player_kills = 7; */
    if (message.player_kills !== undefined) writer.tag(7, WireType.Varint).uint32(message.player_kills);
    /* optional uint32 player_deaths = 8; */
    if (message.player_deaths !== undefined) writer.tag(8, WireType.Varint).uint32(message.player_deaths);
    /* optional uint32 player_assists = 9; */
    if (message.player_assists !== undefined) writer.tag(9, WireType.Varint).uint32(message.player_assists);
    /* optional uint32 last_hits = 11; */
    if (message.last_hits !== undefined) writer.tag(11, WireType.Varint).uint32(message.last_hits);
    /* optional uint32 denies = 12; */
    if (message.denies !== undefined) writer.tag(12, WireType.Varint).uint32(message.denies);
    /* optional uint32 hero_level = 13; */
    if (message.hero_level !== undefined) writer.tag(13, WireType.Varint).uint32(message.hero_level);
    /* optional uint32 net_worth = 14; */
    if (message.net_worth !== undefined) writer.tag(14, WireType.Varint).uint32(message.net_worth);
    /* optional uint64 objectives_mask_team0 = 15; */
    if (message.objectives_mask_team0 !== undefined)
      writer.tag(15, WireType.Varint).uint64(message.objectives_mask_team0);
    /* optional uint64 objectives_mask_team1 = 16; */
    if (message.objectives_mask_team1 !== undefined)
      writer.tag(16, WireType.Varint).uint64(message.objectives_mask_team1);
    /* optional bool team_abandoned = 17; */
    if (message.team_abandoned !== undefined) writer.tag(17, WireType.Varint).bool(message.team_abandoned);
    /* optional uint32 abandoned_time_s = 18; */
    if (message.abandoned_time_s !== undefined) writer.tag(18, WireType.Varint).uint32(message.abandoned_time_s);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetMatchHistoryResponse.Match
 */
export const CMsgClientToGCGetMatchHistoryResponse_Match = new CMsgClientToGCGetMatchHistoryResponse_Match$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCSpectateUser$Type extends MessageType<CMsgClientToGCSpectateUser> {
  constructor() {
    super("CMsgClientToGCSpectateUser", [
      {
        no: 1,
        name: "spectate_account_id",
        kind: "scalar",
        localName: "spectate_account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "region_mode",
        kind: "enum",
        localName: "region_mode",
        opt: true,
        T: () => ["ECitadelRegionMode", ECitadelRegionMode],
      },
      {
        no: 3,
        name: "client_version",
        kind: "scalar",
        localName: "client_version",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "client_platform",
        kind: "enum",
        localName: "client_platform",
        opt: true,
        T: () => ["EGCPlatform", EGCPlatform],
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCSpectateUser>): CMsgClientToGCSpectateUser {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCSpectateUser>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCSpectateUser,
  ): CMsgClientToGCSpectateUser {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 spectate_account_id */ 1:
          message.spectate_account_id = reader.uint32();
          break;
        case /* optional ECitadelRegionMode region_mode */ 2:
          message.region_mode = reader.int32();
          break;
        case /* optional uint32 client_version */ 3:
          message.client_version = reader.uint32();
          break;
        case /* optional EGCPlatform client_platform */ 4:
          message.client_platform = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCSpectateUser,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 spectate_account_id = 1; */
    if (message.spectate_account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.spectate_account_id);
    /* optional ECitadelRegionMode region_mode = 2; */
    if (message.region_mode !== undefined) writer.tag(2, WireType.Varint).int32(message.region_mode);
    /* optional uint32 client_version = 3; */
    if (message.client_version !== undefined) writer.tag(3, WireType.Varint).uint32(message.client_version);
    /* optional EGCPlatform client_platform = 4; */
    if (message.client_platform !== undefined) writer.tag(4, WireType.Varint).int32(message.client_platform);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCSpectateUser
 */
export const CMsgClientToGCSpectateUser = new CMsgClientToGCSpectateUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCSpectateUserResponse$Type extends MessageType<CMsgClientToGCSpectateUserResponse> {
  constructor() {
    super("CMsgClientToGCSpectateUserResponse", [
      {
        no: 1,
        name: "result",
        kind: "enum",
        opt: true,
        T: () => ["CMsgClientToGCSpectateUserResponse.EResponse", CMsgClientToGCSpectateUserResponse_EResponse],
      },
      {
        no: 3,
        name: "server_steam_id",
        kind: "scalar",
        localName: "server_steam_id",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 4,
        name: "sdr_key",
        kind: "scalar",
        localName: "sdr_key",
        opt: true,
        T: 12 /*ScalarType.BYTES*/,
      },
      {
        no: 5,
        name: "udp_connect_ip",
        kind: "scalar",
        localName: "udp_connect_ip",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "udp_connect_port",
        kind: "scalar",
        localName: "udp_connect_port",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 7,
        name: "lobby_id",
        kind: "scalar",
        localName: "lobby_id",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 8,
        name: "client_broadcast_url",
        kind: "scalar",
        localName: "client_broadcast_url",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCSpectateUserResponse>): CMsgClientToGCSpectateUserResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCSpectateUserResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCSpectateUserResponse,
  ): CMsgClientToGCSpectateUserResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCSpectateUserResponse.EResponse result */ 1:
          message.result = reader.int32();
          break;
        case /* optional fixed64 server_steam_id */ 3:
          message.server_steam_id = reader.fixed64().toBigInt();
          break;
        case /* optional bytes sdr_key */ 4:
          message.sdr_key = reader.bytes();
          break;
        case /* optional uint32 udp_connect_ip */ 5:
          message.udp_connect_ip = reader.uint32();
          break;
        case /* optional uint32 udp_connect_port */ 6:
          message.udp_connect_port = reader.uint32();
          break;
        case /* optional fixed64 lobby_id */ 7:
          message.lobby_id = reader.fixed64().toBigInt();
          break;
        case /* optional string client_broadcast_url */ 8:
          message.client_broadcast_url = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCSpectateUserResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCSpectateUserResponse.EResponse result = 1; */
    if (message.result !== undefined) writer.tag(1, WireType.Varint).int32(message.result);
    /* optional fixed64 server_steam_id = 3; */
    if (message.server_steam_id !== undefined) writer.tag(3, WireType.Bit64).fixed64(message.server_steam_id);
    /* optional bytes sdr_key = 4; */
    if (message.sdr_key !== undefined) writer.tag(4, WireType.LengthDelimited).bytes(message.sdr_key);
    /* optional uint32 udp_connect_ip = 5; */
    if (message.udp_connect_ip !== undefined) writer.tag(5, WireType.Varint).uint32(message.udp_connect_ip);
    /* optional uint32 udp_connect_port = 6; */
    if (message.udp_connect_port !== undefined) writer.tag(6, WireType.Varint).uint32(message.udp_connect_port);
    /* optional fixed64 lobby_id = 7; */
    if (message.lobby_id !== undefined) writer.tag(7, WireType.Bit64).fixed64(message.lobby_id);
    /* optional string client_broadcast_url = 8; */
    if (message.client_broadcast_url !== undefined)
      writer.tag(8, WireType.LengthDelimited).string(message.client_broadcast_url);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCSpectateUserResponse
 */
export const CMsgClientToGCSpectateUserResponse = new CMsgClientToGCSpectateUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCSpectateLobby$Type extends MessageType<CMsgClientToGCSpectateLobby> {
  constructor() {
    super("CMsgClientToGCSpectateLobby", [
      {
        no: 1,
        name: "lobby_id",
        kind: "scalar",
        localName: "lobby_id",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 2,
        name: "region_mode",
        kind: "enum",
        localName: "region_mode",
        opt: true,
        T: () => ["ECitadelRegionMode", ECitadelRegionMode],
      },
      {
        no: 3,
        name: "client_version",
        kind: "scalar",
        localName: "client_version",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "client_platform",
        kind: "enum",
        localName: "client_platform",
        opt: true,
        T: () => ["EGCPlatform", EGCPlatform],
      },
      {
        no: 5,
        name: "match_id",
        kind: "scalar",
        localName: "match_id",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCSpectateLobby>): CMsgClientToGCSpectateLobby {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCSpectateLobby>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCSpectateLobby,
  ): CMsgClientToGCSpectateLobby {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 lobby_id */ 1:
          message.lobby_id = reader.uint64().toBigInt();
          break;
        case /* optional ECitadelRegionMode region_mode */ 2:
          message.region_mode = reader.int32();
          break;
        case /* optional uint32 client_version */ 3:
          message.client_version = reader.uint32();
          break;
        case /* optional EGCPlatform client_platform */ 4:
          message.client_platform = reader.int32();
          break;
        case /* optional uint64 match_id */ 5:
          message.match_id = reader.uint64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCSpectateLobby,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint64 lobby_id = 1; */
    if (message.lobby_id !== undefined) writer.tag(1, WireType.Varint).uint64(message.lobby_id);
    /* optional ECitadelRegionMode region_mode = 2; */
    if (message.region_mode !== undefined) writer.tag(2, WireType.Varint).int32(message.region_mode);
    /* optional uint32 client_version = 3; */
    if (message.client_version !== undefined) writer.tag(3, WireType.Varint).uint32(message.client_version);
    /* optional EGCPlatform client_platform = 4; */
    if (message.client_platform !== undefined) writer.tag(4, WireType.Varint).int32(message.client_platform);
    /* optional uint64 match_id = 5; */
    if (message.match_id !== undefined) writer.tag(5, WireType.Varint).uint64(message.match_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCSpectateLobby
 */
export const CMsgClientToGCSpectateLobby = new CMsgClientToGCSpectateLobby$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCSpectateLobbyResponse$Type extends MessageType<CMsgClientToGCSpectateLobbyResponse> {
  constructor() {
    super("CMsgClientToGCSpectateLobbyResponse", [
      {
        no: 1,
        name: "result",
        kind: "message",
        T: () => CMsgClientToGCSpectateUserResponse,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCSpectateLobbyResponse>): CMsgClientToGCSpectateLobbyResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCSpectateLobbyResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCSpectateLobbyResponse,
  ): CMsgClientToGCSpectateLobbyResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCSpectateUserResponse result */ 1:
          message.result = CMsgClientToGCSpectateUserResponse.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.result,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCSpectateLobbyResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCSpectateUserResponse result = 1; */
    if (message.result)
      CMsgClientToGCSpectateUserResponse.internalBinaryWrite(
        message.result,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCSpectateLobbyResponse
 */
export const CMsgClientToGCSpectateLobbyResponse = new CMsgClientToGCSpectateLobbyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetProfileCard$Type extends MessageType<CMsgClientToGCGetProfileCard> {
  constructor() {
    super("CMsgClientToGCGetProfileCard", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        localName: "account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "dev_access_hint",
        kind: "scalar",
        localName: "dev_access_hint",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 3,
        name: "friend_access_hint",
        kind: "scalar",
        localName: "friend_access_hint",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCGetProfileCard>): CMsgClientToGCGetProfileCard {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetProfileCard>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGetProfileCard,
  ): CMsgClientToGCGetProfileCard {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.account_id = reader.uint32();
          break;
        case /* optional bool dev_access_hint */ 2:
          message.dev_access_hint = reader.bool();
          break;
        case /* optional bool friend_access_hint */ 3:
          message.friend_access_hint = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCGetProfileCard,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
    /* optional bool dev_access_hint = 2; */
    if (message.dev_access_hint !== undefined) writer.tag(2, WireType.Varint).bool(message.dev_access_hint);
    /* optional bool friend_access_hint = 3; */
    if (message.friend_access_hint !== undefined) writer.tag(3, WireType.Varint).bool(message.friend_access_hint);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetProfileCard
 */
export const CMsgClientToGCGetProfileCard = new CMsgClientToGCGetProfileCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgCitadelProfileCard$Type extends MessageType<CMsgCitadelProfileCard> {
  constructor() {
    super("CMsgCitadelProfileCard", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        localName: "account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "slots",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgCitadelProfileCard_Slot,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgCitadelProfileCard>): CMsgCitadelProfileCard {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.slots = [];
    if (value !== undefined) reflectionMergePartial<CMsgCitadelProfileCard>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgCitadelProfileCard,
  ): CMsgCitadelProfileCard {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.account_id = reader.uint32();
          break;
        case /* repeated CMsgCitadelProfileCard.Slot slots */ 2:
          message.slots.push(CMsgCitadelProfileCard_Slot.internalBinaryRead(reader, reader.uint32(), options));
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgCitadelProfileCard,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
    /* repeated CMsgCitadelProfileCard.Slot slots = 2; */
    for (let i = 0; i < message.slots.length; i++)
      CMsgCitadelProfileCard_Slot.internalBinaryWrite(
        message.slots[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgCitadelProfileCard
 */
export const CMsgCitadelProfileCard = new CMsgCitadelProfileCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgCitadelProfileCard_Slot$Type extends MessageType<CMsgCitadelProfileCard_Slot> {
  constructor() {
    super("CMsgCitadelProfileCard.Slot", [
      {
        no: 1,
        name: "slot_id",
        kind: "scalar",
        localName: "slot_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "stat",
        kind: "message",
        T: () => CMsgCitadelProfileCard_Slot_Stat,
      },
      {
        no: 3,
        name: "hero",
        kind: "message",
        T: () => CMsgCitadelProfileCard_Slot_Hero,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgCitadelProfileCard_Slot>): CMsgCitadelProfileCard_Slot {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgCitadelProfileCard_Slot>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgCitadelProfileCard_Slot,
  ): CMsgCitadelProfileCard_Slot {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 slot_id */ 1:
          message.slot_id = reader.uint32();
          break;
        case /* optional CMsgCitadelProfileCard.Slot.Stat stat */ 2:
          message.stat = CMsgCitadelProfileCard_Slot_Stat.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.stat,
          );
          break;
        case /* optional CMsgCitadelProfileCard.Slot.Hero hero */ 3:
          message.hero = CMsgCitadelProfileCard_Slot_Hero.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.hero,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgCitadelProfileCard_Slot,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 slot_id = 1; */
    if (message.slot_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.slot_id);
    /* optional CMsgCitadelProfileCard.Slot.Stat stat = 2; */
    if (message.stat)
      CMsgCitadelProfileCard_Slot_Stat.internalBinaryWrite(
        message.stat,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional CMsgCitadelProfileCard.Slot.Hero hero = 3; */
    if (message.hero)
      CMsgCitadelProfileCard_Slot_Hero.internalBinaryWrite(
        message.hero,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgCitadelProfileCard.Slot
 */
export const CMsgCitadelProfileCard_Slot = new CMsgCitadelProfileCard_Slot$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgCitadelProfileCard_Slot_Stat$Type extends MessageType<CMsgCitadelProfileCard_Slot_Stat> {
  constructor() {
    super("CMsgCitadelProfileCard.Slot.Stat", [
      {
        no: 1,
        name: "stat_id",
        kind: "enum",
        localName: "stat_id",
        opt: true,
        T: () => ["CMsgCitadelProfileCard.EStatID", CMsgCitadelProfileCard_EStatID],
      },
      {
        no: 2,
        name: "stat_score",
        kind: "scalar",
        localName: "stat_score",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgCitadelProfileCard_Slot_Stat>): CMsgCitadelProfileCard_Slot_Stat {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgCitadelProfileCard_Slot_Stat>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgCitadelProfileCard_Slot_Stat,
  ): CMsgCitadelProfileCard_Slot_Stat {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgCitadelProfileCard.EStatID stat_id */ 1:
          message.stat_id = reader.int32();
          break;
        case /* optional uint32 stat_score */ 2:
          message.stat_score = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgCitadelProfileCard_Slot_Stat,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgCitadelProfileCard.EStatID stat_id = 1; */
    if (message.stat_id !== undefined) writer.tag(1, WireType.Varint).int32(message.stat_id);
    /* optional uint32 stat_score = 2; */
    if (message.stat_score !== undefined) writer.tag(2, WireType.Varint).uint32(message.stat_score);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgCitadelProfileCard.Slot.Stat
 */
export const CMsgCitadelProfileCard_Slot_Stat = new CMsgCitadelProfileCard_Slot_Stat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgCitadelProfileCard_Slot_Hero$Type extends MessageType<CMsgCitadelProfileCard_Slot_Hero> {
  constructor() {
    super("CMsgCitadelProfileCard.Slot.Hero", [
      {
        no: 1,
        name: "hero_id",
        kind: "scalar",
        localName: "hero_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "hero_wins",
        kind: "scalar",
        localName: "hero_wins",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "hero_kills",
        kind: "scalar",
        localName: "hero_kills",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgCitadelProfileCard_Slot_Hero>): CMsgCitadelProfileCard_Slot_Hero {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgCitadelProfileCard_Slot_Hero>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgCitadelProfileCard_Slot_Hero,
  ): CMsgCitadelProfileCard_Slot_Hero {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 hero_id */ 1:
          message.hero_id = reader.uint32();
          break;
        case /* optional uint32 hero_wins */ 2:
          message.hero_wins = reader.uint32();
          break;
        case /* optional uint32 hero_kills */ 3:
          message.hero_kills = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgCitadelProfileCard_Slot_Hero,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 hero_id = 1; */
    if (message.hero_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.hero_id);
    /* optional uint32 hero_wins = 2; */
    if (message.hero_wins !== undefined) writer.tag(2, WireType.Varint).uint32(message.hero_wins);
    /* optional uint32 hero_kills = 3; */
    if (message.hero_kills !== undefined) writer.tag(3, WireType.Varint).uint32(message.hero_kills);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgCitadelProfileCard.Slot.Hero
 */
export const CMsgCitadelProfileCard_Slot_Hero = new CMsgCitadelProfileCard_Slot_Hero$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCUpdateRoster$Type extends MessageType<CMsgClientToGCUpdateRoster> {
  constructor() {
    super("CMsgClientToGCUpdateRoster", [
      {
        no: 1,
        name: "heroes",
        kind: "message",
        T: () => CMsgHeroSelectionMatchInfo,
      },
      {
        no: 2,
        name: "game_mode",
        kind: "enum",
        localName: "game_mode",
        opt: true,
        T: () => ["ECitadelGameMode", ECitadelGameMode],
      },
      {
        no: 3,
        name: "match_mode",
        kind: "enum",
        localName: "match_mode",
        opt: true,
        T: () => ["ECitadelMatchMode", ECitadelMatchMode],
      },
      {
        no: 4,
        name: "solo_match",
        kind: "scalar",
        localName: "solo_match",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCUpdateRoster>): CMsgClientToGCUpdateRoster {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCUpdateRoster>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCUpdateRoster,
  ): CMsgClientToGCUpdateRoster {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgHeroSelectionMatchInfo heroes */ 1:
          message.heroes = CMsgHeroSelectionMatchInfo.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.heroes,
          );
          break;
        case /* optional ECitadelGameMode game_mode */ 2:
          message.game_mode = reader.int32();
          break;
        case /* optional ECitadelMatchMode match_mode */ 3:
          message.match_mode = reader.int32();
          break;
        case /* optional bool solo_match */ 4:
          message.solo_match = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCUpdateRoster,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgHeroSelectionMatchInfo heroes = 1; */
    if (message.heroes)
      CMsgHeroSelectionMatchInfo.internalBinaryWrite(
        message.heroes,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional ECitadelGameMode game_mode = 2; */
    if (message.game_mode !== undefined) writer.tag(2, WireType.Varint).int32(message.game_mode);
    /* optional ECitadelMatchMode match_mode = 3; */
    if (message.match_mode !== undefined) writer.tag(3, WireType.Varint).int32(message.match_mode);
    /* optional bool solo_match = 4; */
    if (message.solo_match !== undefined) writer.tag(4, WireType.Varint).bool(message.solo_match);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCUpdateRoster
 */
export const CMsgClientToGCUpdateRoster = new CMsgClientToGCUpdateRoster$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCUpdateRosterResponse$Type extends MessageType<CMsgClientToGCUpdateRosterResponse> {
  constructor() {
    super("CMsgClientToGCUpdateRosterResponse", [
      {
        no: 1,
        name: "result",
        kind: "enum",
        opt: true,
        T: () => ["CMsgClientToGCUpdateRosterResponse.EResponse", CMsgClientToGCUpdateRosterResponse_EResponse],
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCUpdateRosterResponse>): CMsgClientToGCUpdateRosterResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCUpdateRosterResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCUpdateRosterResponse,
  ): CMsgClientToGCUpdateRosterResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCUpdateRosterResponse.EResponse result */ 1:
          message.result = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCUpdateRosterResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCUpdateRosterResponse.EResponse result = 1; */
    if (message.result !== undefined) writer.tag(1, WireType.Varint).int32(message.result);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCUpdateRosterResponse
 */
export const CMsgClientToGCUpdateRosterResponse = new CMsgClientToGCUpdateRosterResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetAccountStats$Type extends MessageType<CMsgClientToGCGetAccountStats> {
  constructor() {
    super("CMsgClientToGCGetAccountStats", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        localName: "account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "dev_access_hint",
        kind: "scalar",
        localName: "dev_access_hint",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 3,
        name: "friend_access_hint",
        kind: "scalar",
        localName: "friend_access_hint",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCGetAccountStats>): CMsgClientToGCGetAccountStats {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetAccountStats>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGetAccountStats,
  ): CMsgClientToGCGetAccountStats {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.account_id = reader.uint32();
          break;
        case /* optional bool dev_access_hint */ 2:
          message.dev_access_hint = reader.bool();
          break;
        case /* optional bool friend_access_hint */ 3:
          message.friend_access_hint = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCGetAccountStats,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
    /* optional bool dev_access_hint = 2; */
    if (message.dev_access_hint !== undefined) writer.tag(2, WireType.Varint).bool(message.dev_access_hint);
    /* optional bool friend_access_hint = 3; */
    if (message.friend_access_hint !== undefined) writer.tag(3, WireType.Varint).bool(message.friend_access_hint);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetAccountStats
 */
export const CMsgClientToGCGetAccountStats = new CMsgClientToGCGetAccountStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetAccountStatsResponse$Type extends MessageType<CMsgClientToGCGetAccountStatsResponse> {
  constructor() {
    super("CMsgClientToGCGetAccountStatsResponse", [
      {
        no: 1,
        name: "result",
        kind: "enum",
        opt: true,
        T: () => ["CMsgClientToGCGetAccountStatsResponse.EResult", CMsgClientToGCGetAccountStatsResponse_EResult],
      },
      { no: 2, name: "stats", kind: "message", T: () => CMsgAccountStats },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCGetAccountStatsResponse>): CMsgClientToGCGetAccountStatsResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetAccountStatsResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGetAccountStatsResponse,
  ): CMsgClientToGCGetAccountStatsResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCGetAccountStatsResponse.EResult result */ 1:
          message.result = reader.int32();
          break;
        case /* optional CMsgAccountStats stats */ 2:
          message.stats = CMsgAccountStats.internalBinaryRead(reader, reader.uint32(), options, message.stats);
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCGetAccountStatsResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCGetAccountStatsResponse.EResult result = 1; */
    if (message.result !== undefined) writer.tag(1, WireType.Varint).int32(message.result);
    /* optional CMsgAccountStats stats = 2; */
    if (message.stats)
      CMsgAccountStats.internalBinaryWrite(
        message.stats,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetAccountStatsResponse
 */
export const CMsgClientToGCGetAccountStatsResponse = new CMsgClientToGCGetAccountStatsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetMatchMetaData$Type extends MessageType<CMsgClientToGCGetMatchMetaData> {
  constructor() {
    super("CMsgClientToGCGetMatchMetaData", [
      {
        no: 1,
        name: "match_id",
        kind: "scalar",
        localName: "match_id",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 3,
        name: "metadata_salt",
        kind: "scalar",
        localName: "metadata_salt",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "target_account_id",
        kind: "scalar",
        localName: "target_account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCGetMatchMetaData>): CMsgClientToGCGetMatchMetaData {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetMatchMetaData>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGetMatchMetaData,
  ): CMsgClientToGCGetMatchMetaData {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 match_id */ 1:
          message.match_id = reader.uint64().toBigInt();
          break;
        case /* optional uint32 metadata_salt */ 3:
          message.metadata_salt = reader.uint32();
          break;
        case /* optional uint32 target_account_id */ 4:
          message.target_account_id = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCGetMatchMetaData,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint64 match_id = 1; */
    if (message.match_id !== undefined) writer.tag(1, WireType.Varint).uint64(message.match_id);
    /* optional uint32 metadata_salt = 3; */
    if (message.metadata_salt !== undefined) writer.tag(3, WireType.Varint).uint32(message.metadata_salt);
    /* optional uint32 target_account_id = 4; */
    if (message.target_account_id !== undefined) writer.tag(4, WireType.Varint).uint32(message.target_account_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetMatchMetaData
 */
export const CMsgClientToGCGetMatchMetaData = new CMsgClientToGCGetMatchMetaData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetMatchMetaDataResponse$Type extends MessageType<CMsgClientToGCGetMatchMetaDataResponse> {
  constructor() {
    super("CMsgClientToGCGetMatchMetaDataResponse", [
      {
        no: 1,
        name: "result",
        kind: "enum",
        opt: true,
        T: () => ["CMsgClientToGCGetMatchMetaDataResponse.EResult", CMsgClientToGCGetMatchMetaDataResponse_EResult],
      },
      {
        no: 2,
        name: "replay_salt",
        kind: "scalar",
        localName: "replay_salt",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "metadata_salt",
        kind: "scalar",
        localName: "metadata_salt",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "replay_valid_through",
        kind: "scalar",
        localName: "replay_valid_through",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "cluster_id",
        kind: "scalar",
        localName: "cluster_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "replay_processing_through",
        kind: "scalar",
        localName: "replay_processing_through",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCGetMatchMetaDataResponse>): CMsgClientToGCGetMatchMetaDataResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetMatchMetaDataResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGetMatchMetaDataResponse,
  ): CMsgClientToGCGetMatchMetaDataResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCGetMatchMetaDataResponse.EResult result */ 1:
          message.result = reader.int32();
          break;
        case /* optional uint32 replay_salt */ 2:
          message.replay_salt = reader.uint32();
          break;
        case /* optional uint32 metadata_salt */ 3:
          message.metadata_salt = reader.uint32();
          break;
        case /* optional uint32 replay_valid_through */ 4:
          message.replay_valid_through = reader.uint32();
          break;
        case /* optional uint32 cluster_id */ 5:
          message.cluster_id = reader.uint32();
          break;
        case /* optional uint32 replay_processing_through */ 6:
          message.replay_processing_through = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCGetMatchMetaDataResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCGetMatchMetaDataResponse.EResult result = 1; */
    if (message.result !== undefined) writer.tag(1, WireType.Varint).int32(message.result);
    /* optional uint32 replay_salt = 2; */
    if (message.replay_salt !== undefined) writer.tag(2, WireType.Varint).uint32(message.replay_salt);
    /* optional uint32 metadata_salt = 3; */
    if (message.metadata_salt !== undefined) writer.tag(3, WireType.Varint).uint32(message.metadata_salt);
    /* optional uint32 replay_valid_through = 4; */
    if (message.replay_valid_through !== undefined) writer.tag(4, WireType.Varint).uint32(message.replay_valid_through);
    /* optional uint32 cluster_id = 5; */
    if (message.cluster_id !== undefined) writer.tag(5, WireType.Varint).uint32(message.cluster_id);
    /* optional uint32 replay_processing_through = 6; */
    if (message.replay_processing_through !== undefined)
      writer.tag(6, WireType.Varint).uint32(message.replay_processing_through);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetMatchMetaDataResponse
 */
export const CMsgClientToGCGetMatchMetaDataResponse = new CMsgClientToGCGetMatchMetaDataResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToClientDevAnnouncements$Type extends MessageType<CMsgGCToClientDevAnnouncements> {
  constructor() {
    super("CMsgGCToClientDevAnnouncements", [
      {
        no: 1,
        name: "announcements",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgGCToClientDevAnnouncements_Announcement,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgGCToClientDevAnnouncements>): CMsgGCToClientDevAnnouncements {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.announcements = [];
    if (value !== undefined) reflectionMergePartial<CMsgGCToClientDevAnnouncements>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgGCToClientDevAnnouncements,
  ): CMsgGCToClientDevAnnouncements {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated CMsgGCToClientDevAnnouncements.Announcement announcements */ 1:
          message.announcements.push(
            CMsgGCToClientDevAnnouncements_Announcement.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgGCToClientDevAnnouncements,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated CMsgGCToClientDevAnnouncements.Announcement announcements = 1; */
    for (let i = 0; i < message.announcements.length; i++)
      CMsgGCToClientDevAnnouncements_Announcement.internalBinaryWrite(
        message.announcements[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgGCToClientDevAnnouncements
 */
export const CMsgGCToClientDevAnnouncements = new CMsgGCToClientDevAnnouncements$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToClientDevAnnouncements_Announcement$Type extends MessageType<CMsgGCToClientDevAnnouncements_Announcement> {
  constructor() {
    super("CMsgGCToClientDevAnnouncements.Announcement", [
      {
        no: 1,
        name: "priority",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "title",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 3,
        name: "message",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 4,
        name: "url",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 5,
        name: "unique_id",
        kind: "scalar",
        localName: "unique_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "posted_time",
        kind: "scalar",
        localName: "posted_time",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 7,
        name: "patch_version",
        kind: "scalar",
        localName: "patch_version",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgGCToClientDevAnnouncements_Announcement>,
  ): CMsgGCToClientDevAnnouncements_Announcement {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgGCToClientDevAnnouncements_Announcement>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgGCToClientDevAnnouncements_Announcement,
  ): CMsgGCToClientDevAnnouncements_Announcement {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 priority */ 1:
          message.priority = reader.uint32();
          break;
        case /* optional string title */ 2:
          message.title = reader.string();
          break;
        case /* optional string message */ 3:
          message.message = reader.string();
          break;
        case /* optional string url */ 4:
          message.url = reader.string();
          break;
        case /* optional uint32 unique_id */ 5:
          message.unique_id = reader.uint32();
          break;
        case /* optional uint32 posted_time */ 6:
          message.posted_time = reader.uint32();
          break;
        case /* optional string patch_version */ 7:
          message.patch_version = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgGCToClientDevAnnouncements_Announcement,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 priority = 1; */
    if (message.priority !== undefined) writer.tag(1, WireType.Varint).uint32(message.priority);
    /* optional string title = 2; */
    if (message.title !== undefined) writer.tag(2, WireType.LengthDelimited).string(message.title);
    /* optional string message = 3; */
    if (message.message !== undefined) writer.tag(3, WireType.LengthDelimited).string(message.message);
    /* optional string url = 4; */
    if (message.url !== undefined) writer.tag(4, WireType.LengthDelimited).string(message.url);
    /* optional uint32 unique_id = 5; */
    if (message.unique_id !== undefined) writer.tag(5, WireType.Varint).uint32(message.unique_id);
    /* optional uint32 posted_time = 6; */
    if (message.posted_time !== undefined) writer.tag(6, WireType.Varint).uint32(message.posted_time);
    /* optional string patch_version = 7; */
    if (message.patch_version !== undefined) writer.tag(7, WireType.LengthDelimited).string(message.patch_version);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgGCToClientDevAnnouncements.Announcement
 */
export const CMsgGCToClientDevAnnouncements_Announcement = new CMsgGCToClientDevAnnouncements_Announcement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCModifyDevAnnouncements$Type extends MessageType<CMsgClientToGCModifyDevAnnouncements> {
  constructor() {
    super("CMsgClientToGCModifyDevAnnouncements", [
      {
        no: 1,
        name: "operation",
        kind: "enum",
        opt: true,
        T: () => ["CMsgClientToGCModifyDevAnnouncements.EOperation", CMsgClientToGCModifyDevAnnouncements_EOperation],
      },
      {
        no: 2,
        name: "target_id",
        kind: "scalar",
        localName: "target_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "priority",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "title",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 5,
        name: "message",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 6,
        name: "url",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 7,
        name: "patch_version",
        kind: "scalar",
        localName: "patch_version",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCModifyDevAnnouncements>): CMsgClientToGCModifyDevAnnouncements {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCModifyDevAnnouncements>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCModifyDevAnnouncements,
  ): CMsgClientToGCModifyDevAnnouncements {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCModifyDevAnnouncements.EOperation operation */ 1:
          message.operation = reader.int32();
          break;
        case /* optional uint32 target_id */ 2:
          message.target_id = reader.uint32();
          break;
        case /* optional uint32 priority */ 3:
          message.priority = reader.uint32();
          break;
        case /* optional string title */ 4:
          message.title = reader.string();
          break;
        case /* optional string message */ 5:
          message.message = reader.string();
          break;
        case /* optional string url */ 6:
          message.url = reader.string();
          break;
        case /* optional string patch_version */ 7:
          message.patch_version = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCModifyDevAnnouncements,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCModifyDevAnnouncements.EOperation operation = 1; */
    if (message.operation !== undefined) writer.tag(1, WireType.Varint).int32(message.operation);
    /* optional uint32 target_id = 2; */
    if (message.target_id !== undefined) writer.tag(2, WireType.Varint).uint32(message.target_id);
    /* optional uint32 priority = 3; */
    if (message.priority !== undefined) writer.tag(3, WireType.Varint).uint32(message.priority);
    /* optional string title = 4; */
    if (message.title !== undefined) writer.tag(4, WireType.LengthDelimited).string(message.title);
    /* optional string message = 5; */
    if (message.message !== undefined) writer.tag(5, WireType.LengthDelimited).string(message.message);
    /* optional string url = 6; */
    if (message.url !== undefined) writer.tag(6, WireType.LengthDelimited).string(message.url);
    /* optional string patch_version = 7; */
    if (message.patch_version !== undefined) writer.tag(7, WireType.LengthDelimited).string(message.patch_version);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCModifyDevAnnouncements
 */
export const CMsgClientToGCModifyDevAnnouncements = new CMsgClientToGCModifyDevAnnouncements$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCModifyDevAnnouncementsResponse$Type extends MessageType<CMsgClientToGCModifyDevAnnouncementsResponse> {
  constructor() {
    super("CMsgClientToGCModifyDevAnnouncementsResponse", [
      {
        no: 1,
        name: "result",
        kind: "enum",
        opt: true,
        T: () => [
          "CMsgClientToGCModifyDevAnnouncementsResponse.EResult",
          CMsgClientToGCModifyDevAnnouncementsResponse_EResult,
        ],
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgClientToGCModifyDevAnnouncementsResponse>,
  ): CMsgClientToGCModifyDevAnnouncementsResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCModifyDevAnnouncementsResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCModifyDevAnnouncementsResponse,
  ): CMsgClientToGCModifyDevAnnouncementsResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCModifyDevAnnouncementsResponse.EResult result */ 1:
          message.result = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCModifyDevAnnouncementsResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCModifyDevAnnouncementsResponse.EResult result = 1; */
    if (message.result !== undefined) writer.tag(1, WireType.Varint).int32(message.result);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCModifyDevAnnouncementsResponse
 */
export const CMsgClientToGCModifyDevAnnouncementsResponse = new CMsgClientToGCModifyDevAnnouncementsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCDevAction$Type extends MessageType<CMsgClientToGCDevAction> {
  constructor() {
    super("CMsgClientToGCDevAction", [
      {
        no: 1,
        name: "action",
        kind: "enum",
        opt: true,
        T: () => ["CMsgClientToGCDevAction.EAction", CMsgClientToGCDevAction_EAction],
      },
      {
        no: 2,
        name: "account_id",
        kind: "scalar",
        localName: "account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "uint_value",
        kind: "scalar",
        localName: "uint_value",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "int_value",
        kind: "scalar",
        localName: "int_value",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 5,
        name: "bool_value",
        kind: "scalar",
        localName: "bool_value",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 6,
        name: "str_value",
        kind: "scalar",
        localName: "str_value",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCDevAction>): CMsgClientToGCDevAction {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCDevAction>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCDevAction,
  ): CMsgClientToGCDevAction {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCDevAction.EAction action */ 1:
          message.action = reader.int32();
          break;
        case /* optional uint32 account_id */ 2:
          message.account_id = reader.uint32();
          break;
        case /* optional uint32 uint_value */ 3:
          message.uint_value = reader.uint32();
          break;
        case /* optional int32 int_value */ 4:
          message.int_value = reader.int32();
          break;
        case /* optional bool bool_value */ 5:
          message.bool_value = reader.bool();
          break;
        case /* optional string str_value */ 6:
          message.str_value = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCDevAction,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCDevAction.EAction action = 1; */
    if (message.action !== undefined) writer.tag(1, WireType.Varint).int32(message.action);
    /* optional uint32 account_id = 2; */
    if (message.account_id !== undefined) writer.tag(2, WireType.Varint).uint32(message.account_id);
    /* optional uint32 uint_value = 3; */
    if (message.uint_value !== undefined) writer.tag(3, WireType.Varint).uint32(message.uint_value);
    /* optional int32 int_value = 4; */
    if (message.int_value !== undefined) writer.tag(4, WireType.Varint).int32(message.int_value);
    /* optional bool bool_value = 5; */
    if (message.bool_value !== undefined) writer.tag(5, WireType.Varint).bool(message.bool_value);
    /* optional string str_value = 6; */
    if (message.str_value !== undefined) writer.tag(6, WireType.LengthDelimited).string(message.str_value);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCDevAction
 */
export const CMsgClientToGCDevAction = new CMsgClientToGCDevAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCDevActionResponse$Type extends MessageType<CMsgClientToGCDevActionResponse> {
  constructor() {
    super("CMsgClientToGCDevActionResponse", [
      {
        no: 1,
        name: "result",
        kind: "enum",
        opt: true,
        T: () => ["CMsgClientToGCDevActionResponse.EResult", CMsgClientToGCDevActionResponse_EResult],
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCDevActionResponse>): CMsgClientToGCDevActionResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCDevActionResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCDevActionResponse,
  ): CMsgClientToGCDevActionResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCDevActionResponse.EResult result */ 1:
          message.result = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCDevActionResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCDevActionResponse.EResult result = 1; */
    if (message.result !== undefined) writer.tag(1, WireType.Varint).int32(message.result);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCDevActionResponse
 */
export const CMsgClientToGCDevActionResponse = new CMsgClientToGCDevActionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCRecordClientEvents$Type extends MessageType<CMsgClientToGCRecordClientEvents> {
  constructor() {
    super("CMsgClientToGCRecordClientEvents", [
      {
        no: 1,
        name: "events",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgClientToGCRecordClientEvents_Event,
      },
      {
        no: 2,
        name: "client_run_token",
        kind: "scalar",
        localName: "client_run_token",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCRecordClientEvents>): CMsgClientToGCRecordClientEvents {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.events = [];
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCRecordClientEvents>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCRecordClientEvents,
  ): CMsgClientToGCRecordClientEvents {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated CMsgClientToGCRecordClientEvents.Event events */ 1:
          message.events.push(
            CMsgClientToGCRecordClientEvents_Event.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* optional uint32 client_run_token */ 2:
          message.client_run_token = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCRecordClientEvents,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated CMsgClientToGCRecordClientEvents.Event events = 1; */
    for (let i = 0; i < message.events.length; i++)
      CMsgClientToGCRecordClientEvents_Event.internalBinaryWrite(
        message.events[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional uint32 client_run_token = 2; */
    if (message.client_run_token !== undefined) writer.tag(2, WireType.Varint).uint32(message.client_run_token);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCRecordClientEvents
 */
export const CMsgClientToGCRecordClientEvents = new CMsgClientToGCRecordClientEvents$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCRecordClientEvents_Event$Type extends MessageType<CMsgClientToGCRecordClientEvents_Event> {
  constructor() {
    super("CMsgClientToGCRecordClientEvents.Event", [
      {
        no: 1,
        name: "time_stamp",
        kind: "scalar",
        localName: "time_stamp",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "event_id",
        kind: "enum",
        localName: "event_id",
        opt: true,
        T: () => ["ECitadelClientAccountEvent", ECitadelClientAccountEvent],
      },
      {
        no: 3,
        name: "event_data",
        kind: "scalar",
        localName: "event_data",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 4,
        name: "client_event_index",
        kind: "scalar",
        localName: "client_event_index",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCRecordClientEvents_Event>): CMsgClientToGCRecordClientEvents_Event {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCRecordClientEvents_Event>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCRecordClientEvents_Event,
  ): CMsgClientToGCRecordClientEvents_Event {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 time_stamp */ 1:
          message.time_stamp = reader.uint32();
          break;
        case /* optional ECitadelClientAccountEvent event_id */ 2:
          message.event_id = reader.int32();
          break;
        case /* optional uint64 event_data */ 3:
          message.event_data = reader.uint64().toBigInt();
          break;
        case /* optional uint32 client_event_index */ 4:
          message.client_event_index = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCRecordClientEvents_Event,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 time_stamp = 1; */
    if (message.time_stamp !== undefined) writer.tag(1, WireType.Varint).uint32(message.time_stamp);
    /* optional ECitadelClientAccountEvent event_id = 2; */
    if (message.event_id !== undefined) writer.tag(2, WireType.Varint).int32(message.event_id);
    /* optional uint64 event_data = 3; */
    if (message.event_data !== undefined) writer.tag(3, WireType.Varint).uint64(message.event_data);
    /* optional uint32 client_event_index = 4; */
    if (message.client_event_index !== undefined) writer.tag(4, WireType.Varint).uint32(message.client_event_index);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCRecordClientEvents.Event
 */
export const CMsgClientToGCRecordClientEvents_Event = new CMsgClientToGCRecordClientEvents_Event$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCRecordClientEventsResponse$Type extends MessageType<CMsgClientToGCRecordClientEventsResponse> {
  constructor() {
    super("CMsgClientToGCRecordClientEventsResponse", [
      {
        no: 1,
        name: "success",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCRecordClientEventsResponse>): CMsgClientToGCRecordClientEventsResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCRecordClientEventsResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCRecordClientEventsResponse,
  ): CMsgClientToGCRecordClientEventsResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional bool success */ 1:
          message.success = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCRecordClientEventsResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional bool success = 1; */
    if (message.success !== undefined) writer.tag(1, WireType.Varint).bool(message.success);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCRecordClientEventsResponse
 */
export const CMsgClientToGCRecordClientEventsResponse = new CMsgClientToGCRecordClientEventsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCSetNewPlayerProgress$Type extends MessageType<CMsgClientToGCSetNewPlayerProgress> {
  constructor() {
    super("CMsgClientToGCSetNewPlayerProgress", [
      {
        no: 1,
        name: "flag",
        kind: "enum",
        opt: true,
        T: () => ["ECitadelNewPlayerProgressFlag", ECitadelNewPlayerProgressFlag],
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCSetNewPlayerProgress>): CMsgClientToGCSetNewPlayerProgress {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCSetNewPlayerProgress>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCSetNewPlayerProgress,
  ): CMsgClientToGCSetNewPlayerProgress {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional ECitadelNewPlayerProgressFlag flag */ 1:
          message.flag = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCSetNewPlayerProgress,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional ECitadelNewPlayerProgressFlag flag = 1; */
    if (message.flag !== undefined) writer.tag(1, WireType.Varint).int32(message.flag);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCSetNewPlayerProgress
 */
export const CMsgClientToGCSetNewPlayerProgress = new CMsgClientToGCSetNewPlayerProgress$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCSetNewPlayerProgressResponse$Type extends MessageType<CMsgClientToGCSetNewPlayerProgressResponse> {
  constructor() {
    super("CMsgClientToGCSetNewPlayerProgressResponse", [
      {
        no: 1,
        name: "success",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgClientToGCSetNewPlayerProgressResponse>,
  ): CMsgClientToGCSetNewPlayerProgressResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCSetNewPlayerProgressResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCSetNewPlayerProgressResponse,
  ): CMsgClientToGCSetNewPlayerProgressResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional bool success */ 1:
          message.success = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCSetNewPlayerProgressResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional bool success = 1; */
    if (message.success !== undefined) writer.tag(1, WireType.Varint).bool(message.success);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCSetNewPlayerProgressResponse
 */
export const CMsgClientToGCSetNewPlayerProgressResponse = new CMsgClientToGCSetNewPlayerProgressResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCUpdateAccountSync$Type extends MessageType<CMsgClientToGCUpdateAccountSync> {
  constructor() {
    super("CMsgClientToGCUpdateAccountSync", [
      {
        no: 1,
        name: "ids",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "values",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCUpdateAccountSync>): CMsgClientToGCUpdateAccountSync {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.ids = [];
    message.values = [];
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCUpdateAccountSync>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCUpdateAccountSync,
  ): CMsgClientToGCUpdateAccountSync {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated uint32 ids */ 1:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.ids.push(reader.uint32());
          else message.ids.push(reader.uint32());
          break;
        case /* repeated uint32 values */ 2:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.values.push(reader.uint32());
          else message.values.push(reader.uint32());
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCUpdateAccountSync,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated uint32 ids = 1; */
    for (let i = 0; i < message.ids.length; i++) writer.tag(1, WireType.Varint).uint32(message.ids[i]);
    /* repeated uint32 values = 2; */
    for (let i = 0; i < message.values.length; i++) writer.tag(2, WireType.Varint).uint32(message.values[i]);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCUpdateAccountSync
 */
export const CMsgClientToGCUpdateAccountSync = new CMsgClientToGCUpdateAccountSync$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCUpdateAccountSyncResponse$Type extends MessageType<CMsgClientToGCUpdateAccountSyncResponse> {
  constructor() {
    super("CMsgClientToGCUpdateAccountSyncResponse", [
      {
        no: 1,
        name: "result",
        kind: "enum",
        opt: true,
        T: () => [
          "CMsgClientToGCUpdateAccountSyncResponse.EResponse",
          CMsgClientToGCUpdateAccountSyncResponse_EResponse,
        ],
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCUpdateAccountSyncResponse>): CMsgClientToGCUpdateAccountSyncResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCUpdateAccountSyncResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCUpdateAccountSyncResponse,
  ): CMsgClientToGCUpdateAccountSyncResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCUpdateAccountSyncResponse.EResponse result */ 1:
          message.result = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCUpdateAccountSyncResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCUpdateAccountSyncResponse.EResponse result = 1; */
    if (message.result !== undefined) writer.tag(1, WireType.Varint).int32(message.result);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCUpdateAccountSyncResponse
 */
export const CMsgClientToGCUpdateAccountSyncResponse = new CMsgClientToGCUpdateAccountSyncResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetHeroChoice$Type extends MessageType<CMsgClientToGCGetHeroChoice> {
  constructor() {
    super("CMsgClientToGCGetHeroChoice", []);
  }
  create(value?: PartialMessage<CMsgClientToGCGetHeroChoice>): CMsgClientToGCGetHeroChoice {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetHeroChoice>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGetHeroChoice,
  ): CMsgClientToGCGetHeroChoice {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: CMsgClientToGCGetHeroChoice,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetHeroChoice
 */
export const CMsgClientToGCGetHeroChoice = new CMsgClientToGCGetHeroChoice$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetHeroChoiceResponse$Type extends MessageType<CMsgClientToGCGetHeroChoiceResponse> {
  constructor() {
    super("CMsgClientToGCGetHeroChoiceResponse", [
      {
        no: 1,
        name: "result",
        kind: "enum",
        opt: true,
        T: () => ["CMsgClientToGCGetHeroChoiceResponse.EResult", CMsgClientToGCGetHeroChoiceResponse_EResult],
      },
      {
        no: 2,
        name: "hero_selections",
        kind: "message",
        localName: "hero_selections",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgClientToGCGetHeroChoiceResponse_Hero,
      },
      {
        no: 3,
        name: "hero_choice_id",
        kind: "scalar",
        localName: "hero_choice_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "select_count",
        kind: "scalar",
        localName: "select_count",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCGetHeroChoiceResponse>): CMsgClientToGCGetHeroChoiceResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.hero_selections = [];
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetHeroChoiceResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGetHeroChoiceResponse,
  ): CMsgClientToGCGetHeroChoiceResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCGetHeroChoiceResponse.EResult result */ 1:
          message.result = reader.int32();
          break;
        case /* repeated CMsgClientToGCGetHeroChoiceResponse.Hero hero_selections */ 2:
          message.hero_selections.push(
            CMsgClientToGCGetHeroChoiceResponse_Hero.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* optional uint32 hero_choice_id */ 3:
          message.hero_choice_id = reader.uint32();
          break;
        case /* optional uint32 select_count */ 4:
          message.select_count = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCGetHeroChoiceResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCGetHeroChoiceResponse.EResult result = 1; */
    if (message.result !== undefined) writer.tag(1, WireType.Varint).int32(message.result);
    /* repeated CMsgClientToGCGetHeroChoiceResponse.Hero hero_selections = 2; */
    for (let i = 0; i < message.hero_selections.length; i++)
      CMsgClientToGCGetHeroChoiceResponse_Hero.internalBinaryWrite(
        message.hero_selections[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional uint32 hero_choice_id = 3; */
    if (message.hero_choice_id !== undefined) writer.tag(3, WireType.Varint).uint32(message.hero_choice_id);
    /* optional uint32 select_count = 4; */
    if (message.select_count !== undefined) writer.tag(4, WireType.Varint).uint32(message.select_count);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetHeroChoiceResponse
 */
export const CMsgClientToGCGetHeroChoiceResponse = new CMsgClientToGCGetHeroChoiceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetHeroChoiceResponse_Hero$Type extends MessageType<CMsgClientToGCGetHeroChoiceResponse_Hero> {
  constructor() {
    super("CMsgClientToGCGetHeroChoiceResponse.Hero", [
      {
        no: 1,
        name: "hero_id",
        kind: "scalar",
        localName: "hero_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCGetHeroChoiceResponse_Hero>): CMsgClientToGCGetHeroChoiceResponse_Hero {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetHeroChoiceResponse_Hero>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGetHeroChoiceResponse_Hero,
  ): CMsgClientToGCGetHeroChoiceResponse_Hero {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 hero_id */ 1:
          message.hero_id = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCGetHeroChoiceResponse_Hero,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 hero_id = 1; */
    if (message.hero_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.hero_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetHeroChoiceResponse.Hero
 */
export const CMsgClientToGCGetHeroChoiceResponse_Hero = new CMsgClientToGCGetHeroChoiceResponse_Hero$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCUnlockHero$Type extends MessageType<CMsgClientToGCUnlockHero> {
  constructor() {
    super("CMsgClientToGCUnlockHero", [
      {
        no: 1,
        name: "hero_ids",
        kind: "scalar",
        localName: "hero_ids",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "hero_choice_id",
        kind: "scalar",
        localName: "hero_choice_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCUnlockHero>): CMsgClientToGCUnlockHero {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.hero_ids = [];
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCUnlockHero>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCUnlockHero,
  ): CMsgClientToGCUnlockHero {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated uint32 hero_ids */ 1:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.hero_ids.push(reader.uint32());
          else message.hero_ids.push(reader.uint32());
          break;
        case /* optional uint32 hero_choice_id */ 2:
          message.hero_choice_id = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCUnlockHero,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated uint32 hero_ids = 1; */
    for (let i = 0; i < message.hero_ids.length; i++) writer.tag(1, WireType.Varint).uint32(message.hero_ids[i]);
    /* optional uint32 hero_choice_id = 2; */
    if (message.hero_choice_id !== undefined) writer.tag(2, WireType.Varint).uint32(message.hero_choice_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCUnlockHero
 */
export const CMsgClientToGCUnlockHero = new CMsgClientToGCUnlockHero$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCUnlockHeroResponse$Type extends MessageType<CMsgClientToGCUnlockHeroResponse> {
  constructor() {
    super("CMsgClientToGCUnlockHeroResponse", [
      {
        no: 1,
        name: "result",
        kind: "enum",
        opt: true,
        T: () => ["CMsgClientToGCUnlockHeroResponse.EResult", CMsgClientToGCUnlockHeroResponse_EResult],
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCUnlockHeroResponse>): CMsgClientToGCUnlockHeroResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCUnlockHeroResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCUnlockHeroResponse,
  ): CMsgClientToGCUnlockHeroResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCUnlockHeroResponse.EResult result */ 1:
          message.result = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCUnlockHeroResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCUnlockHeroResponse.EResult result = 1; */
    if (message.result !== undefined) writer.tag(1, WireType.Varint).int32(message.result);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCUnlockHeroResponse
 */
export const CMsgClientToGCUnlockHeroResponse = new CMsgClientToGCUnlockHeroResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgAccountBook$Type extends MessageType<CMsgAccountBook> {
  constructor() {
    super("CMsgAccountBook", [
      {
        no: 1,
        name: "book_id",
        kind: "scalar",
        localName: "book_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "book_xp",
        kind: "scalar",
        localName: "book_xp",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "spent_xp",
        kind: "scalar",
        localName: "spent_xp",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "unlocks",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgAccountBook_Unlock,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgAccountBook>): CMsgAccountBook {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.unlocks = [];
    if (value !== undefined) reflectionMergePartial<CMsgAccountBook>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgAccountBook,
  ): CMsgAccountBook {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 book_id */ 1:
          message.book_id = reader.uint32();
          break;
        case /* optional uint32 book_xp */ 2:
          message.book_xp = reader.uint32();
          break;
        case /* optional uint32 spent_xp */ 3:
          message.spent_xp = reader.uint32();
          break;
        case /* repeated CMsgAccountBook.Unlock unlocks */ 4:
          message.unlocks.push(CMsgAccountBook_Unlock.internalBinaryRead(reader, reader.uint32(), options));
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: CMsgAccountBook, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* optional uint32 book_id = 1; */
    if (message.book_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.book_id);
    /* optional uint32 book_xp = 2; */
    if (message.book_xp !== undefined) writer.tag(2, WireType.Varint).uint32(message.book_xp);
    /* optional uint32 spent_xp = 3; */
    if (message.spent_xp !== undefined) writer.tag(3, WireType.Varint).uint32(message.spent_xp);
    /* repeated CMsgAccountBook.Unlock unlocks = 4; */
    for (let i = 0; i < message.unlocks.length; i++)
      CMsgAccountBook_Unlock.internalBinaryWrite(
        message.unlocks[i],
        writer.tag(4, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgAccountBook
 */
export const CMsgAccountBook = new CMsgAccountBook$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgAccountBook_Unlock$Type extends MessageType<CMsgAccountBook_Unlock> {
  constructor() {
    super("CMsgAccountBook.Unlock", [
      {
        no: 1,
        name: "unlock_id",
        kind: "scalar",
        localName: "unlock_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "flags",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgAccountBook_Unlock>): CMsgAccountBook_Unlock {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgAccountBook_Unlock>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgAccountBook_Unlock,
  ): CMsgAccountBook_Unlock {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 unlock_id */ 1:
          message.unlock_id = reader.uint32();
          break;
        case /* optional uint32 flags */ 2:
          message.flags = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgAccountBook_Unlock,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 unlock_id = 1; */
    if (message.unlock_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.unlock_id);
    /* optional uint32 flags = 2; */
    if (message.flags !== undefined) writer.tag(2, WireType.Varint).uint32(message.flags);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgAccountBook.Unlock
 */
export const CMsgAccountBook_Unlock = new CMsgAccountBook_Unlock$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCBookUnlock$Type extends MessageType<CMsgClientToGCBookUnlock> {
  constructor() {
    super("CMsgClientToGCBookUnlock", [
      {
        no: 1,
        name: "book_id",
        kind: "scalar",
        localName: "book_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "unlock_id",
        kind: "scalar",
        localName: "unlock_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "expected_cost",
        kind: "scalar",
        localName: "expected_cost",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "client_version",
        kind: "scalar",
        localName: "client_version",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCBookUnlock>): CMsgClientToGCBookUnlock {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCBookUnlock>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCBookUnlock,
  ): CMsgClientToGCBookUnlock {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 book_id */ 1:
          message.book_id = reader.uint32();
          break;
        case /* optional uint32 unlock_id */ 2:
          message.unlock_id = reader.uint32();
          break;
        case /* optional uint32 expected_cost */ 3:
          message.expected_cost = reader.uint32();
          break;
        case /* optional uint32 client_version */ 4:
          message.client_version = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCBookUnlock,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 book_id = 1; */
    if (message.book_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.book_id);
    /* optional uint32 unlock_id = 2; */
    if (message.unlock_id !== undefined) writer.tag(2, WireType.Varint).uint32(message.unlock_id);
    /* optional uint32 expected_cost = 3; */
    if (message.expected_cost !== undefined) writer.tag(3, WireType.Varint).uint32(message.expected_cost);
    /* optional uint32 client_version = 4; */
    if (message.client_version !== undefined) writer.tag(4, WireType.Varint).uint32(message.client_version);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCBookUnlock
 */
export const CMsgClientToGCBookUnlock = new CMsgClientToGCBookUnlock$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCBookUnlockResponse$Type extends MessageType<CMsgClientToGCBookUnlockResponse> {
  constructor() {
    super("CMsgClientToGCBookUnlockResponse", [
      {
        no: 1,
        name: "result",
        kind: "enum",
        opt: true,
        T: () => ["CMsgClientToGCBookUnlockResponse.EResult", CMsgClientToGCBookUnlockResponse_EResult],
      },
      {
        no: 2,
        name: "updated_book",
        kind: "message",
        localName: "updated_book",
        T: () => CMsgAccountBook,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCBookUnlockResponse>): CMsgClientToGCBookUnlockResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCBookUnlockResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCBookUnlockResponse,
  ): CMsgClientToGCBookUnlockResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCBookUnlockResponse.EResult result */ 1:
          message.result = reader.int32();
          break;
        case /* optional CMsgAccountBook updated_book */ 2:
          message.updated_book = CMsgAccountBook.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.updated_book,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCBookUnlockResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCBookUnlockResponse.EResult result = 1; */
    if (message.result !== undefined) writer.tag(1, WireType.Varint).int32(message.result);
    /* optional CMsgAccountBook updated_book = 2; */
    if (message.updated_book)
      CMsgAccountBook.internalBinaryWrite(
        message.updated_book,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCBookUnlockResponse
 */
export const CMsgClientToGCBookUnlockResponse = new CMsgClientToGCBookUnlockResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetBook$Type extends MessageType<CMsgClientToGCGetBook> {
  constructor() {
    super("CMsgClientToGCGetBook", [
      {
        no: 1,
        name: "book_id",
        kind: "scalar",
        localName: "book_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCGetBook>): CMsgClientToGCGetBook {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetBook>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGetBook,
  ): CMsgClientToGCGetBook {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 book_id */ 1:
          message.book_id = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCGetBook,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 book_id = 1; */
    if (message.book_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.book_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetBook
 */
export const CMsgClientToGCGetBook = new CMsgClientToGCGetBook$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetBookResponse$Type extends MessageType<CMsgClientToGCGetBookResponse> {
  constructor() {
    super("CMsgClientToGCGetBookResponse", [
      {
        no: 1,
        name: "result",
        kind: "enum",
        opt: true,
        T: () => ["CMsgClientToGCGetBookResponse.EResult", CMsgClientToGCGetBookResponse_EResult],
      },
      { no: 2, name: "book", kind: "message", T: () => CMsgAccountBook },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCGetBookResponse>): CMsgClientToGCGetBookResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetBookResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGetBookResponse,
  ): CMsgClientToGCGetBookResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCGetBookResponse.EResult result */ 1:
          message.result = reader.int32();
          break;
        case /* optional CMsgAccountBook book */ 2:
          message.book = CMsgAccountBook.internalBinaryRead(reader, reader.uint32(), options, message.book);
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCGetBookResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCGetBookResponse.EResult result = 1; */
    if (message.result !== undefined) writer.tag(1, WireType.Varint).int32(message.result);
    /* optional CMsgAccountBook book = 2; */
    if (message.book)
      CMsgAccountBook.internalBinaryWrite(message.book, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetBookResponse
 */
export const CMsgClientToGCGetBookResponse = new CMsgClientToGCGetBookResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToClientBookUpdated$Type extends MessageType<CMsgGCToClientBookUpdated> {
  constructor() {
    super("CMsgGCToClientBookUpdated", [{ no: 1, name: "book", kind: "message", T: () => CMsgAccountBook }]);
  }
  create(value?: PartialMessage<CMsgGCToClientBookUpdated>): CMsgGCToClientBookUpdated {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgGCToClientBookUpdated>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgGCToClientBookUpdated,
  ): CMsgGCToClientBookUpdated {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgAccountBook book */ 1:
          message.book = CMsgAccountBook.internalBinaryRead(reader, reader.uint32(), options, message.book);
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgGCToClientBookUpdated,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgAccountBook book = 1; */
    if (message.book)
      CMsgAccountBook.internalBinaryWrite(message.book, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgGCToClientBookUpdated
 */
export const CMsgGCToClientBookUpdated = new CMsgGCToClientBookUpdated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCSubmitPlaytestUser$Type extends MessageType<CMsgClientToGCSubmitPlaytestUser> {
  constructor() {
    super("CMsgClientToGCSubmitPlaytestUser", [
      {
        no: 3,
        name: "location",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 4,
        name: "target_account_id",
        kind: "scalar",
        localName: "target_account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCSubmitPlaytestUser>): CMsgClientToGCSubmitPlaytestUser {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCSubmitPlaytestUser>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCSubmitPlaytestUser,
  ): CMsgClientToGCSubmitPlaytestUser {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string location */ 3:
          message.location = reader.string();
          break;
        case /* optional uint32 target_account_id */ 4:
          message.target_account_id = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCSubmitPlaytestUser,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional string location = 3; */
    if (message.location !== undefined) writer.tag(3, WireType.LengthDelimited).string(message.location);
    /* optional uint32 target_account_id = 4; */
    if (message.target_account_id !== undefined) writer.tag(4, WireType.Varint).uint32(message.target_account_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCSubmitPlaytestUser
 */
export const CMsgClientToGCSubmitPlaytestUser = new CMsgClientToGCSubmitPlaytestUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCSubmitPlaytestUserResponse$Type extends MessageType<CMsgClientToGCSubmitPlaytestUserResponse> {
  constructor() {
    super("CMsgClientToGCSubmitPlaytestUserResponse", [
      {
        no: 1,
        name: "response",
        kind: "enum",
        opt: true,
        T: () => [
          "CMsgClientToGCSubmitPlaytestUserResponse.EResponse",
          CMsgClientToGCSubmitPlaytestUserResponse_EResponse,
        ],
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCSubmitPlaytestUserResponse>): CMsgClientToGCSubmitPlaytestUserResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCSubmitPlaytestUserResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCSubmitPlaytestUserResponse,
  ): CMsgClientToGCSubmitPlaytestUserResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCSubmitPlaytestUserResponse.EResponse response */ 1:
          message.response = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCSubmitPlaytestUserResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCSubmitPlaytestUserResponse.EResponse response = 1; */
    if (message.response !== undefined) writer.tag(1, WireType.Varint).int32(message.response);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCSubmitPlaytestUserResponse
 */
export const CMsgClientToGCSubmitPlaytestUserResponse = new CMsgClientToGCSubmitPlaytestUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgHeroBuild$Type extends MessageType<CMsgHeroBuild> {
  constructor() {
    super("CMsgHeroBuild", [
      {
        no: 1,
        name: "hero_build_id",
        kind: "scalar",
        localName: "hero_build_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "hero_id",
        kind: "scalar",
        localName: "hero_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "author_account_id",
        kind: "scalar",
        localName: "author_account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "last_updated_timestamp",
        kind: "scalar",
        localName: "last_updated_timestamp",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "name",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 6,
        name: "description",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 7,
        name: "language",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 8,
        name: "version",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 9,
        name: "origin_build_id",
        kind: "scalar",
        localName: "origin_build_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 10,
        name: "details",
        kind: "message",
        T: () => CMsgHeroBuild_Details_V0,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgHeroBuild>): CMsgHeroBuild {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgHeroBuild>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgHeroBuild,
  ): CMsgHeroBuild {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 hero_build_id */ 1:
          message.hero_build_id = reader.uint32();
          break;
        case /* optional uint32 hero_id */ 2:
          message.hero_id = reader.uint32();
          break;
        case /* optional uint32 author_account_id */ 3:
          message.author_account_id = reader.uint32();
          break;
        case /* optional uint32 last_updated_timestamp */ 4:
          message.last_updated_timestamp = reader.uint32();
          break;
        case /* optional string name */ 5:
          message.name = reader.string();
          break;
        case /* optional string description */ 6:
          message.description = reader.string();
          break;
        case /* optional uint32 language */ 7:
          message.language = reader.uint32();
          break;
        case /* optional uint32 version */ 8:
          message.version = reader.uint32();
          break;
        case /* optional uint32 origin_build_id */ 9:
          message.origin_build_id = reader.uint32();
          break;
        case /* optional CMsgHeroBuild.Details_V0 details */ 10:
          message.details = CMsgHeroBuild_Details_V0.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.details,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: CMsgHeroBuild, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* optional uint32 hero_build_id = 1; */
    if (message.hero_build_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.hero_build_id);
    /* optional uint32 hero_id = 2; */
    if (message.hero_id !== undefined) writer.tag(2, WireType.Varint).uint32(message.hero_id);
    /* optional uint32 author_account_id = 3; */
    if (message.author_account_id !== undefined) writer.tag(3, WireType.Varint).uint32(message.author_account_id);
    /* optional uint32 last_updated_timestamp = 4; */
    if (message.last_updated_timestamp !== undefined)
      writer.tag(4, WireType.Varint).uint32(message.last_updated_timestamp);
    /* optional string name = 5; */
    if (message.name !== undefined) writer.tag(5, WireType.LengthDelimited).string(message.name);
    /* optional string description = 6; */
    if (message.description !== undefined) writer.tag(6, WireType.LengthDelimited).string(message.description);
    /* optional uint32 language = 7; */
    if (message.language !== undefined) writer.tag(7, WireType.Varint).uint32(message.language);
    /* optional uint32 version = 8; */
    if (message.version !== undefined) writer.tag(8, WireType.Varint).uint32(message.version);
    /* optional uint32 origin_build_id = 9; */
    if (message.origin_build_id !== undefined) writer.tag(9, WireType.Varint).uint32(message.origin_build_id);
    /* optional CMsgHeroBuild.Details_V0 details = 10; */
    if (message.details)
      CMsgHeroBuild_Details_V0.internalBinaryWrite(
        message.details,
        writer.tag(10, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgHeroBuild
 */
export const CMsgHeroBuild = new CMsgHeroBuild$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgHeroBuild_BuildModEntry$Type extends MessageType<CMsgHeroBuild_BuildModEntry> {
  constructor() {
    super("CMsgHeroBuild.BuildModEntry", [
      {
        no: 1,
        name: "ability_id",
        kind: "scalar",
        localName: "ability_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "annotation",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgHeroBuild_BuildModEntry>): CMsgHeroBuild_BuildModEntry {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgHeroBuild_BuildModEntry>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgHeroBuild_BuildModEntry,
  ): CMsgHeroBuild_BuildModEntry {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 ability_id */ 1:
          message.ability_id = reader.uint32();
          break;
        case /* optional string annotation */ 2:
          message.annotation = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgHeroBuild_BuildModEntry,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 ability_id = 1; */
    if (message.ability_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.ability_id);
    /* optional string annotation = 2; */
    if (message.annotation !== undefined) writer.tag(2, WireType.LengthDelimited).string(message.annotation);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgHeroBuild.BuildModEntry
 */
export const CMsgHeroBuild_BuildModEntry = new CMsgHeroBuild_BuildModEntry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgHeroBuild_BuildModCategory$Type extends MessageType<CMsgHeroBuild_BuildModCategory> {
  constructor() {
    super("CMsgHeroBuild.BuildModCategory", [
      {
        no: 1,
        name: "mods",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgHeroBuild_BuildModEntry,
      },
      {
        no: 2,
        name: "name",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 3,
        name: "description",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 4,
        name: "width",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 5,
        name: "height",
        kind: "scalar",
        opt: true,
        T: 2 /*ScalarType.FLOAT*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgHeroBuild_BuildModCategory>): CMsgHeroBuild_BuildModCategory {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.mods = [];
    if (value !== undefined) reflectionMergePartial<CMsgHeroBuild_BuildModCategory>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgHeroBuild_BuildModCategory,
  ): CMsgHeroBuild_BuildModCategory {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated CMsgHeroBuild.BuildModEntry mods */ 1:
          message.mods.push(CMsgHeroBuild_BuildModEntry.internalBinaryRead(reader, reader.uint32(), options));
          break;
        case /* optional string name */ 2:
          message.name = reader.string();
          break;
        case /* optional string description */ 3:
          message.description = reader.string();
          break;
        case /* optional float width */ 4:
          message.width = reader.float();
          break;
        case /* optional float height */ 5:
          message.height = reader.float();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgHeroBuild_BuildModCategory,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated CMsgHeroBuild.BuildModEntry mods = 1; */
    for (let i = 0; i < message.mods.length; i++)
      CMsgHeroBuild_BuildModEntry.internalBinaryWrite(
        message.mods[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional string name = 2; */
    if (message.name !== undefined) writer.tag(2, WireType.LengthDelimited).string(message.name);
    /* optional string description = 3; */
    if (message.description !== undefined) writer.tag(3, WireType.LengthDelimited).string(message.description);
    /* optional float width = 4; */
    if (message.width !== undefined) writer.tag(4, WireType.Bit32).float(message.width);
    /* optional float height = 5; */
    if (message.height !== undefined) writer.tag(5, WireType.Bit32).float(message.height);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgHeroBuild.BuildModCategory
 */
export const CMsgHeroBuild_BuildModCategory = new CMsgHeroBuild_BuildModCategory$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgHeroBuild_CurrencyChange$Type extends MessageType<CMsgHeroBuild_CurrencyChange> {
  constructor() {
    super("CMsgHeroBuild.CurrencyChange", [
      {
        no: 1,
        name: "ability_id",
        kind: "scalar",
        localName: "ability_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "currency_type",
        kind: "scalar",
        localName: "currency_type",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 3,
        name: "delta",
        kind: "scalar",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 4,
        name: "annotation",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgHeroBuild_CurrencyChange>): CMsgHeroBuild_CurrencyChange {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgHeroBuild_CurrencyChange>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgHeroBuild_CurrencyChange,
  ): CMsgHeroBuild_CurrencyChange {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 ability_id */ 1:
          message.ability_id = reader.uint32();
          break;
        case /* optional int32 currency_type */ 2:
          message.currency_type = reader.int32();
          break;
        case /* optional int32 delta */ 3:
          message.delta = reader.int32();
          break;
        case /* optional string annotation */ 4:
          message.annotation = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgHeroBuild_CurrencyChange,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 ability_id = 1; */
    if (message.ability_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.ability_id);
    /* optional int32 currency_type = 2; */
    if (message.currency_type !== undefined) writer.tag(2, WireType.Varint).int32(message.currency_type);
    /* optional int32 delta = 3; */
    if (message.delta !== undefined) writer.tag(3, WireType.Varint).int32(message.delta);
    /* optional string annotation = 4; */
    if (message.annotation !== undefined) writer.tag(4, WireType.LengthDelimited).string(message.annotation);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgHeroBuild.CurrencyChange
 */
export const CMsgHeroBuild_CurrencyChange = new CMsgHeroBuild_CurrencyChange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgHeroBuild_AbilityOrder$Type extends MessageType<CMsgHeroBuild_AbilityOrder> {
  constructor() {
    super("CMsgHeroBuild.AbilityOrder", [
      {
        no: 1,
        name: "currency_changes",
        kind: "message",
        localName: "currency_changes",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgHeroBuild_CurrencyChange,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgHeroBuild_AbilityOrder>): CMsgHeroBuild_AbilityOrder {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.currency_changes = [];
    if (value !== undefined) reflectionMergePartial<CMsgHeroBuild_AbilityOrder>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgHeroBuild_AbilityOrder,
  ): CMsgHeroBuild_AbilityOrder {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated CMsgHeroBuild.CurrencyChange currency_changes */ 1:
          message.currency_changes.push(
            CMsgHeroBuild_CurrencyChange.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgHeroBuild_AbilityOrder,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated CMsgHeroBuild.CurrencyChange currency_changes = 1; */
    for (let i = 0; i < message.currency_changes.length; i++)
      CMsgHeroBuild_CurrencyChange.internalBinaryWrite(
        message.currency_changes[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgHeroBuild.AbilityOrder
 */
export const CMsgHeroBuild_AbilityOrder = new CMsgHeroBuild_AbilityOrder$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgHeroBuild_Details_V0$Type extends MessageType<CMsgHeroBuild_Details_V0> {
  constructor() {
    super("CMsgHeroBuild.Details_V0", [
      {
        no: 1,
        name: "mod_categories",
        kind: "message",
        localName: "mod_categories",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgHeroBuild_BuildModCategory,
      },
      {
        no: 2,
        name: "ability_order",
        kind: "message",
        localName: "ability_order",
        T: () => CMsgHeroBuild_AbilityOrder,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgHeroBuild_Details_V0>): CMsgHeroBuild_Details_V0 {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.mod_categories = [];
    if (value !== undefined) reflectionMergePartial<CMsgHeroBuild_Details_V0>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgHeroBuild_Details_V0,
  ): CMsgHeroBuild_Details_V0 {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated CMsgHeroBuild.BuildModCategory mod_categories */ 1:
          message.mod_categories.push(
            CMsgHeroBuild_BuildModCategory.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* optional CMsgHeroBuild.AbilityOrder ability_order */ 2:
          message.ability_order = CMsgHeroBuild_AbilityOrder.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.ability_order,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgHeroBuild_Details_V0,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated CMsgHeroBuild.BuildModCategory mod_categories = 1; */
    for (let i = 0; i < message.mod_categories.length; i++)
      CMsgHeroBuild_BuildModCategory.internalBinaryWrite(
        message.mod_categories[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional CMsgHeroBuild.AbilityOrder ability_order = 2; */
    if (message.ability_order)
      CMsgHeroBuild_AbilityOrder.internalBinaryWrite(
        message.ability_order,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgHeroBuild.Details_V0
 */
export const CMsgHeroBuild_Details_V0 = new CMsgHeroBuild_Details_V0$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCUpdateHeroBuild$Type extends MessageType<CMsgClientToGCUpdateHeroBuild> {
  constructor() {
    super("CMsgClientToGCUpdateHeroBuild", [
      {
        no: 1,
        name: "hero_build",
        kind: "message",
        localName: "hero_build",
        T: () => CMsgHeroBuild,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCUpdateHeroBuild>): CMsgClientToGCUpdateHeroBuild {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCUpdateHeroBuild>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCUpdateHeroBuild,
  ): CMsgClientToGCUpdateHeroBuild {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgHeroBuild hero_build */ 1:
          message.hero_build = CMsgHeroBuild.internalBinaryRead(reader, reader.uint32(), options, message.hero_build);
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCUpdateHeroBuild,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgHeroBuild hero_build = 1; */
    if (message.hero_build)
      CMsgHeroBuild.internalBinaryWrite(
        message.hero_build,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCUpdateHeroBuild
 */
export const CMsgClientToGCUpdateHeroBuild = new CMsgClientToGCUpdateHeroBuild$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCUpdateHeroBuildResponse$Type extends MessageType<CMsgClientToGCUpdateHeroBuildResponse> {
  constructor() {
    super("CMsgClientToGCUpdateHeroBuildResponse", [
      {
        no: 1,
        name: "response",
        kind: "enum",
        opt: true,
        T: () => ["CMsgClientToGCUpdateHeroBuildResponse.EResponse", CMsgClientToGCUpdateHeroBuildResponse_EResponse],
      },
      {
        no: 2,
        name: "hero_build_id",
        kind: "scalar",
        localName: "hero_build_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "version",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCUpdateHeroBuildResponse>): CMsgClientToGCUpdateHeroBuildResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCUpdateHeroBuildResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCUpdateHeroBuildResponse,
  ): CMsgClientToGCUpdateHeroBuildResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCUpdateHeroBuildResponse.EResponse response */ 1:
          message.response = reader.int32();
          break;
        case /* optional uint32 hero_build_id */ 2:
          message.hero_build_id = reader.uint32();
          break;
        case /* optional uint32 version */ 3:
          message.version = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCUpdateHeroBuildResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCUpdateHeroBuildResponse.EResponse response = 1; */
    if (message.response !== undefined) writer.tag(1, WireType.Varint).int32(message.response);
    /* optional uint32 hero_build_id = 2; */
    if (message.hero_build_id !== undefined) writer.tag(2, WireType.Varint).uint32(message.hero_build_id);
    /* optional uint32 version = 3; */
    if (message.version !== undefined) writer.tag(3, WireType.Varint).uint32(message.version);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCUpdateHeroBuildResponse
 */
export const CMsgClientToGCUpdateHeroBuildResponse = new CMsgClientToGCUpdateHeroBuildResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCFindHeroBuilds$Type extends MessageType<CMsgClientToGCFindHeroBuilds> {
  constructor() {
    super("CMsgClientToGCFindHeroBuilds", [
      {
        no: 1,
        name: "author_account_id",
        kind: "scalar",
        localName: "author_account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "hero_id",
        kind: "scalar",
        localName: "hero_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "language",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 4,
        name: "search_text",
        kind: "scalar",
        localName: "search_text",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 5,
        name: "hero_build_id",
        kind: "scalar",
        localName: "hero_build_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCFindHeroBuilds>): CMsgClientToGCFindHeroBuilds {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.language = [];
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCFindHeroBuilds>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCFindHeroBuilds,
  ): CMsgClientToGCFindHeroBuilds {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 author_account_id */ 1:
          message.author_account_id = reader.uint32();
          break;
        case /* optional uint32 hero_id */ 2:
          message.hero_id = reader.uint32();
          break;
        case /* repeated int32 language */ 3:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.language.push(reader.int32());
          else message.language.push(reader.int32());
          break;
        case /* optional string search_text */ 4:
          message.search_text = reader.string();
          break;
        case /* optional uint32 hero_build_id */ 5:
          message.hero_build_id = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCFindHeroBuilds,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 author_account_id = 1; */
    if (message.author_account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.author_account_id);
    /* optional uint32 hero_id = 2; */
    if (message.hero_id !== undefined) writer.tag(2, WireType.Varint).uint32(message.hero_id);
    /* repeated int32 language = 3; */
    for (let i = 0; i < message.language.length; i++) writer.tag(3, WireType.Varint).int32(message.language[i]);
    /* optional string search_text = 4; */
    if (message.search_text !== undefined) writer.tag(4, WireType.LengthDelimited).string(message.search_text);
    /* optional uint32 hero_build_id = 5; */
    if (message.hero_build_id !== undefined) writer.tag(5, WireType.Varint).uint32(message.hero_build_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCFindHeroBuilds
 */
export const CMsgClientToGCFindHeroBuilds = new CMsgClientToGCFindHeroBuilds$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgHeroBuildPreference$Type extends MessageType<CMsgHeroBuildPreference> {
  constructor() {
    super("CMsgHeroBuildPreference", [
      {
        no: 1,
        name: "favorited",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 2,
        name: "ignored",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 3,
        name: "reported",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgHeroBuildPreference>): CMsgHeroBuildPreference {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgHeroBuildPreference>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgHeroBuildPreference,
  ): CMsgHeroBuildPreference {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional bool favorited */ 1:
          message.favorited = reader.bool();
          break;
        case /* optional bool ignored */ 2:
          message.ignored = reader.bool();
          break;
        case /* optional bool reported */ 3:
          message.reported = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgHeroBuildPreference,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional bool favorited = 1; */
    if (message.favorited !== undefined) writer.tag(1, WireType.Varint).bool(message.favorited);
    /* optional bool ignored = 2; */
    if (message.ignored !== undefined) writer.tag(2, WireType.Varint).bool(message.ignored);
    /* optional bool reported = 3; */
    if (message.reported !== undefined) writer.tag(3, WireType.Varint).bool(message.reported);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgHeroBuildPreference
 */
export const CMsgHeroBuildPreference = new CMsgHeroBuildPreference$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCFindHeroBuildsResponse$Type extends MessageType<CMsgClientToGCFindHeroBuildsResponse> {
  constructor() {
    super("CMsgClientToGCFindHeroBuildsResponse", [
      {
        no: 1,
        name: "response",
        kind: "enum",
        opt: true,
        T: () => ["CMsgClientToGCFindHeroBuildsResponse.EResponse", CMsgClientToGCFindHeroBuildsResponse_EResponse],
      },
      {
        no: 2,
        name: "results",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgClientToGCFindHeroBuildsResponse_HeroBuildResult,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCFindHeroBuildsResponse>): CMsgClientToGCFindHeroBuildsResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.results = [];
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCFindHeroBuildsResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCFindHeroBuildsResponse,
  ): CMsgClientToGCFindHeroBuildsResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCFindHeroBuildsResponse.EResponse response */ 1:
          message.response = reader.int32();
          break;
        case /* repeated CMsgClientToGCFindHeroBuildsResponse.HeroBuildResult results */ 2:
          message.results.push(
            CMsgClientToGCFindHeroBuildsResponse_HeroBuildResult.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCFindHeroBuildsResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCFindHeroBuildsResponse.EResponse response = 1; */
    if (message.response !== undefined) writer.tag(1, WireType.Varint).int32(message.response);
    /* repeated CMsgClientToGCFindHeroBuildsResponse.HeroBuildResult results = 2; */
    for (let i = 0; i < message.results.length; i++)
      CMsgClientToGCFindHeroBuildsResponse_HeroBuildResult.internalBinaryWrite(
        message.results[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCFindHeroBuildsResponse
 */
export const CMsgClientToGCFindHeroBuildsResponse = new CMsgClientToGCFindHeroBuildsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCFindHeroBuildsResponse_HeroBuildResult$Type extends MessageType<CMsgClientToGCFindHeroBuildsResponse_HeroBuildResult> {
  constructor() {
    super("CMsgClientToGCFindHeroBuildsResponse.HeroBuildResult", [
      {
        no: 1,
        name: "hero_build",
        kind: "message",
        localName: "hero_build",
        T: () => CMsgHeroBuild,
      },
      {
        no: 2,
        name: "preference",
        kind: "message",
        T: () => CMsgHeroBuildPreference,
      },
      {
        no: 3,
        name: "num_favorites",
        kind: "scalar",
        localName: "num_favorites",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "num_ignores",
        kind: "scalar",
        localName: "num_ignores",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "num_reports",
        kind: "scalar",
        localName: "num_reports",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 6,
        name: "num_weekly_favorites",
        kind: "scalar",
        localName: "num_weekly_favorites",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 7,
        name: "num_daily_favorites",
        kind: "scalar",
        localName: "num_daily_favorites",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 8,
        name: "rollup_category",
        kind: "scalar",
        localName: "rollup_category",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgClientToGCFindHeroBuildsResponse_HeroBuildResult>,
  ): CMsgClientToGCFindHeroBuildsResponse_HeroBuildResult {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgClientToGCFindHeroBuildsResponse_HeroBuildResult>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCFindHeroBuildsResponse_HeroBuildResult,
  ): CMsgClientToGCFindHeroBuildsResponse_HeroBuildResult {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgHeroBuild hero_build */ 1:
          message.hero_build = CMsgHeroBuild.internalBinaryRead(reader, reader.uint32(), options, message.hero_build);
          break;
        case /* optional CMsgHeroBuildPreference preference */ 2:
          message.preference = CMsgHeroBuildPreference.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.preference,
          );
          break;
        case /* optional uint32 num_favorites */ 3:
          message.num_favorites = reader.uint32();
          break;
        case /* optional uint32 num_ignores */ 4:
          message.num_ignores = reader.uint32();
          break;
        case /* optional uint32 num_reports */ 5:
          message.num_reports = reader.uint32();
          break;
        case /* optional uint32 num_weekly_favorites */ 6:
          message.num_weekly_favorites = reader.uint32();
          break;
        case /* optional uint32 num_daily_favorites */ 7:
          message.num_daily_favorites = reader.uint32();
          break;
        case /* optional uint32 rollup_category */ 8:
          message.rollup_category = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCFindHeroBuildsResponse_HeroBuildResult,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgHeroBuild hero_build = 1; */
    if (message.hero_build)
      CMsgHeroBuild.internalBinaryWrite(
        message.hero_build,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional CMsgHeroBuildPreference preference = 2; */
    if (message.preference)
      CMsgHeroBuildPreference.internalBinaryWrite(
        message.preference,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional uint32 num_favorites = 3; */
    if (message.num_favorites !== undefined) writer.tag(3, WireType.Varint).uint32(message.num_favorites);
    /* optional uint32 num_ignores = 4; */
    if (message.num_ignores !== undefined) writer.tag(4, WireType.Varint).uint32(message.num_ignores);
    /* optional uint32 num_reports = 5; */
    if (message.num_reports !== undefined) writer.tag(5, WireType.Varint).uint32(message.num_reports);
    /* optional uint32 num_weekly_favorites = 6; */
    if (message.num_weekly_favorites !== undefined) writer.tag(6, WireType.Varint).uint32(message.num_weekly_favorites);
    /* optional uint32 num_daily_favorites = 7; */
    if (message.num_daily_favorites !== undefined) writer.tag(7, WireType.Varint).uint32(message.num_daily_favorites);
    /* optional uint32 rollup_category = 8; */
    if (message.rollup_category !== undefined) writer.tag(8, WireType.Varint).uint32(message.rollup_category);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCFindHeroBuildsResponse.HeroBuildResult
 */
export const CMsgClientToGCFindHeroBuildsResponse_HeroBuildResult =
  new CMsgClientToGCFindHeroBuildsResponse_HeroBuildResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCUpdateHeroBuildPreference$Type extends MessageType<CMsgClientToGCUpdateHeroBuildPreference> {
  constructor() {
    super("CMsgClientToGCUpdateHeroBuildPreference", [
      {
        no: 1,
        name: "hero_build_id",
        kind: "scalar",
        localName: "hero_build_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "preference",
        kind: "message",
        T: () => CMsgHeroBuildPreference,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCUpdateHeroBuildPreference>): CMsgClientToGCUpdateHeroBuildPreference {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCUpdateHeroBuildPreference>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCUpdateHeroBuildPreference,
  ): CMsgClientToGCUpdateHeroBuildPreference {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 hero_build_id */ 1:
          message.hero_build_id = reader.uint32();
          break;
        case /* optional CMsgHeroBuildPreference preference */ 2:
          message.preference = CMsgHeroBuildPreference.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.preference,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCUpdateHeroBuildPreference,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 hero_build_id = 1; */
    if (message.hero_build_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.hero_build_id);
    /* optional CMsgHeroBuildPreference preference = 2; */
    if (message.preference)
      CMsgHeroBuildPreference.internalBinaryWrite(
        message.preference,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCUpdateHeroBuildPreference
 */
export const CMsgClientToGCUpdateHeroBuildPreference = new CMsgClientToGCUpdateHeroBuildPreference$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCUpdateHeroBuildPreferenceResponse$Type extends MessageType<CMsgClientToGCUpdateHeroBuildPreferenceResponse> {
  constructor() {
    super("CMsgClientToGCUpdateHeroBuildPreferenceResponse", [
      {
        no: 1,
        name: "response",
        kind: "enum",
        opt: true,
        T: () => [
          "CMsgClientToGCUpdateHeroBuildPreferenceResponse.EResponse",
          CMsgClientToGCUpdateHeroBuildPreferenceResponse_EResponse,
        ],
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgClientToGCUpdateHeroBuildPreferenceResponse>,
  ): CMsgClientToGCUpdateHeroBuildPreferenceResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgClientToGCUpdateHeroBuildPreferenceResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCUpdateHeroBuildPreferenceResponse,
  ): CMsgClientToGCUpdateHeroBuildPreferenceResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCUpdateHeroBuildPreferenceResponse.EResponse response */ 1:
          message.response = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCUpdateHeroBuildPreferenceResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCUpdateHeroBuildPreferenceResponse.EResponse response = 1; */
    if (message.response !== undefined) writer.tag(1, WireType.Varint).int32(message.response);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCUpdateHeroBuildPreferenceResponse
 */
export const CMsgClientToGCUpdateHeroBuildPreferenceResponse =
  new CMsgClientToGCUpdateHeroBuildPreferenceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetOldHeroBuildData$Type extends MessageType<CMsgClientToGCGetOldHeroBuildData> {
  constructor() {
    super("CMsgClientToGCGetOldHeroBuildData", [
      {
        no: 1,
        name: "author_account_id",
        kind: "scalar",
        localName: "author_account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCGetOldHeroBuildData>): CMsgClientToGCGetOldHeroBuildData {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetOldHeroBuildData>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGetOldHeroBuildData,
  ): CMsgClientToGCGetOldHeroBuildData {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 author_account_id */ 1:
          message.author_account_id = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCGetOldHeroBuildData,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 author_account_id = 1; */
    if (message.author_account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.author_account_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetOldHeroBuildData
 */
export const CMsgClientToGCGetOldHeroBuildData = new CMsgClientToGCGetOldHeroBuildData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetOldHeroBuildDataResponse$Type extends MessageType<CMsgClientToGCGetOldHeroBuildDataResponse> {
  constructor() {
    super("CMsgClientToGCGetOldHeroBuildDataResponse", [
      {
        no: 1,
        name: "response",
        kind: "enum",
        opt: true,
        T: () => [
          "CMsgClientToGCGetOldHeroBuildDataResponse.EResponse",
          CMsgClientToGCGetOldHeroBuildDataResponse_EResponse,
        ],
      },
      {
        no: 2,
        name: "author_account_id",
        kind: "scalar",
        localName: "author_account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "results",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgClientToGCGetOldHeroBuildDataResponse_OldBuild,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCGetOldHeroBuildDataResponse>): CMsgClientToGCGetOldHeroBuildDataResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.results = [];
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetOldHeroBuildDataResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGetOldHeroBuildDataResponse,
  ): CMsgClientToGCGetOldHeroBuildDataResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCGetOldHeroBuildDataResponse.EResponse response */ 1:
          message.response = reader.int32();
          break;
        case /* optional uint32 author_account_id */ 2:
          message.author_account_id = reader.uint32();
          break;
        case /* repeated CMsgClientToGCGetOldHeroBuildDataResponse.OldBuild results */ 3:
          message.results.push(
            CMsgClientToGCGetOldHeroBuildDataResponse_OldBuild.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCGetOldHeroBuildDataResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCGetOldHeroBuildDataResponse.EResponse response = 1; */
    if (message.response !== undefined) writer.tag(1, WireType.Varint).int32(message.response);
    /* optional uint32 author_account_id = 2; */
    if (message.author_account_id !== undefined) writer.tag(2, WireType.Varint).uint32(message.author_account_id);
    /* repeated CMsgClientToGCGetOldHeroBuildDataResponse.OldBuild results = 3; */
    for (let i = 0; i < message.results.length; i++)
      CMsgClientToGCGetOldHeroBuildDataResponse_OldBuild.internalBinaryWrite(
        message.results[i],
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetOldHeroBuildDataResponse
 */
export const CMsgClientToGCGetOldHeroBuildDataResponse = new CMsgClientToGCGetOldHeroBuildDataResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetOldHeroBuildDataResponse_OldDetails_V0$Type extends MessageType<CMsgClientToGCGetOldHeroBuildDataResponse_OldDetails_V0> {
  constructor() {
    super("CMsgClientToGCGetOldHeroBuildDataResponse.OldDetails_V0", [
      {
        no: 1,
        name: "recommended_mod_ability_ids",
        kind: "scalar",
        localName: "recommended_mod_ability_ids",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgClientToGCGetOldHeroBuildDataResponse_OldDetails_V0>,
  ): CMsgClientToGCGetOldHeroBuildDataResponse_OldDetails_V0 {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.recommended_mod_ability_ids = [];
    if (value !== undefined)
      reflectionMergePartial<CMsgClientToGCGetOldHeroBuildDataResponse_OldDetails_V0>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGetOldHeroBuildDataResponse_OldDetails_V0,
  ): CMsgClientToGCGetOldHeroBuildDataResponse_OldDetails_V0 {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated uint32 recommended_mod_ability_ids */ 1:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.recommended_mod_ability_ids.push(reader.uint32());
          else message.recommended_mod_ability_ids.push(reader.uint32());
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCGetOldHeroBuildDataResponse_OldDetails_V0,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated uint32 recommended_mod_ability_ids = 1; */
    for (let i = 0; i < message.recommended_mod_ability_ids.length; i++)
      writer.tag(1, WireType.Varint).uint32(message.recommended_mod_ability_ids[i]);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetOldHeroBuildDataResponse.OldDetails_V0
 */
export const CMsgClientToGCGetOldHeroBuildDataResponse_OldDetails_V0 =
  new CMsgClientToGCGetOldHeroBuildDataResponse_OldDetails_V0$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetOldHeroBuildDataResponse_OldBuild$Type extends MessageType<CMsgClientToGCGetOldHeroBuildDataResponse_OldBuild> {
  constructor() {
    super("CMsgClientToGCGetOldHeroBuildDataResponse.OldBuild", [
      {
        no: 1,
        name: "name",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 2,
        name: "hero_id",
        kind: "scalar",
        localName: "hero_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "description",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 4,
        name: "details",
        kind: "message",
        T: () => CMsgClientToGCGetOldHeroBuildDataResponse_OldDetails_V0,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgClientToGCGetOldHeroBuildDataResponse_OldBuild>,
  ): CMsgClientToGCGetOldHeroBuildDataResponse_OldBuild {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgClientToGCGetOldHeroBuildDataResponse_OldBuild>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGetOldHeroBuildDataResponse_OldBuild,
  ): CMsgClientToGCGetOldHeroBuildDataResponse_OldBuild {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string name */ 1:
          message.name = reader.string();
          break;
        case /* optional uint32 hero_id */ 2:
          message.hero_id = reader.uint32();
          break;
        case /* optional string description */ 3:
          message.description = reader.string();
          break;
        case /* optional CMsgClientToGCGetOldHeroBuildDataResponse.OldDetails_V0 details */ 4:
          message.details = CMsgClientToGCGetOldHeroBuildDataResponse_OldDetails_V0.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.details,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCGetOldHeroBuildDataResponse_OldBuild,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional string name = 1; */
    if (message.name !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.name);
    /* optional uint32 hero_id = 2; */
    if (message.hero_id !== undefined) writer.tag(2, WireType.Varint).uint32(message.hero_id);
    /* optional string description = 3; */
    if (message.description !== undefined) writer.tag(3, WireType.LengthDelimited).string(message.description);
    /* optional CMsgClientToGCGetOldHeroBuildDataResponse.OldDetails_V0 details = 4; */
    if (message.details)
      CMsgClientToGCGetOldHeroBuildDataResponse_OldDetails_V0.internalBinaryWrite(
        message.details,
        writer.tag(4, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetOldHeroBuildDataResponse.OldBuild
 */
export const CMsgClientToGCGetOldHeroBuildDataResponse_OldBuild =
  new CMsgClientToGCGetOldHeroBuildDataResponse_OldBuild$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCReportPlayerFromMatch$Type extends MessageType<CMsgClientToGCReportPlayerFromMatch> {
  constructor() {
    super("CMsgClientToGCReportPlayerFromMatch", [
      {
        no: 1,
        name: "match_id",
        kind: "scalar",
        localName: "match_id",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 2,
        name: "target_account_id",
        kind: "scalar",
        localName: "target_account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "report_type",
        kind: "enum",
        localName: "report_type",
        opt: true,
        T: () => ["CMsgClientToGCReportPlayerFromMatch.EReportType", CMsgClientToGCReportPlayerFromMatch_EReportType],
      },
      {
        no: 4,
        name: "report_text",
        kind: "scalar",
        localName: "report_text",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCReportPlayerFromMatch>): CMsgClientToGCReportPlayerFromMatch {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCReportPlayerFromMatch>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCReportPlayerFromMatch,
  ): CMsgClientToGCReportPlayerFromMatch {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 match_id */ 1:
          message.match_id = reader.uint64().toBigInt();
          break;
        case /* optional uint32 target_account_id */ 2:
          message.target_account_id = reader.uint32();
          break;
        case /* optional CMsgClientToGCReportPlayerFromMatch.EReportType report_type */ 3:
          message.report_type = reader.int32();
          break;
        case /* optional string report_text */ 4:
          message.report_text = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCReportPlayerFromMatch,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint64 match_id = 1; */
    if (message.match_id !== undefined) writer.tag(1, WireType.Varint).uint64(message.match_id);
    /* optional uint32 target_account_id = 2; */
    if (message.target_account_id !== undefined) writer.tag(2, WireType.Varint).uint32(message.target_account_id);
    /* optional CMsgClientToGCReportPlayerFromMatch.EReportType report_type = 3; */
    if (message.report_type !== undefined) writer.tag(3, WireType.Varint).int32(message.report_type);
    /* optional string report_text = 4; */
    if (message.report_text !== undefined) writer.tag(4, WireType.LengthDelimited).string(message.report_text);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCReportPlayerFromMatch
 */
export const CMsgClientToGCReportPlayerFromMatch = new CMsgClientToGCReportPlayerFromMatch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCReportPlayerFromMatchResponse$Type extends MessageType<CMsgClientToGCReportPlayerFromMatchResponse> {
  constructor() {
    super("CMsgClientToGCReportPlayerFromMatchResponse", [
      {
        no: 1,
        name: "response",
        kind: "enum",
        opt: true,
        T: () => [
          "CMsgClientToGCReportPlayerFromMatchResponse.EResponse",
          CMsgClientToGCReportPlayerFromMatchResponse_EResponse,
        ],
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgClientToGCReportPlayerFromMatchResponse>,
  ): CMsgClientToGCReportPlayerFromMatchResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCReportPlayerFromMatchResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCReportPlayerFromMatchResponse,
  ): CMsgClientToGCReportPlayerFromMatchResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCReportPlayerFromMatchResponse.EResponse response */ 1:
          message.response = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCReportPlayerFromMatchResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCReportPlayerFromMatchResponse.EResponse response = 1; */
    if (message.response !== undefined) writer.tag(1, WireType.Varint).int32(message.response);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCReportPlayerFromMatchResponse
 */
export const CMsgClientToGCReportPlayerFromMatchResponse = new CMsgClientToGCReportPlayerFromMatchResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetAccountMatchReports$Type extends MessageType<CMsgClientToGCGetAccountMatchReports> {
  constructor() {
    super("CMsgClientToGCGetAccountMatchReports", [
      {
        no: 1,
        name: "match_id",
        kind: "scalar",
        localName: "match_id",
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCGetAccountMatchReports>): CMsgClientToGCGetAccountMatchReports {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetAccountMatchReports>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGetAccountMatchReports,
  ): CMsgClientToGCGetAccountMatchReports {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint64 match_id */ 1:
          message.match_id = reader.uint64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCGetAccountMatchReports,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint64 match_id = 1; */
    if (message.match_id !== undefined) writer.tag(1, WireType.Varint).uint64(message.match_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetAccountMatchReports
 */
export const CMsgClientToGCGetAccountMatchReports = new CMsgClientToGCGetAccountMatchReports$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetAccountMatchReportsResponse$Type extends MessageType<CMsgClientToGCGetAccountMatchReportsResponse> {
  constructor() {
    super("CMsgClientToGCGetAccountMatchReportsResponse", [
      {
        no: 1,
        name: "response",
        kind: "enum",
        opt: true,
        T: () => [
          "CMsgClientToGCGetAccountMatchReportsResponse.EResponse",
          CMsgClientToGCGetAccountMatchReportsResponse_EResponse,
        ],
      },
      {
        no: 2,
        name: "reports",
        kind: "message",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgClientToGCGetAccountMatchReportsResponse_Report,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgClientToGCGetAccountMatchReportsResponse>,
  ): CMsgClientToGCGetAccountMatchReportsResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.reports = [];
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetAccountMatchReportsResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGetAccountMatchReportsResponse,
  ): CMsgClientToGCGetAccountMatchReportsResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCGetAccountMatchReportsResponse.EResponse response */ 1:
          message.response = reader.int32();
          break;
        case /* repeated CMsgClientToGCGetAccountMatchReportsResponse.Report reports */ 2:
          message.reports.push(
            CMsgClientToGCGetAccountMatchReportsResponse_Report.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCGetAccountMatchReportsResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCGetAccountMatchReportsResponse.EResponse response = 1; */
    if (message.response !== undefined) writer.tag(1, WireType.Varint).int32(message.response);
    /* repeated CMsgClientToGCGetAccountMatchReportsResponse.Report reports = 2; */
    for (let i = 0; i < message.reports.length; i++)
      CMsgClientToGCGetAccountMatchReportsResponse_Report.internalBinaryWrite(
        message.reports[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetAccountMatchReportsResponse
 */
export const CMsgClientToGCGetAccountMatchReportsResponse = new CMsgClientToGCGetAccountMatchReportsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetAccountMatchReportsResponse_Report$Type extends MessageType<CMsgClientToGCGetAccountMatchReportsResponse_Report> {
  constructor() {
    super("CMsgClientToGCGetAccountMatchReportsResponse.Report", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        localName: "account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CMsgClientToGCGetAccountMatchReportsResponse_Report>,
  ): CMsgClientToGCGetAccountMatchReportsResponse_Report {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CMsgClientToGCGetAccountMatchReportsResponse_Report>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGetAccountMatchReportsResponse_Report,
  ): CMsgClientToGCGetAccountMatchReportsResponse_Report {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.account_id = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCGetAccountMatchReportsResponse_Report,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetAccountMatchReportsResponse.Report
 */
export const CMsgClientToGCGetAccountMatchReportsResponse_Report =
  new CMsgClientToGCGetAccountMatchReportsResponse_Report$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCDeleteHeroBuild$Type extends MessageType<CMsgClientToGCDeleteHeroBuild> {
  constructor() {
    super("CMsgClientToGCDeleteHeroBuild", [
      {
        no: 1,
        name: "author_account_id",
        kind: "scalar",
        localName: "author_account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "hero_build_id",
        kind: "scalar",
        localName: "hero_build_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCDeleteHeroBuild>): CMsgClientToGCDeleteHeroBuild {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCDeleteHeroBuild>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCDeleteHeroBuild,
  ): CMsgClientToGCDeleteHeroBuild {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 author_account_id */ 1:
          message.author_account_id = reader.uint32();
          break;
        case /* optional uint32 hero_build_id */ 2:
          message.hero_build_id = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCDeleteHeroBuild,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 author_account_id = 1; */
    if (message.author_account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.author_account_id);
    /* optional uint32 hero_build_id = 2; */
    if (message.hero_build_id !== undefined) writer.tag(2, WireType.Varint).uint32(message.hero_build_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCDeleteHeroBuild
 */
export const CMsgClientToGCDeleteHeroBuild = new CMsgClientToGCDeleteHeroBuild$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCDeleteHeroBuildResponse$Type extends MessageType<CMsgClientToGCDeleteHeroBuildResponse> {
  constructor() {
    super("CMsgClientToGCDeleteHeroBuildResponse", [
      {
        no: 1,
        name: "response",
        kind: "enum",
        opt: true,
        T: () => ["CMsgClientToGCDeleteHeroBuildResponse.EResponse", CMsgClientToGCDeleteHeroBuildResponse_EResponse],
      },
      {
        no: 2,
        name: "builds_deleted",
        kind: "scalar",
        localName: "builds_deleted",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCDeleteHeroBuildResponse>): CMsgClientToGCDeleteHeroBuildResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCDeleteHeroBuildResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCDeleteHeroBuildResponse,
  ): CMsgClientToGCDeleteHeroBuildResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCDeleteHeroBuildResponse.EResponse response */ 1:
          message.response = reader.int32();
          break;
        case /* optional uint32 builds_deleted */ 2:
          message.builds_deleted = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCDeleteHeroBuildResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCDeleteHeroBuildResponse.EResponse response = 1; */
    if (message.response !== undefined) writer.tag(1, WireType.Varint).int32(message.response);
    /* optional uint32 builds_deleted = 2; */
    if (message.builds_deleted !== undefined) writer.tag(2, WireType.Varint).uint32(message.builds_deleted);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCDeleteHeroBuildResponse
 */
export const CMsgClientToGCDeleteHeroBuildResponse = new CMsgClientToGCDeleteHeroBuildResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetActiveMatches$Type extends MessageType<CMsgClientToGCGetActiveMatches> {
  constructor() {
    super("CMsgClientToGCGetActiveMatches", []);
  }
  create(value?: PartialMessage<CMsgClientToGCGetActiveMatches>): CMsgClientToGCGetActiveMatches {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetActiveMatches>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGetActiveMatches,
  ): CMsgClientToGCGetActiveMatches {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: CMsgClientToGCGetActiveMatches,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetActiveMatches
 */
export const CMsgClientToGCGetActiveMatches = new CMsgClientToGCGetActiveMatches$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetActiveMatchesResponse$Type extends MessageType<CMsgClientToGCGetActiveMatchesResponse> {
  constructor() {
    super("CMsgClientToGCGetActiveMatchesResponse", [
      {
        no: 1,
        name: "active_matches",
        kind: "message",
        localName: "active_matches",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => CMsgDevMatchInfo,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCGetActiveMatchesResponse>): CMsgClientToGCGetActiveMatchesResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.active_matches = [];
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetActiveMatchesResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGetActiveMatchesResponse,
  ): CMsgClientToGCGetActiveMatchesResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated CMsgDevMatchInfo active_matches */ 1:
          message.active_matches.push(CMsgDevMatchInfo.internalBinaryRead(reader, reader.uint32(), options));
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCGetActiveMatchesResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated CMsgDevMatchInfo active_matches = 1; */
    for (let i = 0; i < message.active_matches.length; i++)
      CMsgDevMatchInfo.internalBinaryWrite(
        message.active_matches[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetActiveMatchesResponse
 */
export const CMsgClientToGCGetActiveMatchesResponse = new CMsgClientToGCGetActiveMatchesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetDiscordLink$Type extends MessageType<CMsgClientToGCGetDiscordLink> {
  constructor() {
    super("CMsgClientToGCGetDiscordLink", []);
  }
  create(value?: PartialMessage<CMsgClientToGCGetDiscordLink>): CMsgClientToGCGetDiscordLink {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetDiscordLink>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGetDiscordLink,
  ): CMsgClientToGCGetDiscordLink {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: CMsgClientToGCGetDiscordLink,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetDiscordLink
 */
export const CMsgClientToGCGetDiscordLink = new CMsgClientToGCGetDiscordLink$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetDiscordLinkResponse$Type extends MessageType<CMsgClientToGCGetDiscordLinkResponse> {
  constructor() {
    super("CMsgClientToGCGetDiscordLinkResponse", [
      {
        no: 1,
        name: "response",
        kind: "enum",
        opt: true,
        T: () => ["CMsgClientToGCGetDiscordLinkResponse.EResponse", CMsgClientToGCGetDiscordLinkResponse_EResponse],
      },
      {
        no: 2,
        name: "discord_link",
        kind: "scalar",
        localName: "discord_link",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 3,
        name: "valid_hours",
        kind: "scalar",
        localName: "valid_hours",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCGetDiscordLinkResponse>): CMsgClientToGCGetDiscordLinkResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetDiscordLinkResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGetDiscordLinkResponse,
  ): CMsgClientToGCGetDiscordLinkResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCGetDiscordLinkResponse.EResponse response */ 1:
          message.response = reader.int32();
          break;
        case /* optional string discord_link */ 2:
          message.discord_link = reader.string();
          break;
        case /* optional uint32 valid_hours */ 3:
          message.valid_hours = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCGetDiscordLinkResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCGetDiscordLinkResponse.EResponse response = 1; */
    if (message.response !== undefined) writer.tag(1, WireType.Varint).int32(message.response);
    /* optional string discord_link = 2; */
    if (message.discord_link !== undefined) writer.tag(2, WireType.LengthDelimited).string(message.discord_link);
    /* optional uint32 valid_hours = 3; */
    if (message.valid_hours !== undefined) writer.tag(3, WireType.Varint).uint32(message.valid_hours);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetDiscordLinkResponse
 */
export const CMsgClientToGCGetDiscordLinkResponse = new CMsgClientToGCGetDiscordLinkResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGrantForumAccess$Type extends MessageType<CMsgClientToGCGrantForumAccess> {
  constructor() {
    super("CMsgClientToGCGrantForumAccess", [
      {
        no: 1,
        name: "email",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCGrantForumAccess>): CMsgClientToGCGrantForumAccess {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCGrantForumAccess>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGrantForumAccess,
  ): CMsgClientToGCGrantForumAccess {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string email */ 1:
          message.email = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCGrantForumAccess,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional string email = 1; */
    if (message.email !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.email);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGrantForumAccess
 */
export const CMsgClientToGCGrantForumAccess = new CMsgClientToGCGrantForumAccess$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGrantForumAccessResponse$Type extends MessageType<CMsgClientToGCGrantForumAccessResponse> {
  constructor() {
    super("CMsgClientToGCGrantForumAccessResponse", [
      {
        no: 1,
        name: "response",
        kind: "enum",
        opt: true,
        T: () => ["CMsgClientToGCGrantForumAccessResponse.EResponse", CMsgClientToGCGrantForumAccessResponse_EResponse],
      },
      {
        no: 2,
        name: "email",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 3,
        name: "username",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 4,
        name: "forum_password",
        kind: "scalar",
        localName: "forum_password",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCGrantForumAccessResponse>): CMsgClientToGCGrantForumAccessResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCGrantForumAccessResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGrantForumAccessResponse,
  ): CMsgClientToGCGrantForumAccessResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCGrantForumAccessResponse.EResponse response */ 1:
          message.response = reader.int32();
          break;
        case /* optional string email */ 2:
          message.email = reader.string();
          break;
        case /* optional string username */ 3:
          message.username = reader.string();
          break;
        case /* optional string forum_password */ 4:
          message.forum_password = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCGrantForumAccessResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCGrantForumAccessResponse.EResponse response = 1; */
    if (message.response !== undefined) writer.tag(1, WireType.Varint).int32(message.response);
    /* optional string email = 2; */
    if (message.email !== undefined) writer.tag(2, WireType.LengthDelimited).string(message.email);
    /* optional string username = 3; */
    if (message.username !== undefined) writer.tag(3, WireType.LengthDelimited).string(message.username);
    /* optional string forum_password = 4; */
    if (message.forum_password !== undefined) writer.tag(4, WireType.LengthDelimited).string(message.forum_password);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGrantForumAccessResponse
 */
export const CMsgClientToGCGrantForumAccessResponse = new CMsgClientToGCGrantForumAccessResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCModeratorRequest$Type extends MessageType<CMsgClientToGCModeratorRequest> {
  constructor() {
    super("CMsgClientToGCModeratorRequest", [
      {
        no: 1,
        name: "account_id",
        kind: "scalar",
        localName: "account_id",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCModeratorRequest>): CMsgClientToGCModeratorRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCModeratorRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCModeratorRequest,
  ): CMsgClientToGCModeratorRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 account_id */ 1:
          message.account_id = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCModeratorRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 account_id = 1; */
    if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCModeratorRequest
 */
export const CMsgClientToGCModeratorRequest = new CMsgClientToGCModeratorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCModeratorRequestResponse$Type extends MessageType<CMsgClientToGCModeratorRequestResponse> {
  constructor() {
    super("CMsgClientToGCModeratorRequestResponse", [
      {
        no: 1,
        name: "success",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 2,
        name: "response_text",
        kind: "scalar",
        localName: "response_text",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCModeratorRequestResponse>): CMsgClientToGCModeratorRequestResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.response_text = [];
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCModeratorRequestResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCModeratorRequestResponse,
  ): CMsgClientToGCModeratorRequestResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional bool success */ 1:
          message.success = reader.bool();
          break;
        case /* repeated string response_text */ 2:
          message.response_text.push(reader.string());
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCModeratorRequestResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional bool success = 1; */
    if (message.success !== undefined) writer.tag(1, WireType.Varint).bool(message.success);
    /* repeated string response_text = 2; */
    for (let i = 0; i < message.response_text.length; i++)
      writer.tag(2, WireType.LengthDelimited).string(message.response_text[i]);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCModeratorRequestResponse
 */
export const CMsgClientToGCModeratorRequestResponse = new CMsgClientToGCModeratorRequestResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetFriendGameStatus$Type extends MessageType<CMsgClientToGCGetFriendGameStatus> {
  constructor() {
    super("CMsgClientToGCGetFriendGameStatus", [
      {
        no: 1,
        name: "include_invited",
        kind: "scalar",
        localName: "include_invited",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCGetFriendGameStatus>): CMsgClientToGCGetFriendGameStatus {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetFriendGameStatus>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGetFriendGameStatus,
  ): CMsgClientToGCGetFriendGameStatus {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional bool include_invited */ 1:
          message.include_invited = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCGetFriendGameStatus,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional bool include_invited = 1; */
    if (message.include_invited !== undefined) writer.tag(1, WireType.Varint).bool(message.include_invited);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetFriendGameStatus
 */
export const CMsgClientToGCGetFriendGameStatus = new CMsgClientToGCGetFriendGameStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetFriendGameStatusResponse$Type extends MessageType<CMsgClientToGCGetFriendGameStatusResponse> {
  constructor() {
    super("CMsgClientToGCGetFriendGameStatusResponse", [
      {
        no: 1,
        name: "response",
        kind: "enum",
        opt: true,
        T: () => [
          "CMsgClientToGCGetFriendGameStatusResponse.EResponse",
          CMsgClientToGCGetFriendGameStatusResponse_EResponse,
        ],
      },
      {
        no: 2,
        name: "friends_played_game",
        kind: "scalar",
        localName: "friends_played_game",
        repeat: 1 /*RepeatType.PACKED*/,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "friends_invited",
        kind: "scalar",
        localName: "friends_invited",
        repeat: 1 /*RepeatType.PACKED*/,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "friends_invites_sent",
        kind: "scalar",
        localName: "friends_invites_sent",
        repeat: 1 /*RepeatType.PACKED*/,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCGetFriendGameStatusResponse>): CMsgClientToGCGetFriendGameStatusResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.friends_played_game = [];
    message.friends_invited = [];
    message.friends_invites_sent = [];
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetFriendGameStatusResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCGetFriendGameStatusResponse,
  ): CMsgClientToGCGetFriendGameStatusResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCGetFriendGameStatusResponse.EResponse response */ 1:
          message.response = reader.int32();
          break;
        case /* repeated uint32 friends_played_game = 2 [packed = true];*/ 2:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.friends_played_game.push(reader.uint32());
          else message.friends_played_game.push(reader.uint32());
          break;
        case /* repeated uint32 friends_invited = 3 [packed = true];*/ 3:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.friends_invited.push(reader.uint32());
          else message.friends_invited.push(reader.uint32());
          break;
        case /* repeated uint32 friends_invites_sent = 4 [packed = true];*/ 4:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.friends_invites_sent.push(reader.uint32());
          else message.friends_invites_sent.push(reader.uint32());
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCGetFriendGameStatusResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCGetFriendGameStatusResponse.EResponse response = 1; */
    if (message.response !== undefined) writer.tag(1, WireType.Varint).int32(message.response);
    /* repeated uint32 friends_played_game = 2 [packed = true]; */
    if (message.friends_played_game.length) {
      writer.tag(2, WireType.LengthDelimited).fork();
      for (let i = 0; i < message.friends_played_game.length; i++) writer.uint32(message.friends_played_game[i]);
      writer.join();
    }
    /* repeated uint32 friends_invited = 3 [packed = true]; */
    if (message.friends_invited.length) {
      writer.tag(3, WireType.LengthDelimited).fork();
      for (let i = 0; i < message.friends_invited.length; i++) writer.uint32(message.friends_invited[i]);
      writer.join();
    }
    /* repeated uint32 friends_invites_sent = 4 [packed = true]; */
    if (message.friends_invites_sent.length) {
      writer.tag(4, WireType.LengthDelimited).fork();
      for (let i = 0; i < message.friends_invites_sent.length; i++) writer.uint32(message.friends_invites_sent[i]);
      writer.join();
    }
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetFriendGameStatusResponse
 */
export const CMsgClientToGCGetFriendGameStatusResponse = new CMsgClientToGCGetFriendGameStatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCUpdateSpectatorStatus$Type extends MessageType<CMsgClientToGCUpdateSpectatorStatus> {
  constructor() {
    super("CMsgClientToGCUpdateSpectatorStatus", [
      {
        no: 1,
        name: "spectating_lobby_id",
        kind: "scalar",
        localName: "spectating_lobby_id",
        opt: true,
        T: 6 /*ScalarType.FIXED64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 2,
        name: "stopped_spectating",
        kind: "scalar",
        localName: "stopped_spectating",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCUpdateSpectatorStatus>): CMsgClientToGCUpdateSpectatorStatus {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCUpdateSpectatorStatus>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCUpdateSpectatorStatus,
  ): CMsgClientToGCUpdateSpectatorStatus {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional fixed64 spectating_lobby_id */ 1:
          message.spectating_lobby_id = reader.fixed64().toBigInt();
          break;
        case /* optional bool stopped_spectating */ 2:
          message.stopped_spectating = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCUpdateSpectatorStatus,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional fixed64 spectating_lobby_id = 1; */
    if (message.spectating_lobby_id !== undefined) writer.tag(1, WireType.Bit64).fixed64(message.spectating_lobby_id);
    /* optional bool stopped_spectating = 2; */
    if (message.stopped_spectating !== undefined) writer.tag(2, WireType.Varint).bool(message.stopped_spectating);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCUpdateSpectatorStatus
 */
export const CMsgClientToGCUpdateSpectatorStatus = new CMsgClientToGCUpdateSpectatorStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCSetRankedSchedule$Type extends MessageType<CMsgClientToGCSetRankedSchedule> {
  constructor() {
    super("CMsgClientToGCSetRankedSchedule", [
      {
        no: 1,
        name: "region_mode",
        kind: "enum",
        localName: "region_mode",
        opt: true,
        T: () => ["ECitadelRegionMode", ECitadelRegionMode],
      },
      {
        no: 2,
        name: "schedule",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCSetRankedSchedule>): CMsgClientToGCSetRankedSchedule {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCSetRankedSchedule>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCSetRankedSchedule,
  ): CMsgClientToGCSetRankedSchedule {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional ECitadelRegionMode region_mode */ 1:
          message.region_mode = reader.int32();
          break;
        case /* optional uint32 schedule */ 2:
          message.schedule = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCSetRankedSchedule,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional ECitadelRegionMode region_mode = 1; */
    if (message.region_mode !== undefined) writer.tag(1, WireType.Varint).int32(message.region_mode);
    /* optional uint32 schedule = 2; */
    if (message.schedule !== undefined) writer.tag(2, WireType.Varint).uint32(message.schedule);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCSetRankedSchedule
 */
export const CMsgClientToGCSetRankedSchedule = new CMsgClientToGCSetRankedSchedule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCSetRankedScheduleResponse$Type extends MessageType<CMsgClientToGCSetRankedScheduleResponse> {
  constructor() {
    super("CMsgClientToGCSetRankedScheduleResponse", [
      {
        no: 1,
        name: "result",
        kind: "enum",
        opt: true,
        T: () => ["CMsgClientToGCSetRankedScheduleResponse.EResult", CMsgClientToGCSetRankedScheduleResponse_EResult],
      },
    ]);
  }
  create(value?: PartialMessage<CMsgClientToGCSetRankedScheduleResponse>): CMsgClientToGCSetRankedScheduleResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined) reflectionMergePartial<CMsgClientToGCSetRankedScheduleResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CMsgClientToGCSetRankedScheduleResponse,
  ): CMsgClientToGCSetRankedScheduleResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional CMsgClientToGCSetRankedScheduleResponse.EResult result */ 1:
          message.result = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CMsgClientToGCSetRankedScheduleResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional CMsgClientToGCSetRankedScheduleResponse.EResult result = 1; */
    if (message.result !== undefined) writer.tag(1, WireType.Varint).int32(message.result);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCSetRankedScheduleResponse
 */
export const CMsgClientToGCSetRankedScheduleResponse = new CMsgClientToGCSetRankedScheduleResponse$Type();

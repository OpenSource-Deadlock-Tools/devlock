// @generated by protobuf-ts 2.9.4 with parameter use_proto_field_name
// @generated from protobuf file "steammessages_gamenetworkingui.proto" (syntax proto2)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CMsgSteamDatagramConnectionQuality } from "./steamnetworkingsockets_messages.js";
import { CMsgSteamDatagramP2PRoutingSummary } from "./steamdatagram_messages_sdr.js";
/**
 * @generated from protobuf message CGameNetworkingUI_GlobalState
 */
export interface CGameNetworkingUI_GlobalState {}
/**
 * @generated from protobuf message CGameNetworkingUI_ConnectionState
 */
export interface CGameNetworkingUI_ConnectionState {
	/**
	 * @generated from protobuf field: optional string connection_key = 1;
	 */
	connection_key?: string;
	/**
	 * @generated from protobuf field: optional uint32 appid = 2;
	 */
	appid?: number;
	/**
	 * @generated from protobuf field: optional fixed32 connection_id_local = 3;
	 */
	connection_id_local?: number;
	/**
	 * @generated from protobuf field: optional string identity_local = 4;
	 */
	identity_local?: string;
	/**
	 * @generated from protobuf field: optional string identity_remote = 5;
	 */
	identity_remote?: string;
	/**
	 * @generated from protobuf field: optional uint32 connection_state = 10;
	 */
	connection_state?: number;
	/**
	 * @generated from protobuf field: optional uint32 start_time = 12;
	 */
	start_time?: number;
	/**
	 * @generated from protobuf field: optional uint32 close_time = 13;
	 */
	close_time?: number;
	/**
	 * @generated from protobuf field: optional uint32 close_reason = 14;
	 */
	close_reason?: number;
	/**
	 * @generated from protobuf field: optional string close_message = 15;
	 */
	close_message?: string;
	/**
	 * @generated from protobuf field: optional string status_loc_token = 16;
	 */
	status_loc_token?: string;
	/**
	 * @generated from protobuf field: optional uint32 transport_kind = 20;
	 */
	transport_kind?: number;
	/**
	 * @generated from protobuf field: optional string sdrpopid_local = 21;
	 */
	sdrpopid_local?: string;
	/**
	 * @generated from protobuf field: optional string sdrpopid_remote = 22;
	 */
	sdrpopid_remote?: string;
	/**
	 * @generated from protobuf field: optional string address_remote = 23;
	 */
	address_remote?: string;
	/**
	 * @generated from protobuf field: optional CMsgSteamDatagramP2PRoutingSummary p2p_routing = 24 [json_name = "p2pRouting"];
	 */
	p2p_routing?: CMsgSteamDatagramP2PRoutingSummary;
	/**
	 * @generated from protobuf field: optional uint32 ping_interior = 25;
	 */
	ping_interior?: number;
	/**
	 * @generated from protobuf field: optional uint32 ping_remote_front = 26;
	 */
	ping_remote_front?: number;
	/**
	 * @generated from protobuf field: optional uint32 ping_default_internet_route = 27;
	 */
	ping_default_internet_route?: number;
	/**
	 * @generated from protobuf field: optional CMsgSteamDatagramConnectionQuality e2e_quality_local = 30 [json_name = "e2eQualityLocal"];
	 */
	e2e_quality_local?: CMsgSteamDatagramConnectionQuality;
	/**
	 * @generated from protobuf field: optional CMsgSteamDatagramConnectionQuality e2e_quality_remote = 31 [json_name = "e2eQualityRemote"];
	 */
	e2e_quality_remote?: CMsgSteamDatagramConnectionQuality;
	/**
	 * @generated from protobuf field: optional uint64 e2e_quality_remote_instantaneous_time = 32 [json_name = "e2eQualityRemoteInstantaneousTime"];
	 */
	e2e_quality_remote_instantaneous_time?: bigint;
	/**
	 * @generated from protobuf field: optional uint64 e2e_quality_remote_lifetime_time = 33 [json_name = "e2eQualityRemoteLifetimeTime"];
	 */
	e2e_quality_remote_lifetime_time?: bigint;
	/**
	 * @generated from protobuf field: optional CMsgSteamDatagramConnectionQuality front_quality_local = 40;
	 */
	front_quality_local?: CMsgSteamDatagramConnectionQuality;
	/**
	 * @generated from protobuf field: optional CMsgSteamDatagramConnectionQuality front_quality_remote = 41;
	 */
	front_quality_remote?: CMsgSteamDatagramConnectionQuality;
	/**
	 * @generated from protobuf field: optional uint64 front_quality_remote_instantaneous_time = 42;
	 */
	front_quality_remote_instantaneous_time?: bigint;
	/**
	 * @generated from protobuf field: optional uint64 front_quality_remote_lifetime_time = 43;
	 */
	front_quality_remote_lifetime_time?: bigint;
}
/**
 * @generated from protobuf message CGameNetworkingUI_Message
 */
export interface CGameNetworkingUI_Message {
	/**
	 * @generated from protobuf field: repeated CGameNetworkingUI_ConnectionState connection_state = 1;
	 */
	connection_state: CGameNetworkingUI_ConnectionState[];
}
/**
 * @generated from protobuf message CGameNetworkingUI_ConnectionSummary
 */
export interface CGameNetworkingUI_ConnectionSummary {
	/**
	 * @generated from protobuf field: optional uint32 transport_kind = 1;
	 */
	transport_kind?: number;
	/**
	 * @generated from protobuf field: optional uint32 connection_state = 8;
	 */
	connection_state?: number;
	/**
	 * @generated from protobuf field: optional string sdrpop_local = 2;
	 */
	sdrpop_local?: string;
	/**
	 * @generated from protobuf field: optional string sdrpop_remote = 3;
	 */
	sdrpop_remote?: string;
	/**
	 * @generated from protobuf field: optional uint32 ping_ms = 4;
	 */
	ping_ms?: number;
	/**
	 * @generated from protobuf field: optional float packet_loss = 5;
	 */
	packet_loss?: number;
	/**
	 * @generated from protobuf field: optional uint32 ping_default_internet_route = 6;
	 */
	ping_default_internet_route?: number;
	/**
	 * @generated from protobuf field: optional bool ip_was_shared = 7;
	 */
	ip_was_shared?: boolean;
}
/**
 * @generated from protobuf message CGameNetworkingUI_AppSummary
 */
export interface CGameNetworkingUI_AppSummary {
	/**
	 * @generated from protobuf field: optional uint32 appid = 1;
	 */
	appid?: number;
	/**
	 * @generated from protobuf field: optional bool ip_was_shared_with_friend = 10;
	 */
	ip_was_shared_with_friend?: boolean;
	/**
	 * @generated from protobuf field: optional bool ip_was_shared_with_nonfriend = 11;
	 */
	ip_was_shared_with_nonfriend?: boolean;
	/**
	 * @generated from protobuf field: optional uint32 active_connections = 20;
	 */
	active_connections?: number;
	/**
	 * @generated from protobuf field: optional CGameNetworkingUI_ConnectionSummary main_cxn = 30;
	 */
	main_cxn?: CGameNetworkingUI_ConnectionSummary;
}
// @generated message type with reflection information, may provide speed optimized methods
class CGameNetworkingUI_GlobalState$Type extends MessageType<CGameNetworkingUI_GlobalState> {
	constructor() {
		super("CGameNetworkingUI_GlobalState", []);
	}
	create(value?: PartialMessage<CGameNetworkingUI_GlobalState>): CGameNetworkingUI_GlobalState {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CGameNetworkingUI_GlobalState>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CGameNetworkingUI_GlobalState,
	): CGameNetworkingUI_GlobalState {
		return target ?? this.create();
	}
	internalBinaryWrite(
		message: CGameNetworkingUI_GlobalState,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CGameNetworkingUI_GlobalState
 */
export const CGameNetworkingUI_GlobalState = new CGameNetworkingUI_GlobalState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CGameNetworkingUI_ConnectionState$Type extends MessageType<CGameNetworkingUI_ConnectionState> {
	constructor() {
		super("CGameNetworkingUI_ConnectionState", [
			{
				no: 1,
				name: "connection_key",
				kind: "scalar",
				localName: "connection_key",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 2,
				name: "appid",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "connection_id_local",
				kind: "scalar",
				localName: "connection_id_local",
				opt: true,
				T: 7 /*ScalarType.FIXED32*/,
			},
			{
				no: 4,
				name: "identity_local",
				kind: "scalar",
				localName: "identity_local",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 5,
				name: "identity_remote",
				kind: "scalar",
				localName: "identity_remote",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 10,
				name: "connection_state",
				kind: "scalar",
				localName: "connection_state",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 12,
				name: "start_time",
				kind: "scalar",
				localName: "start_time",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 13,
				name: "close_time",
				kind: "scalar",
				localName: "close_time",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 14,
				name: "close_reason",
				kind: "scalar",
				localName: "close_reason",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 15,
				name: "close_message",
				kind: "scalar",
				localName: "close_message",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 16,
				name: "status_loc_token",
				kind: "scalar",
				localName: "status_loc_token",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 20,
				name: "transport_kind",
				kind: "scalar",
				localName: "transport_kind",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 21,
				name: "sdrpopid_local",
				kind: "scalar",
				localName: "sdrpopid_local",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 22,
				name: "sdrpopid_remote",
				kind: "scalar",
				localName: "sdrpopid_remote",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 23,
				name: "address_remote",
				kind: "scalar",
				localName: "address_remote",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 24,
				name: "p2p_routing",
				kind: "message",
				localName: "p2p_routing",
				jsonName: "p2pRouting",
				T: () => CMsgSteamDatagramP2PRoutingSummary,
			},
			{
				no: 25,
				name: "ping_interior",
				kind: "scalar",
				localName: "ping_interior",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 26,
				name: "ping_remote_front",
				kind: "scalar",
				localName: "ping_remote_front",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 27,
				name: "ping_default_internet_route",
				kind: "scalar",
				localName: "ping_default_internet_route",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 30,
				name: "e2e_quality_local",
				kind: "message",
				localName: "e2e_quality_local",
				jsonName: "e2eQualityLocal",
				T: () => CMsgSteamDatagramConnectionQuality,
			},
			{
				no: 31,
				name: "e2e_quality_remote",
				kind: "message",
				localName: "e2e_quality_remote",
				jsonName: "e2eQualityRemote",
				T: () => CMsgSteamDatagramConnectionQuality,
			},
			{
				no: 32,
				name: "e2e_quality_remote_instantaneous_time",
				kind: "scalar",
				localName: "e2e_quality_remote_instantaneous_time",
				jsonName: "e2eQualityRemoteInstantaneousTime",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 33,
				name: "e2e_quality_remote_lifetime_time",
				kind: "scalar",
				localName: "e2e_quality_remote_lifetime_time",
				jsonName: "e2eQualityRemoteLifetimeTime",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 40,
				name: "front_quality_local",
				kind: "message",
				localName: "front_quality_local",
				T: () => CMsgSteamDatagramConnectionQuality,
			},
			{
				no: 41,
				name: "front_quality_remote",
				kind: "message",
				localName: "front_quality_remote",
				T: () => CMsgSteamDatagramConnectionQuality,
			},
			{
				no: 42,
				name: "front_quality_remote_instantaneous_time",
				kind: "scalar",
				localName: "front_quality_remote_instantaneous_time",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 43,
				name: "front_quality_remote_lifetime_time",
				kind: "scalar",
				localName: "front_quality_remote_lifetime_time",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
		]);
	}
	create(value?: PartialMessage<CGameNetworkingUI_ConnectionState>): CGameNetworkingUI_ConnectionState {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CGameNetworkingUI_ConnectionState>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CGameNetworkingUI_ConnectionState,
	): CGameNetworkingUI_ConnectionState {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional string connection_key */ 1:
					message.connection_key = reader.string();
					break;
				case /* optional uint32 appid */ 2:
					message.appid = reader.uint32();
					break;
				case /* optional fixed32 connection_id_local */ 3:
					message.connection_id_local = reader.fixed32();
					break;
				case /* optional string identity_local */ 4:
					message.identity_local = reader.string();
					break;
				case /* optional string identity_remote */ 5:
					message.identity_remote = reader.string();
					break;
				case /* optional uint32 connection_state */ 10:
					message.connection_state = reader.uint32();
					break;
				case /* optional uint32 start_time */ 12:
					message.start_time = reader.uint32();
					break;
				case /* optional uint32 close_time */ 13:
					message.close_time = reader.uint32();
					break;
				case /* optional uint32 close_reason */ 14:
					message.close_reason = reader.uint32();
					break;
				case /* optional string close_message */ 15:
					message.close_message = reader.string();
					break;
				case /* optional string status_loc_token */ 16:
					message.status_loc_token = reader.string();
					break;
				case /* optional uint32 transport_kind */ 20:
					message.transport_kind = reader.uint32();
					break;
				case /* optional string sdrpopid_local */ 21:
					message.sdrpopid_local = reader.string();
					break;
				case /* optional string sdrpopid_remote */ 22:
					message.sdrpopid_remote = reader.string();
					break;
				case /* optional string address_remote */ 23:
					message.address_remote = reader.string();
					break;
				case /* optional CMsgSteamDatagramP2PRoutingSummary p2p_routing = 24 [json_name = "p2pRouting"];*/ 24:
					message.p2p_routing = CMsgSteamDatagramP2PRoutingSummary.internalBinaryRead(
						reader,
						reader.uint32(),
						options,
						message.p2p_routing,
					);
					break;
				case /* optional uint32 ping_interior */ 25:
					message.ping_interior = reader.uint32();
					break;
				case /* optional uint32 ping_remote_front */ 26:
					message.ping_remote_front = reader.uint32();
					break;
				case /* optional uint32 ping_default_internet_route */ 27:
					message.ping_default_internet_route = reader.uint32();
					break;
				case /* optional CMsgSteamDatagramConnectionQuality e2e_quality_local = 30 [json_name = "e2eQualityLocal"];*/ 30:
					message.e2e_quality_local = CMsgSteamDatagramConnectionQuality.internalBinaryRead(
						reader,
						reader.uint32(),
						options,
						message.e2e_quality_local,
					);
					break;
				case /* optional CMsgSteamDatagramConnectionQuality e2e_quality_remote = 31 [json_name = "e2eQualityRemote"];*/ 31:
					message.e2e_quality_remote = CMsgSteamDatagramConnectionQuality.internalBinaryRead(
						reader,
						reader.uint32(),
						options,
						message.e2e_quality_remote,
					);
					break;
				case /* optional uint64 e2e_quality_remote_instantaneous_time = 32 [json_name = "e2eQualityRemoteInstantaneousTime"];*/ 32:
					message.e2e_quality_remote_instantaneous_time = reader.uint64().toBigInt();
					break;
				case /* optional uint64 e2e_quality_remote_lifetime_time = 33 [json_name = "e2eQualityRemoteLifetimeTime"];*/ 33:
					message.e2e_quality_remote_lifetime_time = reader.uint64().toBigInt();
					break;
				case /* optional CMsgSteamDatagramConnectionQuality front_quality_local */ 40:
					message.front_quality_local = CMsgSteamDatagramConnectionQuality.internalBinaryRead(
						reader,
						reader.uint32(),
						options,
						message.front_quality_local,
					);
					break;
				case /* optional CMsgSteamDatagramConnectionQuality front_quality_remote */ 41:
					message.front_quality_remote = CMsgSteamDatagramConnectionQuality.internalBinaryRead(
						reader,
						reader.uint32(),
						options,
						message.front_quality_remote,
					);
					break;
				case /* optional uint64 front_quality_remote_instantaneous_time */ 42:
					message.front_quality_remote_instantaneous_time = reader.uint64().toBigInt();
					break;
				case /* optional uint64 front_quality_remote_lifetime_time */ 43:
					message.front_quality_remote_lifetime_time = reader.uint64().toBigInt();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CGameNetworkingUI_ConnectionState,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional string connection_key = 1; */
		if (message.connection_key !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.connection_key);
		/* optional uint32 appid = 2; */
		if (message.appid !== undefined) writer.tag(2, WireType.Varint).uint32(message.appid);
		/* optional fixed32 connection_id_local = 3; */
		if (message.connection_id_local !== undefined) writer.tag(3, WireType.Bit32).fixed32(message.connection_id_local);
		/* optional string identity_local = 4; */
		if (message.identity_local !== undefined) writer.tag(4, WireType.LengthDelimited).string(message.identity_local);
		/* optional string identity_remote = 5; */
		if (message.identity_remote !== undefined) writer.tag(5, WireType.LengthDelimited).string(message.identity_remote);
		/* optional uint32 connection_state = 10; */
		if (message.connection_state !== undefined) writer.tag(10, WireType.Varint).uint32(message.connection_state);
		/* optional uint32 start_time = 12; */
		if (message.start_time !== undefined) writer.tag(12, WireType.Varint).uint32(message.start_time);
		/* optional uint32 close_time = 13; */
		if (message.close_time !== undefined) writer.tag(13, WireType.Varint).uint32(message.close_time);
		/* optional uint32 close_reason = 14; */
		if (message.close_reason !== undefined) writer.tag(14, WireType.Varint).uint32(message.close_reason);
		/* optional string close_message = 15; */
		if (message.close_message !== undefined) writer.tag(15, WireType.LengthDelimited).string(message.close_message);
		/* optional string status_loc_token = 16; */
		if (message.status_loc_token !== undefined)
			writer.tag(16, WireType.LengthDelimited).string(message.status_loc_token);
		/* optional uint32 transport_kind = 20; */
		if (message.transport_kind !== undefined) writer.tag(20, WireType.Varint).uint32(message.transport_kind);
		/* optional string sdrpopid_local = 21; */
		if (message.sdrpopid_local !== undefined) writer.tag(21, WireType.LengthDelimited).string(message.sdrpopid_local);
		/* optional string sdrpopid_remote = 22; */
		if (message.sdrpopid_remote !== undefined) writer.tag(22, WireType.LengthDelimited).string(message.sdrpopid_remote);
		/* optional string address_remote = 23; */
		if (message.address_remote !== undefined) writer.tag(23, WireType.LengthDelimited).string(message.address_remote);
		/* optional CMsgSteamDatagramP2PRoutingSummary p2p_routing = 24 [json_name = "p2pRouting"]; */
		if (message.p2p_routing)
			CMsgSteamDatagramP2PRoutingSummary.internalBinaryWrite(
				message.p2p_routing,
				writer.tag(24, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* optional uint32 ping_interior = 25; */
		if (message.ping_interior !== undefined) writer.tag(25, WireType.Varint).uint32(message.ping_interior);
		/* optional uint32 ping_remote_front = 26; */
		if (message.ping_remote_front !== undefined) writer.tag(26, WireType.Varint).uint32(message.ping_remote_front);
		/* optional uint32 ping_default_internet_route = 27; */
		if (message.ping_default_internet_route !== undefined)
			writer.tag(27, WireType.Varint).uint32(message.ping_default_internet_route);
		/* optional CMsgSteamDatagramConnectionQuality e2e_quality_local = 30 [json_name = "e2eQualityLocal"]; */
		if (message.e2e_quality_local)
			CMsgSteamDatagramConnectionQuality.internalBinaryWrite(
				message.e2e_quality_local,
				writer.tag(30, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* optional CMsgSteamDatagramConnectionQuality e2e_quality_remote = 31 [json_name = "e2eQualityRemote"]; */
		if (message.e2e_quality_remote)
			CMsgSteamDatagramConnectionQuality.internalBinaryWrite(
				message.e2e_quality_remote,
				writer.tag(31, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* optional uint64 e2e_quality_remote_instantaneous_time = 32 [json_name = "e2eQualityRemoteInstantaneousTime"]; */
		if (message.e2e_quality_remote_instantaneous_time !== undefined)
			writer.tag(32, WireType.Varint).uint64(message.e2e_quality_remote_instantaneous_time);
		/* optional uint64 e2e_quality_remote_lifetime_time = 33 [json_name = "e2eQualityRemoteLifetimeTime"]; */
		if (message.e2e_quality_remote_lifetime_time !== undefined)
			writer.tag(33, WireType.Varint).uint64(message.e2e_quality_remote_lifetime_time);
		/* optional CMsgSteamDatagramConnectionQuality front_quality_local = 40; */
		if (message.front_quality_local)
			CMsgSteamDatagramConnectionQuality.internalBinaryWrite(
				message.front_quality_local,
				writer.tag(40, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* optional CMsgSteamDatagramConnectionQuality front_quality_remote = 41; */
		if (message.front_quality_remote)
			CMsgSteamDatagramConnectionQuality.internalBinaryWrite(
				message.front_quality_remote,
				writer.tag(41, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* optional uint64 front_quality_remote_instantaneous_time = 42; */
		if (message.front_quality_remote_instantaneous_time !== undefined)
			writer.tag(42, WireType.Varint).uint64(message.front_quality_remote_instantaneous_time);
		/* optional uint64 front_quality_remote_lifetime_time = 43; */
		if (message.front_quality_remote_lifetime_time !== undefined)
			writer.tag(43, WireType.Varint).uint64(message.front_quality_remote_lifetime_time);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CGameNetworkingUI_ConnectionState
 */
export const CGameNetworkingUI_ConnectionState = new CGameNetworkingUI_ConnectionState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CGameNetworkingUI_Message$Type extends MessageType<CGameNetworkingUI_Message> {
	constructor() {
		super("CGameNetworkingUI_Message", [
			{
				no: 1,
				name: "connection_state",
				kind: "message",
				localName: "connection_state",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: () => CGameNetworkingUI_ConnectionState,
			},
		]);
	}
	create(value?: PartialMessage<CGameNetworkingUI_Message>): CGameNetworkingUI_Message {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.connection_state = [];
		if (value !== undefined) reflectionMergePartial<CGameNetworkingUI_Message>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CGameNetworkingUI_Message,
	): CGameNetworkingUI_Message {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* repeated CGameNetworkingUI_ConnectionState connection_state */ 1:
					message.connection_state.push(
						CGameNetworkingUI_ConnectionState.internalBinaryRead(reader, reader.uint32(), options),
					);
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CGameNetworkingUI_Message,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* repeated CGameNetworkingUI_ConnectionState connection_state = 1; */
		for (let i = 0; i < message.connection_state.length; i++)
			CGameNetworkingUI_ConnectionState.internalBinaryWrite(
				message.connection_state[i],
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join();
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CGameNetworkingUI_Message
 */
export const CGameNetworkingUI_Message = new CGameNetworkingUI_Message$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CGameNetworkingUI_ConnectionSummary$Type extends MessageType<CGameNetworkingUI_ConnectionSummary> {
	constructor() {
		super("CGameNetworkingUI_ConnectionSummary", [
			{
				no: 1,
				name: "transport_kind",
				kind: "scalar",
				localName: "transport_kind",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 8,
				name: "connection_state",
				kind: "scalar",
				localName: "connection_state",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "sdrpop_local",
				kind: "scalar",
				localName: "sdrpop_local",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 3,
				name: "sdrpop_remote",
				kind: "scalar",
				localName: "sdrpop_remote",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 4,
				name: "ping_ms",
				kind: "scalar",
				localName: "ping_ms",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 5,
				name: "packet_loss",
				kind: "scalar",
				localName: "packet_loss",
				opt: true,
				T: 2 /*ScalarType.FLOAT*/,
			},
			{
				no: 6,
				name: "ping_default_internet_route",
				kind: "scalar",
				localName: "ping_default_internet_route",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 7,
				name: "ip_was_shared",
				kind: "scalar",
				localName: "ip_was_shared",
				opt: true,
				T: 8 /*ScalarType.BOOL*/,
			},
		]);
	}
	create(value?: PartialMessage<CGameNetworkingUI_ConnectionSummary>): CGameNetworkingUI_ConnectionSummary {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CGameNetworkingUI_ConnectionSummary>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CGameNetworkingUI_ConnectionSummary,
	): CGameNetworkingUI_ConnectionSummary {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 transport_kind */ 1:
					message.transport_kind = reader.uint32();
					break;
				case /* optional uint32 connection_state */ 8:
					message.connection_state = reader.uint32();
					break;
				case /* optional string sdrpop_local */ 2:
					message.sdrpop_local = reader.string();
					break;
				case /* optional string sdrpop_remote */ 3:
					message.sdrpop_remote = reader.string();
					break;
				case /* optional uint32 ping_ms */ 4:
					message.ping_ms = reader.uint32();
					break;
				case /* optional float packet_loss */ 5:
					message.packet_loss = reader.float();
					break;
				case /* optional uint32 ping_default_internet_route */ 6:
					message.ping_default_internet_route = reader.uint32();
					break;
				case /* optional bool ip_was_shared */ 7:
					message.ip_was_shared = reader.bool();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CGameNetworkingUI_ConnectionSummary,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 transport_kind = 1; */
		if (message.transport_kind !== undefined) writer.tag(1, WireType.Varint).uint32(message.transport_kind);
		/* optional uint32 connection_state = 8; */
		if (message.connection_state !== undefined) writer.tag(8, WireType.Varint).uint32(message.connection_state);
		/* optional string sdrpop_local = 2; */
		if (message.sdrpop_local !== undefined) writer.tag(2, WireType.LengthDelimited).string(message.sdrpop_local);
		/* optional string sdrpop_remote = 3; */
		if (message.sdrpop_remote !== undefined) writer.tag(3, WireType.LengthDelimited).string(message.sdrpop_remote);
		/* optional uint32 ping_ms = 4; */
		if (message.ping_ms !== undefined) writer.tag(4, WireType.Varint).uint32(message.ping_ms);
		/* optional float packet_loss = 5; */
		if (message.packet_loss !== undefined) writer.tag(5, WireType.Bit32).float(message.packet_loss);
		/* optional uint32 ping_default_internet_route = 6; */
		if (message.ping_default_internet_route !== undefined)
			writer.tag(6, WireType.Varint).uint32(message.ping_default_internet_route);
		/* optional bool ip_was_shared = 7; */
		if (message.ip_was_shared !== undefined) writer.tag(7, WireType.Varint).bool(message.ip_was_shared);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CGameNetworkingUI_ConnectionSummary
 */
export const CGameNetworkingUI_ConnectionSummary = new CGameNetworkingUI_ConnectionSummary$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CGameNetworkingUI_AppSummary$Type extends MessageType<CGameNetworkingUI_AppSummary> {
	constructor() {
		super("CGameNetworkingUI_AppSummary", [
			{
				no: 1,
				name: "appid",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 10,
				name: "ip_was_shared_with_friend",
				kind: "scalar",
				localName: "ip_was_shared_with_friend",
				opt: true,
				T: 8 /*ScalarType.BOOL*/,
			},
			{
				no: 11,
				name: "ip_was_shared_with_nonfriend",
				kind: "scalar",
				localName: "ip_was_shared_with_nonfriend",
				opt: true,
				T: 8 /*ScalarType.BOOL*/,
			},
			{
				no: 20,
				name: "active_connections",
				kind: "scalar",
				localName: "active_connections",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 30,
				name: "main_cxn",
				kind: "message",
				localName: "main_cxn",
				T: () => CGameNetworkingUI_ConnectionSummary,
			},
		]);
	}
	create(value?: PartialMessage<CGameNetworkingUI_AppSummary>): CGameNetworkingUI_AppSummary {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CGameNetworkingUI_AppSummary>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CGameNetworkingUI_AppSummary,
	): CGameNetworkingUI_AppSummary {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 appid */ 1:
					message.appid = reader.uint32();
					break;
				case /* optional bool ip_was_shared_with_friend */ 10:
					message.ip_was_shared_with_friend = reader.bool();
					break;
				case /* optional bool ip_was_shared_with_nonfriend */ 11:
					message.ip_was_shared_with_nonfriend = reader.bool();
					break;
				case /* optional uint32 active_connections */ 20:
					message.active_connections = reader.uint32();
					break;
				case /* optional CGameNetworkingUI_ConnectionSummary main_cxn */ 30:
					message.main_cxn = CGameNetworkingUI_ConnectionSummary.internalBinaryRead(
						reader,
						reader.uint32(),
						options,
						message.main_cxn,
					);
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CGameNetworkingUI_AppSummary,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 appid = 1; */
		if (message.appid !== undefined) writer.tag(1, WireType.Varint).uint32(message.appid);
		/* optional bool ip_was_shared_with_friend = 10; */
		if (message.ip_was_shared_with_friend !== undefined)
			writer.tag(10, WireType.Varint).bool(message.ip_was_shared_with_friend);
		/* optional bool ip_was_shared_with_nonfriend = 11; */
		if (message.ip_was_shared_with_nonfriend !== undefined)
			writer.tag(11, WireType.Varint).bool(message.ip_was_shared_with_nonfriend);
		/* optional uint32 active_connections = 20; */
		if (message.active_connections !== undefined) writer.tag(20, WireType.Varint).uint32(message.active_connections);
		/* optional CGameNetworkingUI_ConnectionSummary main_cxn = 30; */
		if (message.main_cxn)
			CGameNetworkingUI_ConnectionSummary.internalBinaryWrite(
				message.main_cxn,
				writer.tag(30, WireType.LengthDelimited).fork(),
				options,
			).join();
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CGameNetworkingUI_AppSummary
 */
export const CGameNetworkingUI_AppSummary = new CGameNetworkingUI_AppSummary$Type();

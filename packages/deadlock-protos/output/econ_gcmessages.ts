// @generated by protobuf-ts 2.9.4 with parameter use_proto_field_name
// @generated from protobuf file "econ_gcmessages.proto" (syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CExtraMsgBlock } from "./gcsdk_gcmessages.js";
import { EGCMsgResponse } from "./econ_shared_enums.js";
import { CSOEconItem } from "./base_gcmessages.js";
/**
 * @generated from protobuf message CMsgApplyAutograph
 */
export interface CMsgApplyAutograph {
	/**
	 * @generated from protobuf field: optional uint64 autograph_item_id = 1;
	 */
	autograph_item_id?: bigint;
	/**
	 * @generated from protobuf field: optional uint64 item_item_id = 2;
	 */
	item_item_id?: bigint;
}
/**
 * @generated from protobuf message CMsgAdjustItemEquippedState
 */
export interface CMsgAdjustItemEquippedState {
	/**
	 * @generated from protobuf field: optional uint64 item_id = 1;
	 */
	item_id?: bigint;
	/**
	 * @generated from protobuf field: optional uint32 new_class = 2;
	 */
	new_class?: number;
	/**
	 * @generated from protobuf field: optional uint32 new_slot = 3;
	 */
	new_slot?: number;
	/**
	 * @generated from protobuf field: optional uint32 style_index = 4;
	 */
	style_index?: number;
}
/**
 * @generated from protobuf message CMsgEconPlayerStrangeCountAdjustment
 */
export interface CMsgEconPlayerStrangeCountAdjustment {
	/**
	 * @generated from protobuf field: optional uint32 account_id = 1;
	 */
	account_id?: number;
	/**
	 * @generated from protobuf field: repeated CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment strange_count_adjustments = 2;
	 */
	strange_count_adjustments: CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment[];
	/**
	 * @generated from protobuf field: optional bool turbo_mode = 3;
	 */
	turbo_mode?: boolean;
}
/**
 * @generated from protobuf message CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment
 */
export interface CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment {
	/**
	 * @generated from protobuf field: optional uint32 event_type = 1;
	 */
	event_type?: number;
	/**
	 * @generated from protobuf field: optional uint64 item_id = 2;
	 */
	item_id?: bigint;
	/**
	 * @generated from protobuf field: optional uint32 adjustment = 3;
	 */
	adjustment?: number;
}
/**
 * @generated from protobuf message CMsgCraftingResponse
 */
export interface CMsgCraftingResponse {
	/**
	 * @generated from protobuf field: repeated uint64 item_ids = 1;
	 */
	item_ids: bigint[];
}
/**
 * @generated from protobuf message CMsgGCRequestStoreSalesData
 */
export interface CMsgGCRequestStoreSalesData {
	/**
	 * @generated from protobuf field: optional uint32 version = 1;
	 */
	version?: number;
	/**
	 * @generated from protobuf field: optional uint32 currency = 2;
	 */
	currency?: number;
}
/**
 * @generated from protobuf message CMsgGCRequestStoreSalesDataResponse
 */
export interface CMsgGCRequestStoreSalesDataResponse {
	/**
	 * @generated from protobuf field: repeated CMsgGCRequestStoreSalesDataResponse.Price sale_price = 1;
	 */
	sale_price: CMsgGCRequestStoreSalesDataResponse_Price[];
	/**
	 * @generated from protobuf field: optional uint32 version = 2;
	 */
	version?: number;
	/**
	 * @generated from protobuf field: optional uint32 expiration_time = 3;
	 */
	expiration_time?: number;
}
/**
 * @generated from protobuf message CMsgGCRequestStoreSalesDataResponse.Price
 */
export interface CMsgGCRequestStoreSalesDataResponse_Price {
	/**
	 * @generated from protobuf field: optional uint32 item_def = 1;
	 */
	item_def?: number;
	/**
	 * @generated from protobuf field: optional uint32 price = 2;
	 */
	price?: number;
}
/**
 * @generated from protobuf message CMsgGCRequestStoreSalesDataUpToDateResponse
 */
export interface CMsgGCRequestStoreSalesDataUpToDateResponse {
	/**
	 * @generated from protobuf field: optional uint32 version = 1;
	 */
	version?: number;
	/**
	 * @generated from protobuf field: optional uint32 expiration_time = 2;
	 */
	expiration_time?: number;
}
/**
 * @generated from protobuf message CMsgGCToGCPingRequest
 */
export interface CMsgGCToGCPingRequest {}
/**
 * @generated from protobuf message CMsgGCToGCPingResponse
 */
export interface CMsgGCToGCPingResponse {}
/**
 * @generated from protobuf message CMsgGCToGCGetUserSessionServer
 */
export interface CMsgGCToGCGetUserSessionServer {
	/**
	 * @generated from protobuf field: optional uint32 account_id = 1;
	 */
	account_id?: number;
}
/**
 * @generated from protobuf message CMsgGCToGCGetUserSessionServerResponse
 */
export interface CMsgGCToGCGetUserSessionServerResponse {
	/**
	 * @generated from protobuf field: optional fixed64 server_steam_id = 1;
	 */
	server_steam_id?: bigint;
	/**
	 * @generated from protobuf field: optional bool is_online = 2;
	 */
	is_online?: boolean;
}
/**
 * @generated from protobuf message CMsgGCToGCGetUserServerMembers
 */
export interface CMsgGCToGCGetUserServerMembers {
	/**
	 * @generated from protobuf field: optional uint32 account_id = 1;
	 */
	account_id?: number;
	/**
	 * @generated from protobuf field: optional uint32 max_spectators = 2;
	 */
	max_spectators?: number;
}
/**
 * @generated from protobuf message CMsgGCToGCGetUserServerMembersResponse
 */
export interface CMsgGCToGCGetUserServerMembersResponse {
	/**
	 * @generated from protobuf field: repeated uint32 member_account_id = 1;
	 */
	member_account_id: number[];
}
/**
 * @generated from protobuf message CMsgLookupMultipleAccountNames
 */
export interface CMsgLookupMultipleAccountNames {
	/**
	 * @generated from protobuf field: repeated uint32 accountids = 1 [packed = true];
	 */
	accountids: number[];
}
/**
 * @generated from protobuf message CMsgLookupMultipleAccountNamesResponse
 */
export interface CMsgLookupMultipleAccountNamesResponse {
	/**
	 * @generated from protobuf field: repeated CMsgLookupMultipleAccountNamesResponse.Account accounts = 1;
	 */
	accounts: CMsgLookupMultipleAccountNamesResponse_Account[];
}
/**
 * @generated from protobuf message CMsgLookupMultipleAccountNamesResponse.Account
 */
export interface CMsgLookupMultipleAccountNamesResponse_Account {
	/**
	 * @generated from protobuf field: optional uint32 accountid = 1;
	 */
	accountid?: number;
	/**
	 * @generated from protobuf field: optional string persona = 2;
	 */
	persona?: string;
}
/**
 * @generated from protobuf message CMsgRequestCrateItems
 */
export interface CMsgRequestCrateItems {
	/**
	 * @generated from protobuf field: optional uint32 crate_item_def = 1;
	 */
	crate_item_def?: number;
}
/**
 * @generated from protobuf message CMsgRequestCrateItemsResponse
 */
export interface CMsgRequestCrateItemsResponse {
	/**
	 * @generated from protobuf field: optional uint32 response = 1;
	 */
	response?: number;
	/**
	 * @generated from protobuf field: repeated uint32 item_defs = 2;
	 */
	item_defs: number[];
	/**
	 * @generated from protobuf field: repeated uint32 peek_item_defs = 3;
	 */
	peek_item_defs: number[];
	/**
	 * @generated from protobuf field: repeated CSOEconItem peek_items = 4;
	 */
	peek_items: CSOEconItem[];
}
/**
 * @generated from protobuf enum CMsgRequestCrateItemsResponse.EResult
 */
export enum CMsgRequestCrateItemsResponse_EResult {
	/**
	 * @generated from protobuf enum value: k_Succeeded = 0;
	 */
	k_Succeeded = 0,
	/**
	 * @generated from protobuf enum value: k_Failed = 1;
	 */
	k_Failed = 1,
}
/**
 * @generated from protobuf message CMsgRequestCrateEscalationLevel
 */
export interface CMsgRequestCrateEscalationLevel {
	/**
	 * @generated from protobuf field: optional uint32 crate_item_def = 1;
	 */
	crate_item_def?: number;
}
/**
 * @generated from protobuf message CMsgRequestCrateEscalationLevelResponse
 */
export interface CMsgRequestCrateEscalationLevelResponse {
	/**
	 * @generated from protobuf field: optional uint32 response = 1;
	 */
	response?: number;
	/**
	 * @generated from protobuf field: optional uint32 escalation_level0 = 2;
	 */
	escalation_level0?: number;
	/**
	 * @generated from protobuf field: optional uint32 escalation_level1 = 3;
	 */
	escalation_level1?: number;
	/**
	 * @generated from protobuf field: optional uint32 escalation_level2 = 4;
	 */
	escalation_level2?: number;
	/**
	 * @generated from protobuf field: optional uint32 escalation_level3 = 5;
	 */
	escalation_level3?: number;
}
/**
 * @generated from protobuf enum CMsgRequestCrateEscalationLevelResponse.EResult
 */
export enum CMsgRequestCrateEscalationLevelResponse_EResult {
	/**
	 * @generated from protobuf enum value: k_Succeeded = 0;
	 */
	k_Succeeded = 0,
	/**
	 * @generated from protobuf enum value: k_Failed = 1;
	 */
	k_Failed = 1,
}
/**
 * @generated from protobuf message CMsgGCToGCCanUseDropRateBonus
 */
export interface CMsgGCToGCCanUseDropRateBonus {
	/**
	 * @generated from protobuf field: optional uint32 account_id = 1;
	 */
	account_id?: number;
	/**
	 * @generated from protobuf field: optional float drop_rate_bonus = 2;
	 */
	drop_rate_bonus?: number;
	/**
	 * @generated from protobuf field: optional uint32 booster_type = 3;
	 */
	booster_type?: number;
	/**
	 * @generated from protobuf field: optional uint32 exclusive_item_def = 4;
	 */
	exclusive_item_def?: number;
	/**
	 * @generated from protobuf field: optional bool allow_equal_rate = 5;
	 */
	allow_equal_rate?: boolean;
}
/**
 * @generated from protobuf message CMsgSQLAddDropRateBonus
 */
export interface CMsgSQLAddDropRateBonus {
	/**
	 * @generated from protobuf field: optional uint32 account_id = 1;
	 */
	account_id?: number;
	/**
	 * @generated from protobuf field: optional uint64 item_id = 2;
	 */
	item_id?: bigint;
	/**
	 * @generated from protobuf field: optional uint32 item_def = 3;
	 */
	item_def?: number;
	/**
	 * @generated from protobuf field: optional float drop_rate_bonus = 4;
	 */
	drop_rate_bonus?: number;
	/**
	 * @generated from protobuf field: optional uint32 booster_type = 5;
	 */
	booster_type?: number;
	/**
	 * @generated from protobuf field: optional uint32 seconds_duration = 6;
	 */
	seconds_duration?: number;
	/**
	 * @generated from protobuf field: optional uint32 end_time_stamp = 7;
	 */
	end_time_stamp?: number;
}
/**
 * @generated from protobuf message CMsgSQLUpgradeBattleBooster
 */
export interface CMsgSQLUpgradeBattleBooster {
	/**
	 * @generated from protobuf field: optional uint32 account_id = 1;
	 */
	account_id?: number;
	/**
	 * @generated from protobuf field: optional uint32 item_def = 2;
	 */
	item_def?: number;
	/**
	 * @generated from protobuf field: optional float bonus_to_add = 3;
	 */
	bonus_to_add?: number;
	/**
	 * @generated from protobuf field: optional uint32 booster_type = 4;
	 */
	booster_type?: number;
}
/**
 * @generated from protobuf message CMsgGCToGCRefreshSOCache
 */
export interface CMsgGCToGCRefreshSOCache {
	/**
	 * @generated from protobuf field: optional uint32 account_id = 1;
	 */
	account_id?: number;
	/**
	 * @generated from protobuf field: optional bool reload = 2;
	 */
	reload?: boolean;
}
/**
 * @generated from protobuf message CMsgGCToGCAddSubscriptionTime
 */
export interface CMsgGCToGCAddSubscriptionTime {
	/**
	 * @generated from protobuf field: optional uint32 account_id = 1;
	 */
	account_id?: number;
	/**
	 * @generated from protobuf field: repeated uint32 matching_subscription_def_indexes = 2;
	 */
	matching_subscription_def_indexes: number[];
	/**
	 * @generated from protobuf field: optional uint32 additional_seconds = 3;
	 */
	additional_seconds?: number;
}
/**
 * @generated from protobuf message CMsgGCToGCGrantAccountRolledItems
 */
export interface CMsgGCToGCGrantAccountRolledItems {
	/**
	 * @generated from protobuf field: optional uint32 account_id = 1;
	 */
	account_id?: number;
	/**
	 * @generated from protobuf field: repeated CMsgGCToGCGrantAccountRolledItems.Item items = 2;
	 */
	items: CMsgGCToGCGrantAccountRolledItems_Item[];
	/**
	 * @generated from protobuf field: optional uint32 audit_action = 3;
	 */
	audit_action?: number;
	/**
	 * @generated from protobuf field: optional uint64 audit_data = 4;
	 */
	audit_data?: bigint;
}
/**
 * @generated from protobuf message CMsgGCToGCGrantAccountRolledItems.Item
 */
export interface CMsgGCToGCGrantAccountRolledItems_Item {
	/**
	 * @generated from protobuf field: optional uint32 item_def = 1;
	 */
	item_def?: number;
	/**
	 * @generated from protobuf field: repeated string loot_lists = 2;
	 */
	loot_lists: string[];
	/**
	 * @generated from protobuf field: optional bool ignore_limit = 3;
	 */
	ignore_limit?: boolean;
	/**
	 * @generated from protobuf field: optional uint32 origin = 4;
	 */
	origin?: number;
	/**
	 * @generated from protobuf field: repeated CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute dynamic_attributes = 5;
	 */
	dynamic_attributes: CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute[];
	/**
	 * @generated from protobuf field: repeated CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry additional_audit_entries = 6;
	 */
	additional_audit_entries: CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry[];
	/**
	 * @generated from protobuf field: optional uint32 inventory_token = 7;
	 */
	inventory_token?: number;
	/**
	 * @generated from protobuf field: optional int32 quality = 8;
	 */
	quality?: number;
}
/**
 * @generated from protobuf message CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute
 */
export interface CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute {
	/**
	 * @generated from protobuf field: optional string name = 1;
	 */
	name?: string;
	/**
	 * @generated from protobuf field: optional uint32 value_uint32 = 2;
	 */
	value_uint32?: number;
	/**
	 * @generated from protobuf field: optional float value_float = 3;
	 */
	value_float?: number;
	/**
	 * @generated from protobuf field: optional string value_string = 4;
	 */
	value_string?: string;
}
/**
 * @generated from protobuf message CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry
 */
export interface CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry {
	/**
	 * @generated from protobuf field: optional uint32 owner_account_id = 1;
	 */
	owner_account_id?: number;
	/**
	 * @generated from protobuf field: optional uint32 audit_action = 2;
	 */
	audit_action?: number;
	/**
	 * @generated from protobuf field: optional uint64 audit_data = 3;
	 */
	audit_data?: bigint;
}
/**
 * @generated from protobuf message CMsgGCToGCBetaDeleteItems
 */
export interface CMsgGCToGCBetaDeleteItems {
	/**
	 * @generated from protobuf field: optional uint32 account_id = 1;
	 */
	account_id?: number;
	/**
	 * @generated from protobuf field: repeated uint64 item_ids = 2;
	 */
	item_ids: bigint[];
	/**
	 * @generated from protobuf field: repeated uint32 item_defs = 3;
	 */
	item_defs: number[];
}
/**
 * @generated from protobuf message CMsgGCToGCGrantSelfMadeItemToAccount
 */
export interface CMsgGCToGCGrantSelfMadeItemToAccount {
	/**
	 * @generated from protobuf field: optional uint32 item_def_index = 1;
	 */
	item_def_index?: number;
	/**
	 * @generated from protobuf field: optional uint32 accountid = 2;
	 */
	accountid?: number;
}
/**
 * @generated from protobuf message CMsgUseItem
 */
export interface CMsgUseItem {
	/**
	 * @generated from protobuf field: optional uint64 item_id = 1;
	 */
	item_id?: bigint;
	/**
	 * @generated from protobuf field: optional fixed64 target_steam_id = 2;
	 */
	target_steam_id?: bigint;
	/**
	 * @generated from protobuf field: repeated uint32 gift__potential_targets = 3;
	 */
	gift__potential_targets: number[];
	/**
	 * @generated from protobuf field: optional uint32 duel__class_lock = 4;
	 */
	duel__class_lock?: number;
	/**
	 * @generated from protobuf field: optional uint64 initiator_steam_id = 5;
	 */
	initiator_steam_id?: bigint;
	/**
	 * @generated from protobuf field: optional bool itempack__ack_immediately = 6;
	 */
	itempack__ack_immediately?: boolean;
}
/**
 * @generated from protobuf message CMsgServerUseItem
 */
export interface CMsgServerUseItem {
	/**
	 * @generated from protobuf field: optional uint32 initiator_account_id = 1;
	 */
	initiator_account_id?: number;
	/**
	 * @generated from protobuf field: optional CMsgUseItem use_item_msg = 2;
	 */
	use_item_msg?: CMsgUseItem;
}
/**
 * @generated from protobuf message CMsgUseMultipleItems
 */
export interface CMsgUseMultipleItems {
	/**
	 * @generated from protobuf field: repeated uint64 item_ids = 1;
	 */
	item_ids: bigint[];
}
/**
 * @generated from protobuf message CGCStoreRechargeRedirect_LineItem
 */
export interface CGCStoreRechargeRedirect_LineItem {
	/**
	 * @generated from protobuf field: optional uint32 item_def_id = 1;
	 */
	item_def_id?: number;
	/**
	 * @generated from protobuf field: optional uint32 quantity = 2;
	 */
	quantity?: number;
}
/**
 * @generated from protobuf message CMsgGCEconSQLWorkItemEmbeddedRollbackData
 */
export interface CMsgGCEconSQLWorkItemEmbeddedRollbackData {
	/**
	 * @generated from protobuf field: optional uint32 account_id = 1;
	 */
	account_id?: number;
	/**
	 * @generated from protobuf field: optional uint64 deleted_item_id = 2;
	 */
	deleted_item_id?: bigint;
	/**
	 * @generated from protobuf field: optional uint32 old_audit_action = 3;
	 */
	old_audit_action?: number;
	/**
	 * @generated from protobuf field: optional uint32 new_audit_action = 4;
	 */
	new_audit_action?: number;
	/**
	 * @generated from protobuf field: optional uint32 expected_audit_action = 5;
	 */
	expected_audit_action?: number;
}
/**
 * @generated from protobuf message CMsgCraftStatue
 */
export interface CMsgCraftStatue {
	/**
	 * @generated from protobuf field: optional uint32 heroid = 1;
	 */
	heroid?: number;
	/**
	 * @generated from protobuf field: optional string sequencename = 2;
	 */
	sequencename?: string;
	/**
	 * @generated from protobuf field: optional float cycle = 3;
	 */
	cycle?: number;
	/**
	 * @generated from protobuf field: optional string description = 4;
	 */
	description?: string;
	/**
	 * @generated from protobuf field: optional uint32 pedestal_itemdef = 5;
	 */
	pedestal_itemdef?: number;
	/**
	 * @generated from protobuf field: optional uint64 toolid = 6;
	 */
	toolid?: bigint;
}
/**
 * @generated from protobuf message CMsgRedeemCode
 */
export interface CMsgRedeemCode {
	/**
	 * @generated from protobuf field: optional string code = 1;
	 */
	code?: string;
}
/**
 * @generated from protobuf message CMsgRedeemCodeResponse
 */
export interface CMsgRedeemCodeResponse {
	/**
	 * @generated from protobuf field: optional uint32 response = 1;
	 */
	response?: number;
	/**
	 * @generated from protobuf field: optional uint64 item_id = 2;
	 */
	item_id?: bigint;
}
/**
 * @generated from protobuf enum CMsgRedeemCodeResponse.EResultCode
 */
export enum CMsgRedeemCodeResponse_EResultCode {
	/**
	 * @generated from protobuf enum value: k_Succeeded = 0;
	 */
	k_Succeeded = 0,
	/**
	 * @generated from protobuf enum value: k_Failed_CodeNotFound = 1;
	 */
	k_Failed_CodeNotFound = 1,
	/**
	 * @generated from protobuf enum value: k_Failed_CodeAlreadyUsed = 2;
	 */
	k_Failed_CodeAlreadyUsed = 2,
	/**
	 * @generated from protobuf enum value: k_Failed_OtherError = 3;
	 */
	k_Failed_OtherError = 3,
}
/**
 * @generated from protobuf message CMsgDevNewItemRequest
 */
export interface CMsgDevNewItemRequest {
	/**
	 * @generated from protobuf field: optional string item_def_name = 3;
	 */
	item_def_name?: string;
	/**
	 * @generated from protobuf field: optional string loot_list_name = 4;
	 */
	loot_list_name?: string;
	/**
	 * @generated from protobuf field: repeated string attr_def_name = 5;
	 */
	attr_def_name: string[];
	/**
	 * @generated from protobuf field: repeated string attr_value = 6;
	 */
	attr_value: string[];
	/**
	 * @generated from protobuf field: optional uint32 item_quality = 7;
	 */
	item_quality?: number;
}
/**
 * @generated from protobuf message CMsgDevNewItemRequestResponse
 */
export interface CMsgDevNewItemRequestResponse {
	/**
	 * @generated from protobuf field: optional bool success = 1;
	 */
	success?: boolean;
}
/**
 * @generated from protobuf message CMsgDevUnlockAllItemStyles
 */
export interface CMsgDevUnlockAllItemStyles {
	/**
	 * @generated from protobuf field: optional uint64 item_id = 1;
	 */
	item_id?: bigint;
}
/**
 * @generated from protobuf message CMsgDevUnlockAllItemStylesResponse
 */
export interface CMsgDevUnlockAllItemStylesResponse {
	/**
	 * @generated from protobuf field: optional bool success = 1;
	 */
	success?: boolean;
}
/**
 * @generated from protobuf message CMsgGCGetAccountSubscriptionItem
 */
export interface CMsgGCGetAccountSubscriptionItem {
	/**
	 * @generated from protobuf field: optional uint32 account_id = 1;
	 */
	account_id?: number;
}
/**
 * @generated from protobuf message CMsgGCGetAccountSubscriptionItemResponse
 */
export interface CMsgGCGetAccountSubscriptionItemResponse {
	/**
	 * @generated from protobuf field: optional uint32 def_index = 1;
	 */
	def_index?: number;
}
/**
 * @generated from protobuf message CMsgGCAddGiftItem
 */
export interface CMsgGCAddGiftItem {
	/**
	 * @generated from protobuf field: optional uint32 gifter_account_id = 1;
	 */
	gifter_account_id?: number;
	/**
	 * @generated from protobuf field: optional uint32 receiver_account_id = 2;
	 */
	receiver_account_id?: number;
	/**
	 * @generated from protobuf field: optional CSOEconItem wrapped_item = 3;
	 */
	wrapped_item?: CSOEconItem;
	/**
	 * @generated from protobuf field: optional string gift_message = 4;
	 */
	gift_message?: string;
	/**
	 * @generated from protobuf field: optional bool is_wallet_cash_trusted = 5;
	 */
	is_wallet_cash_trusted?: boolean;
}
/**
 * @generated from protobuf message CMsgClientToGCWrapAndDeliverGift
 */
export interface CMsgClientToGCWrapAndDeliverGift {
	/**
	 * @generated from protobuf field: optional uint64 item_id = 1;
	 */
	item_id?: bigint;
	/**
	 * @generated from protobuf field: optional uint32 give_to_account_id = 2;
	 */
	give_to_account_id?: number;
	/**
	 * @generated from protobuf field: optional string gift_message = 3;
	 */
	gift_message?: string;
}
/**
 * @generated from protobuf message CMsgSQLGCToGCRevokeUntrustedGift
 */
export interface CMsgSQLGCToGCRevokeUntrustedGift {
	/**
	 * @generated from protobuf field: optional uint32 account_id = 1;
	 */
	account_id?: number;
	/**
	 * @generated from protobuf field: optional uint64 sent_item_id = 4;
	 */
	sent_item_id?: bigint;
}
/**
 * @generated from protobuf message CMsgClientToGCWrapAndDeliverGiftResponse
 */
export interface CMsgClientToGCWrapAndDeliverGiftResponse {
	/**
	 * @generated from protobuf field: optional EGCMsgResponse response = 1;
	 */
	response?: EGCMsgResponse;
	/**
	 * @generated from protobuf field: optional uint32 gifting_charge_uses = 2;
	 */
	gifting_charge_uses?: number;
	/**
	 * @generated from protobuf field: optional int32 gifting_charge_max = 3;
	 */
	gifting_charge_max?: number;
	/**
	 * @generated from protobuf field: optional uint32 gifting_uses = 4;
	 */
	gifting_uses?: number;
	/**
	 * @generated from protobuf field: optional int32 gifting_max = 5;
	 */
	gifting_max?: number;
	/**
	 * @generated from protobuf field: optional uint32 gifting_window_hours = 6;
	 */
	gifting_window_hours?: number;
	/**
	 * @generated from protobuf field: optional EGCMsgInitiateTradeResponse trade_restriction = 7;
	 */
	trade_restriction?: EGCMsgInitiateTradeResponse;
}
/**
 * @generated from protobuf message CMsgClientToGCUnwrapGift
 */
export interface CMsgClientToGCUnwrapGift {
	/**
	 * @generated from protobuf field: optional uint64 item_id = 1;
	 */
	item_id?: bigint;
}
/**
 * @generated from protobuf message CMsgClientToGCGetGiftPermissions
 */
export interface CMsgClientToGCGetGiftPermissions {}
/**
 * @generated from protobuf message CMsgClientToGCGetGiftPermissionsResponse
 */
export interface CMsgClientToGCGetGiftPermissionsResponse {
	/**
	 * @generated from protobuf field: optional bool is_unlimited = 1;
	 */
	is_unlimited?: boolean;
	/**
	 * @generated from protobuf field: optional bool has_two_factor = 3;
	 */
	has_two_factor?: boolean;
	/**
	 * @generated from protobuf field: optional EGCMsgInitiateTradeResponse sender_permission = 6;
	 */
	sender_permission?: EGCMsgInitiateTradeResponse;
	/**
	 * @generated from protobuf field: optional uint32 friendship_age_requirement = 7;
	 */
	friendship_age_requirement?: number;
	/**
	 * @generated from protobuf field: optional uint32 friendship_age_requirement_two_factor = 8;
	 */
	friendship_age_requirement_two_factor?: number;
	/**
	 * @generated from protobuf field: repeated CMsgClientToGCGetGiftPermissionsResponse.FriendPermission friend_permissions = 9;
	 */
	friend_permissions: CMsgClientToGCGetGiftPermissionsResponse_FriendPermission[];
}
/**
 * @generated from protobuf message CMsgClientToGCGetGiftPermissionsResponse.FriendPermission
 */
export interface CMsgClientToGCGetGiftPermissionsResponse_FriendPermission {
	/**
	 * @generated from protobuf field: optional uint32 account_id = 1;
	 */
	account_id?: number;
	/**
	 * @generated from protobuf field: optional EGCMsgInitiateTradeResponse permission = 2;
	 */
	permission?: EGCMsgInitiateTradeResponse;
}
/**
 * @generated from protobuf message CMsgClientToGCUnpackBundle
 */
export interface CMsgClientToGCUnpackBundle {
	/**
	 * @generated from protobuf field: optional uint64 item_id = 1;
	 */
	item_id?: bigint;
}
/**
 * @generated from protobuf message CMsgClientToGCUnpackBundleResponse
 */
export interface CMsgClientToGCUnpackBundleResponse {
	/**
	 * @generated from protobuf field: repeated uint64 unpacked_item_ids = 1;
	 */
	unpacked_item_ids: bigint[];
	/**
	 * @generated from protobuf field: optional CMsgClientToGCUnpackBundleResponse.EUnpackBundle response = 2;
	 */
	response?: CMsgClientToGCUnpackBundleResponse_EUnpackBundle;
	/**
	 * @generated from protobuf field: repeated uint32 unpacked_item_def_indexes = 3;
	 */
	unpacked_item_def_indexes: number[];
}
/**
 * @generated from protobuf enum CMsgClientToGCUnpackBundleResponse.EUnpackBundle
 */
export enum CMsgClientToGCUnpackBundleResponse_EUnpackBundle {
	/**
	 * @generated from protobuf enum value: k_UnpackBundle_Succeeded = 0;
	 */
	k_UnpackBundle_Succeeded = 0,
	/**
	 * @generated from protobuf enum value: k_UnpackBundle_Failed_ItemIsNotBundle = 1;
	 */
	k_UnpackBundle_Failed_ItemIsNotBundle = 1,
	/**
	 * @generated from protobuf enum value: k_UnpackBundle_Failed_UnableToCreateContainedItem = 2;
	 */
	k_UnpackBundle_Failed_UnableToCreateContainedItem = 2,
	/**
	 * @generated from protobuf enum value: k_UnpackBundle_Failed_SOCacheError = 3;
	 */
	k_UnpackBundle_Failed_SOCacheError = 3,
	/**
	 * @generated from protobuf enum value: k_UnpackBundle_Failed_ItemIsInvalid = 4;
	 */
	k_UnpackBundle_Failed_ItemIsInvalid = 4,
	/**
	 * @generated from protobuf enum value: k_UnpackBundle_Failed_BadItemQuantity = 5;
	 */
	k_UnpackBundle_Failed_BadItemQuantity = 5,
	/**
	 * @generated from protobuf enum value: k_UnpackBundle_Failed_UnableToDeleteItem = 6;
	 */
	k_UnpackBundle_Failed_UnableToDeleteItem = 6,
}
/**
 * @generated from protobuf message CMsgClientToGCPackBundle
 */
export interface CMsgClientToGCPackBundle {
	/**
	 * @generated from protobuf field: repeated uint64 item_ids = 1;
	 */
	item_ids: bigint[];
	/**
	 * @generated from protobuf field: optional uint32 bundle_item_def_index = 2;
	 */
	bundle_item_def_index?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCPackBundleResponse
 */
export interface CMsgClientToGCPackBundleResponse {
	/**
	 * @generated from protobuf field: optional uint64 item_id = 1;
	 */
	item_id?: bigint;
	/**
	 * @generated from protobuf field: optional CMsgClientToGCPackBundleResponse.EPackBundle response = 2;
	 */
	response?: CMsgClientToGCPackBundleResponse_EPackBundle;
}
/**
 * @generated from protobuf enum CMsgClientToGCPackBundleResponse.EPackBundle
 */
export enum CMsgClientToGCPackBundleResponse_EPackBundle {
	/**
	 * @generated from protobuf enum value: k_PackBundle_Succeeded = 0;
	 */
	k_PackBundle_Succeeded = 0,
	/**
	 * @generated from protobuf enum value: k_PackBundle_Failed_InternalError = 1;
	 */
	k_PackBundle_Failed_InternalError = 1,
	/**
	 * @generated from protobuf enum value: k_PackBundle_Failed_ItemIsNotBundle = 2;
	 */
	k_PackBundle_Failed_ItemIsNotBundle = 2,
	/**
	 * @generated from protobuf enum value: k_PackBundle_Failed_SOCacheError = 3;
	 */
	k_PackBundle_Failed_SOCacheError = 3,
	/**
	 * @generated from protobuf enum value: k_PackBundle_Failed_ItemIsInvalid = 4;
	 */
	k_PackBundle_Failed_ItemIsInvalid = 4,
	/**
	 * @generated from protobuf enum value: k_PackBundle_Failed_BadItemQuantity = 5;
	 */
	k_PackBundle_Failed_BadItemQuantity = 5,
	/**
	 * @generated from protobuf enum value: k_PackBundle_Failed_UnableToDeleteItem = 6;
	 */
	k_PackBundle_Failed_UnableToDeleteItem = 6,
	/**
	 * @generated from protobuf enum value: k_PackBundle_Failed_BundleCannotBePacked = 7;
	 */
	k_PackBundle_Failed_BundleCannotBePacked = 7,
	/**
	 * @generated from protobuf enum value: k_PackBundle_Failed_ItemIsUntradeable = 8;
	 */
	k_PackBundle_Failed_ItemIsUntradeable = 8,
	/**
	 * @generated from protobuf enum value: k_PackBundle_Failed_ItemIsEquipped = 9;
	 */
	k_PackBundle_Failed_ItemIsEquipped = 9,
	/**
	 * @generated from protobuf enum value: k_PackBundle_Failed_ItemHasGems = 10;
	 */
	k_PackBundle_Failed_ItemHasGems = 10,
	/**
	 * @generated from protobuf enum value: k_PackBundle_Failed_ItemMixedQuality = 11;
	 */
	k_PackBundle_Failed_ItemMixedQuality = 11,
	/**
	 * @generated from protobuf enum value: k_PackBundle_Failed_ItemInvalidQuality = 12;
	 */
	k_PackBundle_Failed_ItemInvalidQuality = 12,
	/**
	 * @generated from protobuf enum value: k_PackBundle_Failed_ItemIsNonEconomy = 13;
	 */
	k_PackBundle_Failed_ItemIsNonEconomy = 13,
	/**
	 * @generated from protobuf enum value: k_PackBundle_Failed_Disabled = 14;
	 */
	k_PackBundle_Failed_Disabled = 14,
}
/**
 * @generated from protobuf message CMsgGCToClientStoreTransactionCompleted
 */
export interface CMsgGCToClientStoreTransactionCompleted {
	/**
	 * @generated from protobuf field: optional uint64 txn_id = 1;
	 */
	txn_id?: bigint;
	/**
	 * @generated from protobuf field: repeated uint64 item_ids = 2;
	 */
	item_ids: bigint[];
}
/**
 * @generated from protobuf message CMsgClientToGCEquipItems
 */
export interface CMsgClientToGCEquipItems {
	/**
	 * @generated from protobuf field: repeated CMsgAdjustItemEquippedState equips = 1;
	 */
	equips: CMsgAdjustItemEquippedState[];
}
/**
 * @generated from protobuf message CMsgClientToGCEquipItemsResponse
 */
export interface CMsgClientToGCEquipItemsResponse {
	/**
	 * @generated from protobuf field: optional fixed64 so_cache_version_id = 1;
	 */
	so_cache_version_id?: bigint;
}
/**
 * @generated from protobuf message CMsgClientToGCSetItemStyle
 */
export interface CMsgClientToGCSetItemStyle {
	/**
	 * @generated from protobuf field: optional uint64 item_id = 1;
	 */
	item_id?: bigint;
	/**
	 * @generated from protobuf field: optional uint32 style_index = 2;
	 */
	style_index?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCSetItemStyleResponse
 */
export interface CMsgClientToGCSetItemStyleResponse {
	/**
	 * @generated from protobuf field: optional CMsgClientToGCSetItemStyleResponse.ESetStyle response = 1;
	 */
	response?: CMsgClientToGCSetItemStyleResponse_ESetStyle;
}
/**
 * @generated from protobuf enum CMsgClientToGCSetItemStyleResponse.ESetStyle
 */
export enum CMsgClientToGCSetItemStyleResponse_ESetStyle {
	/**
	 * @generated from protobuf enum value: k_SetStyle_Succeeded = 0;
	 */
	k_SetStyle_Succeeded = 0,
	/**
	 * @generated from protobuf enum value: k_SetStyle_Failed = 1;
	 */
	k_SetStyle_Failed = 1,
	/**
	 * @generated from protobuf enum value: k_SetStyle_Failed_StyleIsLocked = 2;
	 */
	k_SetStyle_Failed_StyleIsLocked = 2,
}
/**
 * @generated from protobuf message CMsgClientToGCUnlockItemStyle
 */
export interface CMsgClientToGCUnlockItemStyle {
	/**
	 * @generated from protobuf field: optional uint64 item_to_unlock = 1;
	 */
	item_to_unlock?: bigint;
	/**
	 * @generated from protobuf field: optional uint32 style_index = 2;
	 */
	style_index?: number;
	/**
	 * @generated from protobuf field: repeated uint64 consumable_item_ids = 3;
	 */
	consumable_item_ids: bigint[];
}
/**
 * @generated from protobuf message CMsgClientToGCUnlockItemStyleResponse
 */
export interface CMsgClientToGCUnlockItemStyleResponse {
	/**
	 * @generated from protobuf field: optional CMsgClientToGCUnlockItemStyleResponse.EUnlockStyle response = 1;
	 */
	response?: CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle;
	/**
	 * @generated from protobuf field: optional uint64 item_id = 2;
	 */
	item_id?: bigint;
	/**
	 * @generated from protobuf field: optional uint32 style_index = 3;
	 */
	style_index?: number;
	/**
	 * @generated from protobuf field: optional uint32 style_prereq = 4;
	 */
	style_prereq?: number;
}
/**
 * @generated from protobuf enum CMsgClientToGCUnlockItemStyleResponse.EUnlockStyle
 */
export enum CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle {
	/**
	 * @generated from protobuf enum value: k_UnlockStyle_Succeeded = 0;
	 */
	k_UnlockStyle_Succeeded = 0,
	/**
	 * @generated from protobuf enum value: k_UnlockStyle_Failed_PreReq = 1;
	 */
	k_UnlockStyle_Failed_PreReq = 1,
	/**
	 * @generated from protobuf enum value: k_UnlockStyle_Failed_CantAfford = 2;
	 */
	k_UnlockStyle_Failed_CantAfford = 2,
	/**
	 * @generated from protobuf enum value: k_UnlockStyle_Failed_CantCommit = 3;
	 */
	k_UnlockStyle_Failed_CantCommit = 3,
	/**
	 * @generated from protobuf enum value: k_UnlockStyle_Failed_CantLockCache = 4;
	 */
	k_UnlockStyle_Failed_CantLockCache = 4,
	/**
	 * @generated from protobuf enum value: k_UnlockStyle_Failed_CantAffordAttrib = 5;
	 */
	k_UnlockStyle_Failed_CantAffordAttrib = 5,
	/**
	 * @generated from protobuf enum value: k_UnlockStyle_Failed_CantAffordGem = 6;
	 */
	k_UnlockStyle_Failed_CantAffordGem = 6,
	/**
	 * @generated from protobuf enum value: k_UnlockStyle_Failed_NoCompendiumLevel = 7;
	 */
	k_UnlockStyle_Failed_NoCompendiumLevel = 7,
	/**
	 * @generated from protobuf enum value: k_UnlockStyle_Failed_AlreadyUnlocked = 8;
	 */
	k_UnlockStyle_Failed_AlreadyUnlocked = 8,
	/**
	 * @generated from protobuf enum value: k_UnlockStyle_Failed_OtherError = 9;
	 */
	k_UnlockStyle_Failed_OtherError = 9,
	/**
	 * @generated from protobuf enum value: k_UnlockStyle_Failed_ItemIsInvalid = 10;
	 */
	k_UnlockStyle_Failed_ItemIsInvalid = 10,
	/**
	 * @generated from protobuf enum value: k_UnlockStyle_Failed_ToolIsInvalid = 11;
	 */
	k_UnlockStyle_Failed_ToolIsInvalid = 11,
}
/**
 * @generated from protobuf message CMsgClientToGCSetItemInventoryCategory
 */
export interface CMsgClientToGCSetItemInventoryCategory {
	/**
	 * @generated from protobuf field: repeated uint64 item_ids = 1;
	 */
	item_ids: bigint[];
	/**
	 * @generated from protobuf field: optional uint32 set_to_value = 2;
	 */
	set_to_value?: number;
	/**
	 * @generated from protobuf field: optional uint32 remove_categories = 3;
	 */
	remove_categories?: number;
	/**
	 * @generated from protobuf field: optional uint32 add_categories = 4;
	 */
	add_categories?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCUnlockCrate
 */
export interface CMsgClientToGCUnlockCrate {
	/**
	 * @generated from protobuf field: optional uint64 crate_item_id = 1;
	 */
	crate_item_id?: bigint;
	/**
	 * @generated from protobuf field: optional uint64 key_item_id = 2;
	 */
	key_item_id?: bigint;
}
/**
 * @generated from protobuf message CMsgClientToGCUnlockCrateResponse
 */
export interface CMsgClientToGCUnlockCrateResponse {
	/**
	 * @generated from protobuf field: optional EGCMsgResponse result = 1;
	 */
	result?: EGCMsgResponse;
	/**
	 * @generated from protobuf field: repeated CMsgClientToGCUnlockCrateResponse.Item granted_items = 2;
	 */
	granted_items: CMsgClientToGCUnlockCrateResponse_Item[];
}
/**
 * @generated from protobuf message CMsgClientToGCUnlockCrateResponse.Item
 */
export interface CMsgClientToGCUnlockCrateResponse_Item {
	/**
	 * @generated from protobuf field: optional uint64 item_id = 1;
	 */
	item_id?: bigint;
	/**
	 * @generated from protobuf field: optional uint32 def_index = 2;
	 */
	def_index?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCRemoveItemAttribute
 */
export interface CMsgClientToGCRemoveItemAttribute {
	/**
	 * @generated from protobuf field: optional uint64 item_id = 1;
	 */
	item_id?: bigint;
}
/**
 * @generated from protobuf message CMsgClientToGCRemoveItemAttributeResponse
 */
export interface CMsgClientToGCRemoveItemAttributeResponse {
	/**
	 * @generated from protobuf field: optional CMsgClientToGCRemoveItemAttributeResponse.ERemoveItemAttribute response = 1;
	 */
	response?: CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute;
	/**
	 * @generated from protobuf field: optional uint64 item_id = 2;
	 */
	item_id?: bigint;
}
/**
 * @generated from protobuf enum CMsgClientToGCRemoveItemAttributeResponse.ERemoveItemAttribute
 */
export enum CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute {
	/**
	 * @generated from protobuf enum value: k_RemoveItemAttribute_Succeeded = 0;
	 */
	k_RemoveItemAttribute_Succeeded = 0,
	/**
	 * @generated from protobuf enum value: k_RemoveItemAttribute_Failed = 1;
	 */
	k_RemoveItemAttribute_Failed = 1,
	/**
	 * @generated from protobuf enum value: k_RemoveItemAttribute_Failed_ItemIsInvalid = 2;
	 */
	k_RemoveItemAttribute_Failed_ItemIsInvalid = 2,
	/**
	 * @generated from protobuf enum value: k_RemoveItemAttribute_Failed_AttributeCannotBeRemoved = 3;
	 */
	k_RemoveItemAttribute_Failed_AttributeCannotBeRemoved = 3,
	/**
	 * @generated from protobuf enum value: k_RemoveItemAttribute_Failed_AttributeDoesntExist = 4;
	 */
	k_RemoveItemAttribute_Failed_AttributeDoesntExist = 4,
}
/**
 * @generated from protobuf message CMsgClientToGCNameItem
 */
export interface CMsgClientToGCNameItem {
	/**
	 * @generated from protobuf field: optional uint64 subject_item_id = 1;
	 */
	subject_item_id?: bigint;
	/**
	 * @generated from protobuf field: optional uint64 tool_item_id = 2;
	 */
	tool_item_id?: bigint;
	/**
	 * @generated from protobuf field: optional string name = 3;
	 */
	name?: string;
}
/**
 * @generated from protobuf message CMsgClientToGCNameItemResponse
 */
export interface CMsgClientToGCNameItemResponse {
	/**
	 * @generated from protobuf field: optional CMsgClientToGCNameItemResponse.ENameItem response = 1;
	 */
	response?: CMsgClientToGCNameItemResponse_ENameItem;
	/**
	 * @generated from protobuf field: optional uint64 item_id = 2;
	 */
	item_id?: bigint;
}
/**
 * @generated from protobuf enum CMsgClientToGCNameItemResponse.ENameItem
 */
export enum CMsgClientToGCNameItemResponse_ENameItem {
	/**
	 * @generated from protobuf enum value: k_NameItem_Succeeded = 0;
	 */
	k_NameItem_Succeeded = 0,
	/**
	 * @generated from protobuf enum value: k_NameItem_Failed = 1;
	 */
	k_NameItem_Failed = 1,
	/**
	 * @generated from protobuf enum value: k_NameItem_Failed_ToolIsInvalid = 2;
	 */
	k_NameItem_Failed_ToolIsInvalid = 2,
	/**
	 * @generated from protobuf enum value: k_NameItem_Failed_ItemIsInvalid = 3;
	 */
	k_NameItem_Failed_ItemIsInvalid = 3,
	/**
	 * @generated from protobuf enum value: k_NameItem_Failed_NameIsInvalid = 4;
	 */
	k_NameItem_Failed_NameIsInvalid = 4,
}
/**
 * @generated from protobuf message CMsgGCSetItemPosition
 */
export interface CMsgGCSetItemPosition {
	/**
	 * @generated from protobuf field: optional uint64 item_id = 1;
	 */
	item_id?: bigint;
	/**
	 * @generated from protobuf field: optional uint32 new_position = 2;
	 */
	new_position?: number;
}
/**
 * @generated from protobuf message CAttribute_ItemDynamicRecipeComponent
 */
export interface CAttribute_ItemDynamicRecipeComponent {
	/**
	 * @generated from protobuf field: optional uint32 item_def = 1;
	 */
	item_def?: number;
	/**
	 * @generated from protobuf field: optional uint32 item_quality = 2;
	 */
	item_quality?: number;
	/**
	 * @generated from protobuf field: optional uint32 item_flags = 3;
	 */
	item_flags?: number;
	/**
	 * @generated from protobuf field: optional string attributes_string = 4;
	 */
	attributes_string?: string;
	/**
	 * @generated from protobuf field: optional uint32 item_count = 5;
	 */
	item_count?: number;
	/**
	 * @generated from protobuf field: optional uint32 items_fulfilled = 6;
	 */
	items_fulfilled?: number;
	/**
	 * @generated from protobuf field: optional uint32 item_rarity = 7;
	 */
	item_rarity?: number;
	/**
	 * @generated from protobuf field: optional string lootlist = 8;
	 */
	lootlist?: string;
	/**
	 * @generated from protobuf field: optional uint64 fulfilled_item_id = 9;
	 */
	fulfilled_item_id?: bigint;
	/**
	 * @generated from protobuf field: optional uint32 associated_item_def = 10;
	 */
	associated_item_def?: number;
}
/**
 * @generated from protobuf message CProtoItemSocket
 */
export interface CProtoItemSocket {
	/**
	 * @generated from protobuf field: optional uint64 item_id = 1;
	 */
	item_id?: bigint;
	/**
	 * @generated from protobuf field: optional uint32 attr_def_index = 2;
	 */
	attr_def_index?: number;
	/**
	 * @generated from protobuf field: optional uint32 required_type = 3;
	 */
	required_type?: number;
	/**
	 * @generated from protobuf field: optional string required_hero = 4;
	 */
	required_hero?: string;
	/**
	 * @generated from protobuf field: optional uint32 gem_def_index = 5;
	 */
	gem_def_index?: number;
	/**
	 * @generated from protobuf field: optional bool not_tradable = 6;
	 */
	not_tradable?: boolean;
	/**
	 * @generated from protobuf field: optional string required_item_slot = 7;
	 */
	required_item_slot?: string;
}
/**
 * @generated from protobuf message CProtoItemSocket_Empty
 */
export interface CProtoItemSocket_Empty {
	/**
	 * @generated from protobuf field: optional CProtoItemSocket socket = 1;
	 */
	socket?: CProtoItemSocket;
}
/**
 * @generated from protobuf message CProtoItemSocket_Effect
 */
export interface CProtoItemSocket_Effect {
	/**
	 * @generated from protobuf field: optional CProtoItemSocket socket = 1;
	 */
	socket?: CProtoItemSocket;
	/**
	 * @generated from protobuf field: optional uint32 effect = 2;
	 */
	effect?: number;
}
/**
 * @generated from protobuf message CProtoItemSocket_Color
 */
export interface CProtoItemSocket_Color {
	/**
	 * @generated from protobuf field: optional CProtoItemSocket socket = 1;
	 */
	socket?: CProtoItemSocket;
	/**
	 * @generated from protobuf field: optional uint32 red = 2;
	 */
	red?: number;
	/**
	 * @generated from protobuf field: optional uint32 green = 3;
	 */
	green?: number;
	/**
	 * @generated from protobuf field: optional uint32 blue = 4;
	 */
	blue?: number;
}
/**
 * @generated from protobuf message CProtoItemSocket_Strange
 */
export interface CProtoItemSocket_Strange {
	/**
	 * @generated from protobuf field: optional CProtoItemSocket socket = 1;
	 */
	socket?: CProtoItemSocket;
	/**
	 * @generated from protobuf field: optional uint32 strange_type = 2;
	 */
	strange_type?: number;
	/**
	 * @generated from protobuf field: optional uint32 strange_value = 3;
	 */
	strange_value?: number;
}
/**
 * @generated from protobuf message CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY
 */
export interface CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY {
	/**
	 * @generated from protobuf field: optional CProtoItemSocket socket = 1;
	 */
	socket?: CProtoItemSocket;
	/**
	 * @generated from protobuf field: optional uint32 strange_type = 2;
	 */
	strange_type?: number;
	/**
	 * @generated from protobuf field: optional uint32 strange_value = 3;
	 */
	strange_value?: number;
	/**
	 * @generated from protobuf field: optional uint32 ability_effect = 4;
	 */
	ability_effect?: number;
}
/**
 * @generated from protobuf message CProtoItemSocket_Spectator
 */
export interface CProtoItemSocket_Spectator {
	/**
	 * @generated from protobuf field: optional CProtoItemSocket socket = 1;
	 */
	socket?: CProtoItemSocket;
	/**
	 * @generated from protobuf field: optional uint32 games_viewed = 2;
	 */
	games_viewed?: number;
	/**
	 * @generated from protobuf field: optional uint32 corporation_id = 3;
	 */
	corporation_id?: number;
	/**
	 * @generated from protobuf field: optional uint32 league_id = 4;
	 */
	league_id?: number;
	/**
	 * @generated from protobuf field: optional uint32 team_id = 5;
	 */
	team_id?: number;
}
/**
 * @generated from protobuf message CProtoItemSocket_AssetModifier
 */
export interface CProtoItemSocket_AssetModifier {
	/**
	 * @generated from protobuf field: optional CProtoItemSocket socket = 1;
	 */
	socket?: CProtoItemSocket;
	/**
	 * @generated from protobuf field: optional uint32 asset_modifier = 2;
	 */
	asset_modifier?: number;
}
/**
 * @generated from protobuf message CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY
 */
export interface CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY {
	/**
	 * @generated from protobuf field: optional CProtoItemSocket socket = 1;
	 */
	socket?: CProtoItemSocket;
	/**
	 * @generated from protobuf field: optional uint32 asset_modifier = 2;
	 */
	asset_modifier?: number;
	/**
	 * @generated from protobuf field: optional uint32 anim_modifier = 3;
	 */
	anim_modifier?: number;
	/**
	 * @generated from protobuf field: optional uint32 ability_effect = 4;
	 */
	ability_effect?: number;
}
/**
 * @generated from protobuf message CProtoItemSocket_Autograph
 */
export interface CProtoItemSocket_Autograph {
	/**
	 * @generated from protobuf field: optional CProtoItemSocket socket = 1;
	 */
	socket?: CProtoItemSocket;
	/**
	 * @generated from protobuf field: optional string autograph = 2;
	 */
	autograph?: string;
	/**
	 * @generated from protobuf field: optional uint32 autograph_id = 3;
	 */
	autograph_id?: number;
	/**
	 * @generated from protobuf field: optional uint32 autograph_score = 4;
	 */
	autograph_score?: number;
}
/**
 * @generated from protobuf message CProtoItemSocket_StaticVisuals
 */
export interface CProtoItemSocket_StaticVisuals {
	/**
	 * @generated from protobuf field: optional CProtoItemSocket socket = 1;
	 */
	socket?: CProtoItemSocket;
}
/**
 * @generated from protobuf message CAttribute_String
 */
export interface CAttribute_String {
	/**
	 * @generated from protobuf field: optional string value = 1;
	 */
	value?: string;
}
/**
 * @generated from protobuf message CWorkshop_GetItemDailyRevenue_Request
 */
export interface CWorkshop_GetItemDailyRevenue_Request {
	/**
	 * @generated from protobuf field: optional uint32 appid = 1;
	 */
	appid?: number;
	/**
	 * @generated from protobuf field: optional uint32 item_id = 2;
	 */
	item_id?: number;
	/**
	 * @generated from protobuf field: optional uint32 date_start = 3;
	 */
	date_start?: number;
	/**
	 * @generated from protobuf field: optional uint32 date_end = 4;
	 */
	date_end?: number;
}
/**
 * @generated from protobuf message CWorkshop_GetItemDailyRevenue_Response
 */
export interface CWorkshop_GetItemDailyRevenue_Response {
	/**
	 * @generated from protobuf field: repeated CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue country_revenue = 1;
	 */
	country_revenue: CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue[];
}
/**
 * @generated from protobuf message CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue
 */
export interface CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue {
	/**
	 * @generated from protobuf field: optional string country_code = 1;
	 */
	country_code?: string;
	/**
	 * @generated from protobuf field: optional uint32 date = 2;
	 */
	date?: number;
	/**
	 * @generated from protobuf field: optional int64 revenue_usd = 3;
	 */
	revenue_usd?: bigint;
	/**
	 * @generated from protobuf field: optional int32 units = 4;
	 */
	units?: number;
}
/**
 * @generated from protobuf message CWorkshop_GetPackageDailyRevenue_Request
 */
export interface CWorkshop_GetPackageDailyRevenue_Request {
	/**
	 * @generated from protobuf field: optional uint32 packageid = 1;
	 */
	packageid?: number;
	/**
	 * @generated from protobuf field: optional uint32 date_start = 2;
	 */
	date_start?: number;
	/**
	 * @generated from protobuf field: optional uint32 date_end = 3;
	 */
	date_end?: number;
}
/**
 * @generated from protobuf message CWorkshop_GetPackageDailyRevenue_Response
 */
export interface CWorkshop_GetPackageDailyRevenue_Response {
	/**
	 * @generated from protobuf field: repeated CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue country_revenue = 1;
	 */
	country_revenue: CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue[];
}
/**
 * @generated from protobuf message CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue
 */
export interface CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue {
	/**
	 * @generated from protobuf field: optional string country_code = 1;
	 */
	country_code?: string;
	/**
	 * @generated from protobuf field: optional uint32 date = 2;
	 */
	date?: number;
	/**
	 * @generated from protobuf field: optional int64 revenue_usd = 3;
	 */
	revenue_usd?: bigint;
	/**
	 * @generated from protobuf field: optional int32 units = 4;
	 */
	units?: number;
}
/**
 * @generated from protobuf message CMsgSQLGCToGCGrantBackpackSlots
 */
export interface CMsgSQLGCToGCGrantBackpackSlots {
	/**
	 * @generated from protobuf field: optional uint32 account_id = 1;
	 */
	account_id?: number;
	/**
	 * @generated from protobuf field: optional uint32 add_slots = 2;
	 */
	add_slots?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCLookupAccountName
 */
export interface CMsgClientToGCLookupAccountName {
	/**
	 * @generated from protobuf field: optional uint32 account_id = 1;
	 */
	account_id?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCLookupAccountNameResponse
 */
export interface CMsgClientToGCLookupAccountNameResponse {
	/**
	 * @generated from protobuf field: optional uint32 account_id = 1;
	 */
	account_id?: number;
	/**
	 * @generated from protobuf field: optional string account_name = 2;
	 */
	account_name?: string;
}
/**
 * @generated from protobuf message CMsgClientToGCCreateStaticRecipe
 */
export interface CMsgClientToGCCreateStaticRecipe {
	/**
	 * @generated from protobuf field: repeated CMsgClientToGCCreateStaticRecipe.Item items = 1;
	 */
	items: CMsgClientToGCCreateStaticRecipe_Item[];
	/**
	 * @generated from protobuf field: optional uint32 recipe_def_index = 2;
	 */
	recipe_def_index?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCCreateStaticRecipe.Item
 */
export interface CMsgClientToGCCreateStaticRecipe_Item {
	/**
	 * @generated from protobuf field: optional uint64 item_id = 1;
	 */
	item_id?: bigint;
	/**
	 * @generated from protobuf field: optional uint32 slot_id = 2;
	 */
	slot_id?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCCreateStaticRecipeResponse
 */
export interface CMsgClientToGCCreateStaticRecipeResponse {
	/**
	 * @generated from protobuf field: optional CMsgClientToGCCreateStaticRecipeResponse.EResponse response = 1;
	 */
	response?: CMsgClientToGCCreateStaticRecipeResponse_EResponse;
	/**
	 * @generated from protobuf field: repeated CMsgClientToGCCreateStaticRecipeResponse.OutputItem output_items = 2;
	 */
	output_items: CMsgClientToGCCreateStaticRecipeResponse_OutputItem[];
	/**
	 * @generated from protobuf field: repeated CMsgClientToGCCreateStaticRecipeResponse.InputError input_errors = 3;
	 */
	input_errors: CMsgClientToGCCreateStaticRecipeResponse_InputError[];
	/**
	 * @generated from protobuf field: repeated CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput additional_outputs = 4;
	 */
	additional_outputs: CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput[];
}
/**
 * @generated from protobuf message CMsgClientToGCCreateStaticRecipeResponse.OutputItem
 */
export interface CMsgClientToGCCreateStaticRecipeResponse_OutputItem {
	/**
	 * @generated from protobuf field: optional uint32 def_index = 1;
	 */
	def_index?: number;
	/**
	 * @generated from protobuf field: optional uint64 item_id = 2;
	 */
	item_id?: bigint;
	/**
	 * @generated from protobuf field: optional uint32 slot_id = 3;
	 */
	slot_id?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCCreateStaticRecipeResponse.InputError
 */
export interface CMsgClientToGCCreateStaticRecipeResponse_InputError {
	/**
	 * @generated from protobuf field: optional uint32 slot_id = 1;
	 */
	slot_id?: number;
	/**
	 * @generated from protobuf field: optional CMsgClientToGCCreateStaticRecipeResponse.EResponse error = 2;
	 */
	error?: CMsgClientToGCCreateStaticRecipeResponse_EResponse;
}
/**
 * @generated from protobuf message CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput
 */
export interface CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput {
	/**
	 * @generated from protobuf field: optional uint32 slot_id = 1;
	 */
	slot_id?: number;
	/**
	 * @generated from protobuf field: optional uint64 value = 2;
	 */
	value?: bigint;
}
/**
 * @generated from protobuf enum CMsgClientToGCCreateStaticRecipeResponse.EResponse
 */
export enum CMsgClientToGCCreateStaticRecipeResponse_EResponse {
	/**
	 * @generated from protobuf enum value: eResponse_Success = 0;
	 */
	eResponse_Success = 0,
	/**
	 * @generated from protobuf enum value: eResponse_OfferingDisabled = 1;
	 */
	eResponse_OfferingDisabled = 1,
	/**
	 * @generated from protobuf enum value: eResponse_InvalidItems = 2;
	 */
	eResponse_InvalidItems = 2,
	/**
	 * @generated from protobuf enum value: eResponse_InternalError = 3;
	 */
	eResponse_InternalError = 3,
	/**
	 * @generated from protobuf enum value: eResponse_MissingLeague = 4;
	 */
	eResponse_MissingLeague = 4,
	/**
	 * @generated from protobuf enum value: eResponse_MissingEvent = 5;
	 */
	eResponse_MissingEvent = 5,
}
/**
 * @generated from protobuf message CMsgProcessTransactionOrder
 */
export interface CMsgProcessTransactionOrder {
	/**
	 * @generated from protobuf field: optional uint64 txn_id = 1;
	 */
	txn_id?: bigint;
	/**
	 * @generated from protobuf field: optional uint64 steam_txn_id = 2;
	 */
	steam_txn_id?: bigint;
	/**
	 * @generated from protobuf field: optional uint64 partner_txn_id = 3;
	 */
	partner_txn_id?: bigint;
	/**
	 * @generated from protobuf field: optional fixed64 steam_id = 4;
	 */
	steam_id?: bigint;
	/**
	 * @generated from protobuf field: optional uint32 time_stamp = 5;
	 */
	time_stamp?: number;
	/**
	 * @generated from protobuf field: optional uint64 watermark = 6;
	 */
	watermark?: bigint;
	/**
	 * @generated from protobuf field: optional int32 purchase_report_status = 7;
	 */
	purchase_report_status?: number;
	/**
	 * @generated from protobuf field: optional uint32 currency = 8;
	 */
	currency?: number;
	/**
	 * @generated from protobuf field: repeated CMsgProcessTransactionOrder.Item items = 9;
	 */
	items: CMsgProcessTransactionOrder_Item[];
}
/**
 * @generated from protobuf message CMsgProcessTransactionOrder.Item
 */
export interface CMsgProcessTransactionOrder_Item {
	/**
	 * @generated from protobuf field: optional uint32 item_def_index = 1;
	 */
	item_def_index?: number;
	/**
	 * @generated from protobuf field: optional uint32 item_price = 2;
	 */
	item_price?: number;
	/**
	 * @generated from protobuf field: optional uint32 quantity = 3;
	 */
	quantity?: number;
	/**
	 * @generated from protobuf field: optional string category_desc = 4;
	 */
	category_desc?: string;
	/**
	 * @generated from protobuf field: optional uint32 store_purchase_type = 5;
	 */
	store_purchase_type?: number;
	/**
	 * @generated from protobuf field: optional uint64 source_reference_id = 6;
	 */
	source_reference_id?: bigint;
	/**
	 * @generated from protobuf field: optional int32 parent_stack_index = 7;
	 */
	parent_stack_index?: number;
	/**
	 * @generated from protobuf field: optional bool default_price = 8;
	 */
	default_price?: boolean;
	/**
	 * @generated from protobuf field: optional bool is_user_facing = 9;
	 */
	is_user_facing?: boolean;
	/**
	 * @generated from protobuf field: optional int32 price_index = 11;
	 */
	price_index?: number;
}
/**
 * @generated from protobuf message CMsgGCToGCStoreProcessCDKeyTransaction
 */
export interface CMsgGCToGCStoreProcessCDKeyTransaction {
	/**
	 * @generated from protobuf field: optional CMsgProcessTransactionOrder order = 1;
	 */
	order?: CMsgProcessTransactionOrder;
	/**
	 * @generated from protobuf field: optional uint32 reason_code = 2;
	 */
	reason_code?: number;
	/**
	 * @generated from protobuf field: optional uint32 partner = 3;
	 */
	partner?: number;
}
/**
 * @generated from protobuf message CMsgGCToGCStoreProcessCDKeyTransactionResponse
 */
export interface CMsgGCToGCStoreProcessCDKeyTransactionResponse {
	/**
	 * @generated from protobuf field: optional bool success = 1;
	 */
	success?: boolean;
}
/**
 * @generated from protobuf message CMsgGCToGCStoreProcessSettlement
 */
export interface CMsgGCToGCStoreProcessSettlement {
	/**
	 * @generated from protobuf field: optional CMsgProcessTransactionOrder order = 1;
	 */
	order?: CMsgProcessTransactionOrder;
}
/**
 * @generated from protobuf message CMsgGCToGCStoreProcessSettlementResponse
 */
export interface CMsgGCToGCStoreProcessSettlementResponse {
	/**
	 * @generated from protobuf field: optional bool success = 1;
	 */
	success?: boolean;
}
/**
 * @generated from protobuf message CMsgGCToGCBroadcastConsoleCommand
 */
export interface CMsgGCToGCBroadcastConsoleCommand {
	/**
	 * @generated from protobuf field: optional string con_command = 1;
	 */
	con_command?: string;
	/**
	 * @generated from protobuf field: optional bool report_output = 2;
	 */
	report_output?: boolean;
	/**
	 * @generated from protobuf field: optional int32 sending_gc = 3;
	 */
	sending_gc?: number;
	/**
	 * @generated from protobuf field: optional string output_initiator = 4;
	 */
	output_initiator?: string;
	/**
	 * @generated from protobuf field: optional string sender_source = 5;
	 */
	sender_source?: string;
}
/**
 * @generated from protobuf message CMsgGCToGCConsoleOutput
 */
export interface CMsgGCToGCConsoleOutput {
	/**
	 * @generated from protobuf field: optional string initiator = 1;
	 */
	initiator?: string;
	/**
	 * @generated from protobuf field: optional int32 sending_gc = 2;
	 */
	sending_gc?: number;
	/**
	 * @generated from protobuf field: repeated CMsgGCToGCConsoleOutput.OutputLine msgs = 3;
	 */
	msgs: CMsgGCToGCConsoleOutput_OutputLine[];
	/**
	 * @generated from protobuf field: optional bool is_last_for_source_job = 4;
	 */
	is_last_for_source_job?: boolean;
}
/**
 * @generated from protobuf message CMsgGCToGCConsoleOutput.OutputLine
 */
export interface CMsgGCToGCConsoleOutput_OutputLine {
	/**
	 * @generated from protobuf field: optional string text = 1;
	 */
	text?: string;
	/**
	 * @generated from protobuf field: optional uint32 spew_level = 2;
	 */
	spew_level?: number;
}
/**
 * @generated from protobuf message CMsgItemAges
 */
export interface CMsgItemAges {
	/**
	 * @generated from protobuf field: repeated CMsgItemAges.MaxItemIDTimestamp max_item_id_timestamps = 1;
	 */
	max_item_id_timestamps: CMsgItemAges_MaxItemIDTimestamp[];
}
/**
 * @generated from protobuf message CMsgItemAges.MaxItemIDTimestamp
 */
export interface CMsgItemAges_MaxItemIDTimestamp {
	/**
	 * @generated from protobuf field: optional uint32 timestamp = 1;
	 */
	timestamp?: number;
	/**
	 * @generated from protobuf field: optional uint64 max_item_id = 2;
	 */
	max_item_id?: bigint;
}
/**
 * @generated from protobuf message CMsgGCToGCInternalTestMsg
 */
export interface CMsgGCToGCInternalTestMsg {
	/**
	 * @generated from protobuf field: optional int32 sending_gc = 1;
	 */
	sending_gc?: number;
	/**
	 * @generated from protobuf field: optional fixed64 sender_id = 2;
	 */
	sender_id?: bigint;
	/**
	 * @generated from protobuf field: optional uint32 context = 3;
	 */
	context?: number;
	/**
	 * @generated from protobuf field: optional uint32 message_id = 4;
	 */
	message_id?: number;
	/**
	 * @generated from protobuf field: optional bytes message_body = 5;
	 */
	message_body?: Uint8Array;
	/**
	 * @generated from protobuf field: optional fixed64 job_id_source = 6;
	 */
	job_id_source?: bigint;
	/**
	 * @generated from protobuf field: optional fixed64 job_id_target = 7;
	 */
	job_id_target?: bigint;
}
/**
 * @generated from protobuf message CMsgGCToGCClientServerVersionsUpdated
 */
export interface CMsgGCToGCClientServerVersionsUpdated {
	/**
	 * @generated from protobuf field: optional uint32 client_min_allowed_version = 1;
	 */
	client_min_allowed_version?: number;
	/**
	 * @generated from protobuf field: optional uint32 client_active_version = 2;
	 */
	client_active_version?: number;
	/**
	 * @generated from protobuf field: optional uint32 server_active_version = 3;
	 */
	server_active_version?: number;
	/**
	 * @generated from protobuf field: optional uint32 server_deployed_version = 4;
	 */
	server_deployed_version?: number;
	/**
	 * @generated from protobuf field: optional uint32 what_changed = 5;
	 */
	what_changed?: number;
}
/**
 * @generated from protobuf message CMsgGCToGCBroadcastMessageFromSub
 */
export interface CMsgGCToGCBroadcastMessageFromSub {
	/**
	 * @generated from protobuf field: optional uint32 msg_id = 1;
	 */
	msg_id?: number;
	/**
	 * @generated from protobuf field: optional bytes serialized_msg = 2;
	 */
	serialized_msg?: Uint8Array;
	/**
	 * @generated from protobuf field: repeated uint32 account_id_list = 3 [packed = true];
	 */
	account_id_list: number[];
	/**
	 * @generated from protobuf field: repeated fixed64 steam_id_list = 4 [packed = true];
	 */
	steam_id_list: bigint[];
}
/**
 * @generated from protobuf message CMsgGCToClientCurrencyPricePoints
 */
export interface CMsgGCToClientCurrencyPricePoints {
	/**
	 * @generated from protobuf field: repeated uint64 price_key = 1 [packed = true];
	 */
	price_key: bigint[];
	/**
	 * @generated from protobuf field: repeated CMsgGCToClientCurrencyPricePoints.Currency currencies = 2;
	 */
	currencies: CMsgGCToClientCurrencyPricePoints_Currency[];
}
/**
 * @generated from protobuf message CMsgGCToClientCurrencyPricePoints.Currency
 */
export interface CMsgGCToClientCurrencyPricePoints_Currency {
	/**
	 * @generated from protobuf field: optional uint32 currency_id = 1;
	 */
	currency_id?: number;
	/**
	 * @generated from protobuf field: repeated uint64 currency_price = 2 [packed = true];
	 */
	currency_price: bigint[];
}
/**
 * @generated from protobuf message CMsgBannedWordList
 */
export interface CMsgBannedWordList {
	/**
	 * @generated from protobuf field: optional uint32 version = 1;
	 */
	version?: number;
	/**
	 * @generated from protobuf field: repeated string banned_words = 2;
	 */
	banned_words: string[];
}
/**
 * @generated from protobuf message CMsgGCToGCFlushSteamInventoryCache
 */
export interface CMsgGCToGCFlushSteamInventoryCache {
	/**
	 * @generated from protobuf field: repeated CMsgGCToGCFlushSteamInventoryCache.Key keys = 1;
	 */
	keys: CMsgGCToGCFlushSteamInventoryCache_Key[];
}
/**
 * @generated from protobuf message CMsgGCToGCFlushSteamInventoryCache.Key
 */
export interface CMsgGCToGCFlushSteamInventoryCache_Key {
	/**
	 * @generated from protobuf field: optional uint64 steamid = 1;
	 */
	steamid?: bigint;
	/**
	 * @generated from protobuf field: optional uint64 contextid = 2;
	 */
	contextid?: bigint;
}
/**
 * @generated from protobuf message CMsgGCToGCUpdateSubscriptionItems
 */
export interface CMsgGCToGCUpdateSubscriptionItems {
	/**
	 * @generated from protobuf field: optional uint32 account_id = 1;
	 */
	account_id?: number;
	/**
	 * @generated from protobuf field: optional bool always_notify = 2;
	 */
	always_notify?: boolean;
}
/**
 * @generated from protobuf message CMsgGCToGCSelfPing
 */
export interface CMsgGCToGCSelfPing {
	/**
	 * @generated from protobuf field: optional uint32 sample_id = 1;
	 */
	sample_id?: number;
}
/**
 * @generated from protobuf message CMsgGCToGCGetInfuxIntervalStats
 */
export interface CMsgGCToGCGetInfuxIntervalStats {}
/**
 * @generated from protobuf message CMsgGCToGCGetInfuxIntervalStatsResponse
 */
export interface CMsgGCToGCGetInfuxIntervalStatsResponse {
	/**
	 * @generated from protobuf field: repeated fixed32 stat_ids = 1 [packed = true];
	 */
	stat_ids: number[];
	/**
	 * @generated from protobuf field: repeated uint64 stat_total = 2 [packed = true];
	 */
	stat_total: bigint[];
	/**
	 * @generated from protobuf field: repeated uint32 stat_samples = 3 [packed = true];
	 */
	stat_samples: number[];
	/**
	 * @generated from protobuf field: repeated uint32 stat_max = 4 [packed = true];
	 */
	stat_max: number[];
	/**
	 * @generated from protobuf field: optional uint32 sample_duration_ms = 5;
	 */
	sample_duration_ms?: number;
}
/**
 * @generated from protobuf message CMsgGCToGCPurchaseSucceeded
 */
export interface CMsgGCToGCPurchaseSucceeded {}
/**
 * @generated from protobuf message CMsgClientToGCGetLimitedItemPurchaseQuantity
 */
export interface CMsgClientToGCGetLimitedItemPurchaseQuantity {
	/**
	 * @generated from protobuf field: optional uint32 item_def = 1;
	 */
	item_def?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCGetLimitedItemPurchaseQuantityResponse
 */
export interface CMsgClientToGCGetLimitedItemPurchaseQuantityResponse {
	/**
	 * @generated from protobuf field: optional CMsgClientToGCGetLimitedItemPurchaseQuantityResponse.EResponse result = 1;
	 */
	result?: CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse;
	/**
	 * @generated from protobuf field: optional uint32 quantity_purchased = 2;
	 */
	quantity_purchased?: number;
}
/**
 * @generated from protobuf enum CMsgClientToGCGetLimitedItemPurchaseQuantityResponse.EResponse
 */
export enum CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse {
	/**
	 * @generated from protobuf enum value: k_eInternalError = 0;
	 */
	k_eInternalError = 0,
	/**
	 * @generated from protobuf enum value: k_eSuccess = 1;
	 */
	k_eSuccess = 1,
	/**
	 * @generated from protobuf enum value: k_eTooBusy = 2;
	 */
	k_eTooBusy = 2,
	/**
	 * @generated from protobuf enum value: k_eDisabled = 3;
	 */
	k_eDisabled = 3,
	/**
	 * @generated from protobuf enum value: k_eTimeout = 4;
	 */
	k_eTimeout = 4,
	/**
	 * @generated from protobuf enum value: k_eInvalidItemDef = 5;
	 */
	k_eInvalidItemDef = 5,
	/**
	 * @generated from protobuf enum value: k_eItemDefNotLimited = 6;
	 */
	k_eItemDefNotLimited = 6,
}
/**
 * @generated from protobuf message CMsgClientToGCGetInFlightItemCharges
 */
export interface CMsgClientToGCGetInFlightItemCharges {
	/**
	 * @generated from protobuf field: optional uint32 item_def = 1;
	 */
	item_def?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCGetInFlightItemChargesResponse
 */
export interface CMsgClientToGCGetInFlightItemChargesResponse {
	/**
	 * @generated from protobuf field: optional CMsgClientToGCGetInFlightItemChargesResponse.EResponse result = 1;
	 */
	result?: CMsgClientToGCGetInFlightItemChargesResponse_EResponse;
	/**
	 * @generated from protobuf field: optional uint32 charges_in_flight = 2;
	 */
	charges_in_flight?: number;
}
/**
 * @generated from protobuf enum CMsgClientToGCGetInFlightItemChargesResponse.EResponse
 */
export enum CMsgClientToGCGetInFlightItemChargesResponse_EResponse {
	/**
	 * @generated from protobuf enum value: k_eInternalError = 0;
	 */
	k_eInternalError = 0,
	/**
	 * @generated from protobuf enum value: k_eSuccess = 1;
	 */
	k_eSuccess = 1,
	/**
	 * @generated from protobuf enum value: k_eTooBusy = 2;
	 */
	k_eTooBusy = 2,
	/**
	 * @generated from protobuf enum value: k_eDisabled = 3;
	 */
	k_eDisabled = 3,
	/**
	 * @generated from protobuf enum value: k_eTimeout = 4;
	 */
	k_eTimeout = 4,
	/**
	 * @generated from protobuf enum value: k_eInvalidItemDef = 5;
	 */
	k_eInvalidItemDef = 5,
}
/**
 * @generated from protobuf message CMsgClientToGCPurchaseChargeCostItems
 */
export interface CMsgClientToGCPurchaseChargeCostItems {
	/**
	 * @generated from protobuf field: repeated CMsgClientToGCPurchaseChargeCostItems.Item items = 1;
	 */
	items: CMsgClientToGCPurchaseChargeCostItems_Item[];
	/**
	 * @generated from protobuf field: optional uint32 currency = 2;
	 */
	currency?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCPurchaseChargeCostItems.Item
 */
export interface CMsgClientToGCPurchaseChargeCostItems_Item {
	/**
	 * @generated from protobuf field: optional uint32 item_def_index = 1;
	 */
	item_def_index?: number;
	/**
	 * @generated from protobuf field: optional uint32 quantity = 2;
	 */
	quantity?: number;
	/**
	 * @generated from protobuf field: optional uint64 source_reference_id = 3;
	 */
	source_reference_id?: bigint;
	/**
	 * @generated from protobuf field: optional int32 price_index = 4;
	 */
	price_index?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCPurchaseChargeCostItemsResponse
 */
export interface CMsgClientToGCPurchaseChargeCostItemsResponse {
	/**
	 * @generated from protobuf field: optional CMsgClientToGCPurchaseChargeCostItemsResponse.EResponse result = 1;
	 */
	result?: CMsgClientToGCPurchaseChargeCostItemsResponse_EResponse;
	/**
	 * @generated from protobuf field: repeated uint64 item_ids = 2;
	 */
	item_ids: bigint[];
}
/**
 * @generated from protobuf enum CMsgClientToGCPurchaseChargeCostItemsResponse.EResponse
 */
export enum CMsgClientToGCPurchaseChargeCostItemsResponse_EResponse {
	/**
	 * @generated from protobuf enum value: k_eInternalError = 0;
	 */
	k_eInternalError = 0,
	/**
	 * @generated from protobuf enum value: k_eSuccess = 1;
	 */
	k_eSuccess = 1,
	/**
	 * @generated from protobuf enum value: k_eTooBusy = 2;
	 */
	k_eTooBusy = 2,
	/**
	 * @generated from protobuf enum value: k_eDisabled = 3;
	 */
	k_eDisabled = 3,
	/**
	 * @generated from protobuf enum value: k_eTimeout = 4;
	 */
	k_eTimeout = 4,
	/**
	 * @generated from protobuf enum value: k_eInvalidParam = 5;
	 */
	k_eInvalidParam = 5,
	/**
	 * @generated from protobuf enum value: k_eInvalidPrice = 6;
	 */
	k_eInvalidPrice = 6,
	/**
	 * @generated from protobuf enum value: k_eInsufficientCharges = 7;
	 */
	k_eInsufficientCharges = 7,
	/**
	 * @generated from protobuf enum value: k_eLimitedItem = 8;
	 */
	k_eLimitedItem = 8,
	/**
	 * @generated from protobuf enum value: k_eMissingPrereq = 10;
	 */
	k_eMissingPrereq = 10,
}
/**
 * @generated from protobuf message CMsgGCToClientInFlightChargesUpdated
 */
export interface CMsgGCToClientInFlightChargesUpdated {
	/**
	 * @generated from protobuf field: repeated CMsgGCToClientInFlightChargesUpdated.ItemCharges in_flight_charges = 2;
	 */
	in_flight_charges: CMsgGCToClientInFlightChargesUpdated_ItemCharges[];
}
/**
 * @generated from protobuf message CMsgGCToClientInFlightChargesUpdated.ItemCharges
 */
export interface CMsgGCToClientInFlightChargesUpdated_ItemCharges {
	/**
	 * @generated from protobuf field: optional uint32 item_def = 1;
	 */
	item_def?: number;
	/**
	 * @generated from protobuf field: optional uint32 charges_in_flight = 2;
	 */
	charges_in_flight?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCCancelUnfinalizedTransactions
 */
export interface CMsgClientToGCCancelUnfinalizedTransactions {
	/**
	 * @generated from protobuf field: optional uint32 unused = 1;
	 */
	unused?: number;
}
/**
 * @generated from protobuf message CMsgClientToGCCancelUnfinalizedTransactionsResponse
 */
export interface CMsgClientToGCCancelUnfinalizedTransactionsResponse {
	/**
	 * @generated from protobuf field: optional uint32 result = 1;
	 */
	result?: number;
}
/**
 * @generated from protobuf message CMsgGCToGCUpdateWelcomeMsg
 */
export interface CMsgGCToGCUpdateWelcomeMsg {
	/**
	 * @generated from protobuf field: optional bool server = 1;
	 */
	server?: boolean;
	/**
	 * @generated from protobuf field: optional CExtraMsgBlock new_msg = 2;
	 */
	new_msg?: CExtraMsgBlock;
	/**
	 * @generated from protobuf field: optional bool broadcast = 3;
	 */
	broadcast?: boolean;
}
/**
 * @generated from protobuf enum EGCItemMsg
 */
export enum EGCItemMsg {
	/**
	 * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
	 */
	UNSPECIFIED$ = 0,
	/**
	 * @generated from protobuf enum value: k_EMsgGCBase = 1000;
	 */
	k_EMsgGCBase = 1000,
	/**
	 * @generated from protobuf enum value: k_EMsgGCSetItemPosition = 1001;
	 */
	k_EMsgGCSetItemPosition = 1001,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCPackBundle = 1002;
	 */
	k_EMsgClientToGCPackBundle = 1002,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCPackBundleResponse = 1003;
	 */
	k_EMsgClientToGCPackBundleResponse = 1003,
	/**
	 * @generated from protobuf enum value: k_EMsgGCDelete = 1004;
	 */
	k_EMsgGCDelete = 1004,
	/**
	 * @generated from protobuf enum value: k_EMsgGCVerifyCacheSubscription = 1005;
	 */
	k_EMsgGCVerifyCacheSubscription = 1005,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCNameItem = 1006;
	 */
	k_EMsgClientToGCNameItem = 1006,
	/**
	 * @generated from protobuf enum value: k_EMsgGCPaintItem = 1009;
	 */
	k_EMsgGCPaintItem = 1009,
	/**
	 * @generated from protobuf enum value: k_EMsgGCPaintItemResponse = 1010;
	 */
	k_EMsgGCPaintItemResponse = 1010,
	/**
	 * @generated from protobuf enum value: k_EMsgGCNameBaseItem = 1019;
	 */
	k_EMsgGCNameBaseItem = 1019,
	/**
	 * @generated from protobuf enum value: k_EMsgGCNameBaseItemResponse = 1020;
	 */
	k_EMsgGCNameBaseItemResponse = 1020,
	/**
	 * @generated from protobuf enum value: k_EMsgGCUseItemRequest = 1025;
	 */
	k_EMsgGCUseItemRequest = 1025,
	/**
	 * @generated from protobuf enum value: k_EMsgGCUseItemResponse = 1026;
	 */
	k_EMsgGCUseItemResponse = 1026,
	/**
	 * @generated from protobuf enum value: k_EMsgGCGiftedItems = 1027;
	 */
	k_EMsgGCGiftedItems = 1027,
	/**
	 * @generated from protobuf enum value: k_EMsgGCUnwrapGiftRequest = 1037;
	 */
	k_EMsgGCUnwrapGiftRequest = 1037,
	/**
	 * @generated from protobuf enum value: k_EMsgGCUnwrapGiftResponse = 1038;
	 */
	k_EMsgGCUnwrapGiftResponse = 1038,
	/**
	 * @generated from protobuf enum value: k_EMsgGCSortItems = 1041;
	 */
	k_EMsgGCSortItems = 1041,
	/**
	 * @generated from protobuf enum value: k_EMsgGCBackpackSortFinished = 1058;
	 */
	k_EMsgGCBackpackSortFinished = 1058,
	/**
	 * @generated from protobuf enum value: k_EMsgGCAdjustItemEquippedState = 1059;
	 */
	k_EMsgGCAdjustItemEquippedState = 1059,
	/**
	 * @generated from protobuf enum value: k_EMsgGCItemAcknowledged = 1062;
	 */
	k_EMsgGCItemAcknowledged = 1062,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCNameItemResponse = 1068;
	 */
	k_EMsgClientToGCNameItemResponse = 1068,
	/**
	 * @generated from protobuf enum value: k_EMsgGCApplyStrangePart = 1073;
	 */
	k_EMsgGCApplyStrangePart = 1073,
	/**
	 * @generated from protobuf enum value: k_EMsgGCApplyPennantUpgrade = 1076;
	 */
	k_EMsgGCApplyPennantUpgrade = 1076,
	/**
	 * @generated from protobuf enum value: k_EMsgGCSetItemPositions = 1077;
	 */
	k_EMsgGCSetItemPositions = 1077,
	/**
	 * @generated from protobuf enum value: k_EMsgGCApplyEggEssence = 1078;
	 */
	k_EMsgGCApplyEggEssence = 1078,
	/**
	 * @generated from protobuf enum value: k_EMsgGCNameEggEssenceResponse = 1079;
	 */
	k_EMsgGCNameEggEssenceResponse = 1079,
	/**
	 * @generated from protobuf enum value: k_EMsgGCExtractGems = 1086;
	 */
	k_EMsgGCExtractGems = 1086,
	/**
	 * @generated from protobuf enum value: k_EMsgGCAddSocket = 1087;
	 */
	k_EMsgGCAddSocket = 1087,
	/**
	 * @generated from protobuf enum value: k_EMsgGCAddItemToSocket = 1088;
	 */
	k_EMsgGCAddItemToSocket = 1088,
	/**
	 * @generated from protobuf enum value: k_EMsgGCAddItemToSocketResponse = 1089;
	 */
	k_EMsgGCAddItemToSocketResponse = 1089,
	/**
	 * @generated from protobuf enum value: k_EMsgGCAddSocketResponse = 1090;
	 */
	k_EMsgGCAddSocketResponse = 1090,
	/**
	 * @generated from protobuf enum value: k_EMsgGCResetStrangeGemCount = 1091;
	 */
	k_EMsgGCResetStrangeGemCount = 1091,
	/**
	 * @generated from protobuf enum value: k_EMsgGCRequestCrateItems = 1092;
	 */
	k_EMsgGCRequestCrateItems = 1092,
	/**
	 * @generated from protobuf enum value: k_EMsgGCRequestCrateItemsResponse = 1093;
	 */
	k_EMsgGCRequestCrateItemsResponse = 1093,
	/**
	 * @generated from protobuf enum value: k_EMsgGCExtractGemsResponse = 1094;
	 */
	k_EMsgGCExtractGemsResponse = 1094,
	/**
	 * @generated from protobuf enum value: k_EMsgGCResetStrangeGemCountResponse = 1095;
	 */
	k_EMsgGCResetStrangeGemCountResponse = 1095,
	/**
	 * @generated from protobuf enum value: k_EMsgGCServerUseItemRequest = 1103;
	 */
	k_EMsgGCServerUseItemRequest = 1103,
	/**
	 * @generated from protobuf enum value: k_EMsgGCAddGiftItem = 1104;
	 */
	k_EMsgGCAddGiftItem = 1104,
	/**
	 * @generated from protobuf enum value: k_EMsgSQLGCToGCRevokeUntrustedGift = 1105;
	 */
	k_EMsgSQLGCToGCRevokeUntrustedGift = 1105,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCRemoveItemGifterAttributes = 1109;
	 */
	k_EMsgClientToGCRemoveItemGifterAttributes = 1109,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCRemoveItemName = 1110;
	 */
	k_EMsgClientToGCRemoveItemName = 1110,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCRemoveItemDescription = 1111;
	 */
	k_EMsgClientToGCRemoveItemDescription = 1111,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCRemoveItemAttributeResponse = 1112;
	 */
	k_EMsgClientToGCRemoveItemAttributeResponse = 1112,
	/**
	 * @generated from protobuf enum value: k_EMsgGCDev_NewItemRequest = 2001;
	 */
	k_EMsgGCDev_NewItemRequest = 2001,
	/**
	 * @generated from protobuf enum value: k_EMsgGCDev_NewItemRequestResponse = 2002;
	 */
	k_EMsgGCDev_NewItemRequestResponse = 2002,
	/**
	 * @generated from protobuf enum value: k_EMsgGCDev_UnlockAllItemStylesRequest = 2003;
	 */
	k_EMsgGCDev_UnlockAllItemStylesRequest = 2003,
	/**
	 * @generated from protobuf enum value: k_EMsgGCDev_UnlockAllItemStylesResponse = 2004;
	 */
	k_EMsgGCDev_UnlockAllItemStylesResponse = 2004,
	/**
	 * @generated from protobuf enum value: k_EMsgGCStorePurchaseFinalize = 2504;
	 */
	k_EMsgGCStorePurchaseFinalize = 2504,
	/**
	 * @generated from protobuf enum value: k_EMsgGCStorePurchaseFinalizeResponse = 2505;
	 */
	k_EMsgGCStorePurchaseFinalizeResponse = 2505,
	/**
	 * @generated from protobuf enum value: k_EMsgGCStorePurchaseCancel = 2506;
	 */
	k_EMsgGCStorePurchaseCancel = 2506,
	/**
	 * @generated from protobuf enum value: k_EMsgGCStorePurchaseCancelResponse = 2507;
	 */
	k_EMsgGCStorePurchaseCancelResponse = 2507,
	/**
	 * @generated from protobuf enum value: k_EMsgGCStorePurchaseInit = 2510;
	 */
	k_EMsgGCStorePurchaseInit = 2510,
	/**
	 * @generated from protobuf enum value: k_EMsgGCStorePurchaseInitResponse = 2511;
	 */
	k_EMsgGCStorePurchaseInitResponse = 2511,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCBannedWordListUpdated = 2515;
	 */
	k_EMsgGCToGCBannedWordListUpdated = 2515,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCDirtySDOCache = 2516;
	 */
	k_EMsgGCToGCDirtySDOCache = 2516,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCUpdateSQLKeyValue = 2518;
	 */
	k_EMsgGCToGCUpdateSQLKeyValue = 2518,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCBroadcastConsoleCommand = 2521;
	 */
	k_EMsgGCToGCBroadcastConsoleCommand = 2521,
	/**
	 * @generated from protobuf enum value: k_EMsgGCServerVersionUpdated = 2522;
	 */
	k_EMsgGCServerVersionUpdated = 2522,
	/**
	 * @generated from protobuf enum value: k_EMsgGCApplyAutograph = 2523;
	 */
	k_EMsgGCApplyAutograph = 2523,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCWebAPIAccountChanged = 2524;
	 */
	k_EMsgGCToGCWebAPIAccountChanged = 2524,
	/**
	 * @generated from protobuf enum value: k_EMsgGCClientVersionUpdated = 2528;
	 */
	k_EMsgGCClientVersionUpdated = 2528,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCUpdateWelcomeMsg = 2529;
	 */
	k_EMsgGCToGCUpdateWelcomeMsg = 2529,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCPlayerStrangeCountAdjustments = 2535;
	 */
	k_EMsgGCToGCPlayerStrangeCountAdjustments = 2535,
	/**
	 * @generated from protobuf enum value: k_EMsgGCRequestStoreSalesData = 2536;
	 */
	k_EMsgGCRequestStoreSalesData = 2536,
	/**
	 * @generated from protobuf enum value: k_EMsgGCRequestStoreSalesDataResponse = 2537;
	 */
	k_EMsgGCRequestStoreSalesDataResponse = 2537,
	/**
	 * @generated from protobuf enum value: k_EMsgGCRequestStoreSalesDataUpToDateResponse = 2538;
	 */
	k_EMsgGCRequestStoreSalesDataUpToDateResponse = 2538,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCPingRequest = 2539;
	 */
	k_EMsgGCToGCPingRequest = 2539,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCPingResponse = 2540;
	 */
	k_EMsgGCToGCPingResponse = 2540,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCGetUserSessionServer = 2541;
	 */
	k_EMsgGCToGCGetUserSessionServer = 2541,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCGetUserSessionServerResponse = 2542;
	 */
	k_EMsgGCToGCGetUserSessionServerResponse = 2542,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCGetUserServerMembers = 2543;
	 */
	k_EMsgGCToGCGetUserServerMembers = 2543,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCGetUserServerMembersResponse = 2544;
	 */
	k_EMsgGCToGCGetUserServerMembersResponse = 2544,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCCanUseDropRateBonus = 2547;
	 */
	k_EMsgGCToGCCanUseDropRateBonus = 2547,
	/**
	 * @generated from protobuf enum value: k_EMsgSQLAddDropRateBonus = 2548;
	 */
	k_EMsgSQLAddDropRateBonus = 2548,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCRefreshSOCache = 2549;
	 */
	k_EMsgGCToGCRefreshSOCache = 2549,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCGrantAccountRolledItems = 2554;
	 */
	k_EMsgGCToGCGrantAccountRolledItems = 2554,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCGrantSelfMadeItemToAccount = 2555;
	 */
	k_EMsgGCToGCGrantSelfMadeItemToAccount = 2555,
	/**
	 * @generated from protobuf enum value: k_EMsgGCStatueCraft = 2561;
	 */
	k_EMsgGCStatueCraft = 2561,
	/**
	 * @generated from protobuf enum value: k_EMsgGCRedeemCode = 2562;
	 */
	k_EMsgGCRedeemCode = 2562,
	/**
	 * @generated from protobuf enum value: k_EMsgGCRedeemCodeResponse = 2563;
	 */
	k_EMsgGCRedeemCodeResponse = 2563,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCItemConsumptionRollback = 2564;
	 */
	k_EMsgGCToGCItemConsumptionRollback = 2564,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCWrapAndDeliverGift = 2565;
	 */
	k_EMsgClientToGCWrapAndDeliverGift = 2565,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCWrapAndDeliverGiftResponse = 2566;
	 */
	k_EMsgClientToGCWrapAndDeliverGiftResponse = 2566,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCUnpackBundleResponse = 2567;
	 */
	k_EMsgClientToGCUnpackBundleResponse = 2567,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToClientStoreTransactionCompleted = 2568;
	 */
	k_EMsgGCToClientStoreTransactionCompleted = 2568,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCEquipItems = 2569;
	 */
	k_EMsgClientToGCEquipItems = 2569,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCEquipItemsResponse = 2570;
	 */
	k_EMsgClientToGCEquipItemsResponse = 2570,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCUnlockItemStyle = 2571;
	 */
	k_EMsgClientToGCUnlockItemStyle = 2571,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCUnlockItemStyleResponse = 2572;
	 */
	k_EMsgClientToGCUnlockItemStyleResponse = 2572,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCSetItemInventoryCategory = 2573;
	 */
	k_EMsgClientToGCSetItemInventoryCategory = 2573,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCUnlockCrate = 2574;
	 */
	k_EMsgClientToGCUnlockCrate = 2574,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCUnlockCrateResponse = 2575;
	 */
	k_EMsgClientToGCUnlockCrateResponse = 2575,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCUnpackBundle = 2576;
	 */
	k_EMsgClientToGCUnpackBundle = 2576,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCSetItemStyle = 2577;
	 */
	k_EMsgClientToGCSetItemStyle = 2577,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCSetItemStyleResponse = 2578;
	 */
	k_EMsgClientToGCSetItemStyleResponse = 2578,
	/**
	 * @generated from protobuf enum value: k_EMsgSQLGCToGCGrantBackpackSlots = 2580;
	 */
	k_EMsgSQLGCToGCGrantBackpackSlots = 2580,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCLookupAccountName = 2581;
	 */
	k_EMsgClientToGCLookupAccountName = 2581,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCLookupAccountNameResponse = 2582;
	 */
	k_EMsgClientToGCLookupAccountNameResponse = 2582,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCCreateStaticRecipe = 2584;
	 */
	k_EMsgClientToGCCreateStaticRecipe = 2584,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCCreateStaticRecipeResponse = 2585;
	 */
	k_EMsgClientToGCCreateStaticRecipeResponse = 2585,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCStoreProcessCDKeyTransaction = 2586;
	 */
	k_EMsgGCToGCStoreProcessCDKeyTransaction = 2586,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCStoreProcessCDKeyTransactionResponse = 2587;
	 */
	k_EMsgGCToGCStoreProcessCDKeyTransactionResponse = 2587,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCStoreProcessSettlement = 2588;
	 */
	k_EMsgGCToGCStoreProcessSettlement = 2588,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCStoreProcessSettlementResponse = 2589;
	 */
	k_EMsgGCToGCStoreProcessSettlementResponse = 2589,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCConsoleOutput = 2590;
	 */
	k_EMsgGCToGCConsoleOutput = 2590,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToClientItemAges = 2591;
	 */
	k_EMsgGCToClientItemAges = 2591,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCInternalTestMsg = 2592;
	 */
	k_EMsgGCToGCInternalTestMsg = 2592,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCClientServerVersionsUpdated = 2593;
	 */
	k_EMsgGCToGCClientServerVersionsUpdated = 2593,
	/**
	 * @generated from protobuf enum value: k_EMsgGCUseMultipleItemsRequest = 2594;
	 */
	k_EMsgGCUseMultipleItemsRequest = 2594,
	/**
	 * @generated from protobuf enum value: k_EMsgGCGetAccountSubscriptionItem = 2595;
	 */
	k_EMsgGCGetAccountSubscriptionItem = 2595,
	/**
	 * @generated from protobuf enum value: k_EMsgGCGetAccountSubscriptionItemResponse = 2596;
	 */
	k_EMsgGCGetAccountSubscriptionItemResponse = 2596,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCBroadcastMessageFromSub = 2598;
	 */
	k_EMsgGCToGCBroadcastMessageFromSub = 2598,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToClientCurrencyPricePoints = 2599;
	 */
	k_EMsgGCToClientCurrencyPricePoints = 2599,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCAddSubscriptionTime = 2600;
	 */
	k_EMsgGCToGCAddSubscriptionTime = 2600,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCFlushSteamInventoryCache = 2601;
	 */
	k_EMsgGCToGCFlushSteamInventoryCache = 2601,
	/**
	 * @generated from protobuf enum value: k_EMsgGCRequestCrateEscalationLevel = 2602;
	 */
	k_EMsgGCRequestCrateEscalationLevel = 2602,
	/**
	 * @generated from protobuf enum value: k_EMsgGCRequestCrateEscalationLevelResponse = 2603;
	 */
	k_EMsgGCRequestCrateEscalationLevelResponse = 2603,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCUpdateSubscriptionItems = 2604;
	 */
	k_EMsgGCToGCUpdateSubscriptionItems = 2604,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCSelfPing = 2605;
	 */
	k_EMsgGCToGCSelfPing = 2605,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCGetInfuxIntervalStats = 2606;
	 */
	k_EMsgGCToGCGetInfuxIntervalStats = 2606,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCGetInfuxIntervalStatsResponse = 2607;
	 */
	k_EMsgGCToGCGetInfuxIntervalStatsResponse = 2607,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCPurchaseSucceeded = 2608;
	 */
	k_EMsgGCToGCPurchaseSucceeded = 2608,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCGetLimitedItemPurchaseQuantity = 2609;
	 */
	k_EMsgClientToGCGetLimitedItemPurchaseQuantity = 2609,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCGetLimitedItemPurchaseQuantityResponse = 2610;
	 */
	k_EMsgClientToGCGetLimitedItemPurchaseQuantityResponse = 2610,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToGCBetaDeleteItems = 2611;
	 */
	k_EMsgGCToGCBetaDeleteItems = 2611,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCGetInFlightItemCharges = 2612;
	 */
	k_EMsgClientToGCGetInFlightItemCharges = 2612,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCGetInFlightItemChargesResponse = 2613;
	 */
	k_EMsgClientToGCGetInFlightItemChargesResponse = 2613,
	/**
	 * @generated from protobuf enum value: k_EMsgGCToClientInFlightChargesUpdated = 2614;
	 */
	k_EMsgGCToClientInFlightChargesUpdated = 2614,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCPurchaseChargeCostItems = 2615;
	 */
	k_EMsgClientToGCPurchaseChargeCostItems = 2615,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCPurchaseChargeCostItemsResponse = 2616;
	 */
	k_EMsgClientToGCPurchaseChargeCostItemsResponse = 2616,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCCancelUnfinalizedTransactions = 2617;
	 */
	k_EMsgClientToGCCancelUnfinalizedTransactions = 2617,
	/**
	 * @generated from protobuf enum value: k_EMsgClientToGCCancelUnfinalizedTransactionsResponse = 2618;
	 */
	k_EMsgClientToGCCancelUnfinalizedTransactionsResponse = 2618,
}
/**
 * @generated from protobuf enum EGCMsgInitiateTradeResponse
 */
export enum EGCMsgInitiateTradeResponse {
	/**
	 * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Accepted = 0;
	 */
	k_EGCMsgInitiateTradeResponse_Accepted = 0,
	/**
	 * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Declined = 1;
	 */
	k_EGCMsgInitiateTradeResponse_Declined = 1,
	/**
	 * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_VAC_Banned_Initiator = 2;
	 */
	k_EGCMsgInitiateTradeResponse_VAC_Banned_Initiator = 2,
	/**
	 * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_VAC_Banned_Target = 3;
	 */
	k_EGCMsgInitiateTradeResponse_VAC_Banned_Target = 3,
	/**
	 * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Target_Already_Trading = 4;
	 */
	k_EGCMsgInitiateTradeResponse_Target_Already_Trading = 4,
	/**
	 * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Disabled = 5;
	 */
	k_EGCMsgInitiateTradeResponse_Disabled = 5,
	/**
	 * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_NotLoggedIn = 6;
	 */
	k_EGCMsgInitiateTradeResponse_NotLoggedIn = 6,
	/**
	 * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Cancel = 7;
	 */
	k_EGCMsgInitiateTradeResponse_Cancel = 7,
	/**
	 * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_TooSoon = 8;
	 */
	k_EGCMsgInitiateTradeResponse_TooSoon = 8,
	/**
	 * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_TooSoonPenalty = 9;
	 */
	k_EGCMsgInitiateTradeResponse_TooSoonPenalty = 9,
	/**
	 * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Trade_Banned_Initiator = 10;
	 */
	k_EGCMsgInitiateTradeResponse_Trade_Banned_Initiator = 10,
	/**
	 * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Trade_Banned_Target = 11;
	 */
	k_EGCMsgInitiateTradeResponse_Trade_Banned_Target = 11,
	/**
	 * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Free_Account_Initiator_DEPRECATED = 12;
	 */
	k_EGCMsgInitiateTradeResponse_Free_Account_Initiator_DEPRECATED = 12,
	/**
	 * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Shared_Account_Initiator = 13;
	 */
	k_EGCMsgInitiateTradeResponse_Shared_Account_Initiator = 13,
	/**
	 * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Service_Unavailable = 14;
	 */
	k_EGCMsgInitiateTradeResponse_Service_Unavailable = 14,
	/**
	 * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Target_Blocked = 15;
	 */
	k_EGCMsgInitiateTradeResponse_Target_Blocked = 15,
	/**
	 * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_NeedVerifiedEmail = 16;
	 */
	k_EGCMsgInitiateTradeResponse_NeedVerifiedEmail = 16,
	/**
	 * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_NeedSteamGuard = 17;
	 */
	k_EGCMsgInitiateTradeResponse_NeedSteamGuard = 17,
	/**
	 * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_SteamGuardDuration = 18;
	 */
	k_EGCMsgInitiateTradeResponse_SteamGuardDuration = 18,
	/**
	 * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_TheyCannotTrade = 19;
	 */
	k_EGCMsgInitiateTradeResponse_TheyCannotTrade = 19,
	/**
	 * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Recent_Password_Reset = 20;
	 */
	k_EGCMsgInitiateTradeResponse_Recent_Password_Reset = 20,
	/**
	 * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Using_New_Device = 21;
	 */
	k_EGCMsgInitiateTradeResponse_Using_New_Device = 21,
	/**
	 * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_Sent_Invalid_Cookie = 22;
	 */
	k_EGCMsgInitiateTradeResponse_Sent_Invalid_Cookie = 22,
	/**
	 * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_TooRecentFriend = 23;
	 */
	k_EGCMsgInitiateTradeResponse_TooRecentFriend = 23,
	/**
	 * @generated from protobuf enum value: k_EGCMsgInitiateTradeResponse_WalledFundsNotTrusted = 24;
	 */
	k_EGCMsgInitiateTradeResponse_WalledFundsNotTrusted = 24,
}
// @generated message type with reflection information, may provide speed optimized methods
class CMsgApplyAutograph$Type extends MessageType<CMsgApplyAutograph> {
	constructor() {
		super("CMsgApplyAutograph", [
			{
				no: 1,
				name: "autograph_item_id",
				kind: "scalar",
				localName: "autograph_item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 2,
				name: "item_item_id",
				kind: "scalar",
				localName: "item_item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgApplyAutograph>): CMsgApplyAutograph {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgApplyAutograph>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgApplyAutograph,
	): CMsgApplyAutograph {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint64 autograph_item_id */ 1:
					message.autograph_item_id = reader.uint64().toBigInt();
					break;
				case /* optional uint64 item_item_id */ 2:
					message.item_item_id = reader.uint64().toBigInt();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(message: CMsgApplyAutograph, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
		/* optional uint64 autograph_item_id = 1; */
		if (message.autograph_item_id !== undefined) writer.tag(1, WireType.Varint).uint64(message.autograph_item_id);
		/* optional uint64 item_item_id = 2; */
		if (message.item_item_id !== undefined) writer.tag(2, WireType.Varint).uint64(message.item_item_id);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgApplyAutograph
 */
export const CMsgApplyAutograph = new CMsgApplyAutograph$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgAdjustItemEquippedState$Type extends MessageType<CMsgAdjustItemEquippedState> {
	constructor() {
		super("CMsgAdjustItemEquippedState", [
			{
				no: 1,
				name: "item_id",
				kind: "scalar",
				localName: "item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 2,
				name: "new_class",
				kind: "scalar",
				localName: "new_class",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "new_slot",
				kind: "scalar",
				localName: "new_slot",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 4,
				name: "style_index",
				kind: "scalar",
				localName: "style_index",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgAdjustItemEquippedState>): CMsgAdjustItemEquippedState {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgAdjustItemEquippedState>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgAdjustItemEquippedState,
	): CMsgAdjustItemEquippedState {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint64 item_id */ 1:
					message.item_id = reader.uint64().toBigInt();
					break;
				case /* optional uint32 new_class */ 2:
					message.new_class = reader.uint32();
					break;
				case /* optional uint32 new_slot */ 3:
					message.new_slot = reader.uint32();
					break;
				case /* optional uint32 style_index */ 4:
					message.style_index = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgAdjustItemEquippedState,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint64 item_id = 1; */
		if (message.item_id !== undefined) writer.tag(1, WireType.Varint).uint64(message.item_id);
		/* optional uint32 new_class = 2; */
		if (message.new_class !== undefined) writer.tag(2, WireType.Varint).uint32(message.new_class);
		/* optional uint32 new_slot = 3; */
		if (message.new_slot !== undefined) writer.tag(3, WireType.Varint).uint32(message.new_slot);
		/* optional uint32 style_index = 4; */
		if (message.style_index !== undefined) writer.tag(4, WireType.Varint).uint32(message.style_index);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgAdjustItemEquippedState
 */
export const CMsgAdjustItemEquippedState = new CMsgAdjustItemEquippedState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgEconPlayerStrangeCountAdjustment$Type extends MessageType<CMsgEconPlayerStrangeCountAdjustment> {
	constructor() {
		super("CMsgEconPlayerStrangeCountAdjustment", [
			{
				no: 1,
				name: "account_id",
				kind: "scalar",
				localName: "account_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "strange_count_adjustments",
				kind: "message",
				localName: "strange_count_adjustments",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: () => CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment,
			},
			{
				no: 3,
				name: "turbo_mode",
				kind: "scalar",
				localName: "turbo_mode",
				opt: true,
				T: 8 /*ScalarType.BOOL*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgEconPlayerStrangeCountAdjustment>): CMsgEconPlayerStrangeCountAdjustment {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.strange_count_adjustments = [];
		if (value !== undefined) reflectionMergePartial<CMsgEconPlayerStrangeCountAdjustment>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgEconPlayerStrangeCountAdjustment,
	): CMsgEconPlayerStrangeCountAdjustment {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 account_id */ 1:
					message.account_id = reader.uint32();
					break;
				case /* repeated CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment strange_count_adjustments */ 2:
					message.strange_count_adjustments.push(
						CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
						),
					);
					break;
				case /* optional bool turbo_mode */ 3:
					message.turbo_mode = reader.bool();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgEconPlayerStrangeCountAdjustment,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 account_id = 1; */
		if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
		/* repeated CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment strange_count_adjustments = 2; */
		for (let i = 0; i < message.strange_count_adjustments.length; i++)
			CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment.internalBinaryWrite(
				message.strange_count_adjustments[i],
				writer.tag(2, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* optional bool turbo_mode = 3; */
		if (message.turbo_mode !== undefined) writer.tag(3, WireType.Varint).bool(message.turbo_mode);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgEconPlayerStrangeCountAdjustment
 */
export const CMsgEconPlayerStrangeCountAdjustment = new CMsgEconPlayerStrangeCountAdjustment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment$Type extends MessageType<CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment> {
	constructor() {
		super("CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment", [
			{
				no: 1,
				name: "event_type",
				kind: "scalar",
				localName: "event_type",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "item_id",
				kind: "scalar",
				localName: "item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 3,
				name: "adjustment",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(
		value?: PartialMessage<CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment>,
	): CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined)
			reflectionMergePartial<CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment,
	): CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 event_type */ 1:
					message.event_type = reader.uint32();
					break;
				case /* optional uint64 item_id */ 2:
					message.item_id = reader.uint64().toBigInt();
					break;
				case /* optional uint32 adjustment */ 3:
					message.adjustment = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 event_type = 1; */
		if (message.event_type !== undefined) writer.tag(1, WireType.Varint).uint32(message.event_type);
		/* optional uint64 item_id = 2; */
		if (message.item_id !== undefined) writer.tag(2, WireType.Varint).uint64(message.item_id);
		/* optional uint32 adjustment = 3; */
		if (message.adjustment !== undefined) writer.tag(3, WireType.Varint).uint32(message.adjustment);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment
 */
export const CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment =
	new CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgCraftingResponse$Type extends MessageType<CMsgCraftingResponse> {
	constructor() {
		super("CMsgCraftingResponse", [
			{
				no: 1,
				name: "item_ids",
				kind: "scalar",
				localName: "item_ids",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgCraftingResponse>): CMsgCraftingResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.item_ids = [];
		if (value !== undefined) reflectionMergePartial<CMsgCraftingResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgCraftingResponse,
	): CMsgCraftingResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* repeated uint64 item_ids */ 1:
					if (wireType === WireType.LengthDelimited)
						for (let e = reader.int32() + reader.pos; reader.pos < e; )
							message.item_ids.push(reader.uint64().toBigInt());
					else message.item_ids.push(reader.uint64().toBigInt());
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgCraftingResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* repeated uint64 item_ids = 1; */
		for (let i = 0; i < message.item_ids.length; i++) writer.tag(1, WireType.Varint).uint64(message.item_ids[i]);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgCraftingResponse
 */
export const CMsgCraftingResponse = new CMsgCraftingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCRequestStoreSalesData$Type extends MessageType<CMsgGCRequestStoreSalesData> {
	constructor() {
		super("CMsgGCRequestStoreSalesData", [
			{
				no: 1,
				name: "version",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "currency",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCRequestStoreSalesData>): CMsgGCRequestStoreSalesData {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCRequestStoreSalesData>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCRequestStoreSalesData,
	): CMsgGCRequestStoreSalesData {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 version */ 1:
					message.version = reader.uint32();
					break;
				case /* optional uint32 currency */ 2:
					message.currency = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCRequestStoreSalesData,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 version = 1; */
		if (message.version !== undefined) writer.tag(1, WireType.Varint).uint32(message.version);
		/* optional uint32 currency = 2; */
		if (message.currency !== undefined) writer.tag(2, WireType.Varint).uint32(message.currency);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCRequestStoreSalesData
 */
export const CMsgGCRequestStoreSalesData = new CMsgGCRequestStoreSalesData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCRequestStoreSalesDataResponse$Type extends MessageType<CMsgGCRequestStoreSalesDataResponse> {
	constructor() {
		super("CMsgGCRequestStoreSalesDataResponse", [
			{
				no: 1,
				name: "sale_price",
				kind: "message",
				localName: "sale_price",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: () => CMsgGCRequestStoreSalesDataResponse_Price,
			},
			{
				no: 2,
				name: "version",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "expiration_time",
				kind: "scalar",
				localName: "expiration_time",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCRequestStoreSalesDataResponse>): CMsgGCRequestStoreSalesDataResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.sale_price = [];
		if (value !== undefined) reflectionMergePartial<CMsgGCRequestStoreSalesDataResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCRequestStoreSalesDataResponse,
	): CMsgGCRequestStoreSalesDataResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* repeated CMsgGCRequestStoreSalesDataResponse.Price sale_price */ 1:
					message.sale_price.push(
						CMsgGCRequestStoreSalesDataResponse_Price.internalBinaryRead(reader, reader.uint32(), options),
					);
					break;
				case /* optional uint32 version */ 2:
					message.version = reader.uint32();
					break;
				case /* optional uint32 expiration_time */ 3:
					message.expiration_time = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCRequestStoreSalesDataResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* repeated CMsgGCRequestStoreSalesDataResponse.Price sale_price = 1; */
		for (let i = 0; i < message.sale_price.length; i++)
			CMsgGCRequestStoreSalesDataResponse_Price.internalBinaryWrite(
				message.sale_price[i],
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* optional uint32 version = 2; */
		if (message.version !== undefined) writer.tag(2, WireType.Varint).uint32(message.version);
		/* optional uint32 expiration_time = 3; */
		if (message.expiration_time !== undefined) writer.tag(3, WireType.Varint).uint32(message.expiration_time);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCRequestStoreSalesDataResponse
 */
export const CMsgGCRequestStoreSalesDataResponse = new CMsgGCRequestStoreSalesDataResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCRequestStoreSalesDataResponse_Price$Type extends MessageType<CMsgGCRequestStoreSalesDataResponse_Price> {
	constructor() {
		super("CMsgGCRequestStoreSalesDataResponse.Price", [
			{
				no: 1,
				name: "item_def",
				kind: "scalar",
				localName: "item_def",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "price",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCRequestStoreSalesDataResponse_Price>): CMsgGCRequestStoreSalesDataResponse_Price {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCRequestStoreSalesDataResponse_Price>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCRequestStoreSalesDataResponse_Price,
	): CMsgGCRequestStoreSalesDataResponse_Price {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 item_def */ 1:
					message.item_def = reader.uint32();
					break;
				case /* optional uint32 price */ 2:
					message.price = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCRequestStoreSalesDataResponse_Price,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 item_def = 1; */
		if (message.item_def !== undefined) writer.tag(1, WireType.Varint).uint32(message.item_def);
		/* optional uint32 price = 2; */
		if (message.price !== undefined) writer.tag(2, WireType.Varint).uint32(message.price);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCRequestStoreSalesDataResponse.Price
 */
export const CMsgGCRequestStoreSalesDataResponse_Price = new CMsgGCRequestStoreSalesDataResponse_Price$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCRequestStoreSalesDataUpToDateResponse$Type extends MessageType<CMsgGCRequestStoreSalesDataUpToDateResponse> {
	constructor() {
		super("CMsgGCRequestStoreSalesDataUpToDateResponse", [
			{
				no: 1,
				name: "version",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "expiration_time",
				kind: "scalar",
				localName: "expiration_time",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(
		value?: PartialMessage<CMsgGCRequestStoreSalesDataUpToDateResponse>,
	): CMsgGCRequestStoreSalesDataUpToDateResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCRequestStoreSalesDataUpToDateResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCRequestStoreSalesDataUpToDateResponse,
	): CMsgGCRequestStoreSalesDataUpToDateResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 version */ 1:
					message.version = reader.uint32();
					break;
				case /* optional uint32 expiration_time */ 2:
					message.expiration_time = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCRequestStoreSalesDataUpToDateResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 version = 1; */
		if (message.version !== undefined) writer.tag(1, WireType.Varint).uint32(message.version);
		/* optional uint32 expiration_time = 2; */
		if (message.expiration_time !== undefined) writer.tag(2, WireType.Varint).uint32(message.expiration_time);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCRequestStoreSalesDataUpToDateResponse
 */
export const CMsgGCRequestStoreSalesDataUpToDateResponse = new CMsgGCRequestStoreSalesDataUpToDateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCPingRequest$Type extends MessageType<CMsgGCToGCPingRequest> {
	constructor() {
		super("CMsgGCToGCPingRequest", []);
	}
	create(value?: PartialMessage<CMsgGCToGCPingRequest>): CMsgGCToGCPingRequest {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCPingRequest>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCPingRequest,
	): CMsgGCToGCPingRequest {
		return target ?? this.create();
	}
	internalBinaryWrite(
		message: CMsgGCToGCPingRequest,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCPingRequest
 */
export const CMsgGCToGCPingRequest = new CMsgGCToGCPingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCPingResponse$Type extends MessageType<CMsgGCToGCPingResponse> {
	constructor() {
		super("CMsgGCToGCPingResponse", []);
	}
	create(value?: PartialMessage<CMsgGCToGCPingResponse>): CMsgGCToGCPingResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCPingResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCPingResponse,
	): CMsgGCToGCPingResponse {
		return target ?? this.create();
	}
	internalBinaryWrite(
		message: CMsgGCToGCPingResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCPingResponse
 */
export const CMsgGCToGCPingResponse = new CMsgGCToGCPingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCGetUserSessionServer$Type extends MessageType<CMsgGCToGCGetUserSessionServer> {
	constructor() {
		super("CMsgGCToGCGetUserSessionServer", [
			{
				no: 1,
				name: "account_id",
				kind: "scalar",
				localName: "account_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToGCGetUserSessionServer>): CMsgGCToGCGetUserSessionServer {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCGetUserSessionServer>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCGetUserSessionServer,
	): CMsgGCToGCGetUserSessionServer {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 account_id */ 1:
					message.account_id = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCGetUserSessionServer,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 account_id = 1; */
		if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCGetUserSessionServer
 */
export const CMsgGCToGCGetUserSessionServer = new CMsgGCToGCGetUserSessionServer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCGetUserSessionServerResponse$Type extends MessageType<CMsgGCToGCGetUserSessionServerResponse> {
	constructor() {
		super("CMsgGCToGCGetUserSessionServerResponse", [
			{
				no: 1,
				name: "server_steam_id",
				kind: "scalar",
				localName: "server_steam_id",
				opt: true,
				T: 6 /*ScalarType.FIXED64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 2,
				name: "is_online",
				kind: "scalar",
				localName: "is_online",
				opt: true,
				T: 8 /*ScalarType.BOOL*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToGCGetUserSessionServerResponse>): CMsgGCToGCGetUserSessionServerResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCGetUserSessionServerResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCGetUserSessionServerResponse,
	): CMsgGCToGCGetUserSessionServerResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional fixed64 server_steam_id */ 1:
					message.server_steam_id = reader.fixed64().toBigInt();
					break;
				case /* optional bool is_online */ 2:
					message.is_online = reader.bool();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCGetUserSessionServerResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional fixed64 server_steam_id = 1; */
		if (message.server_steam_id !== undefined) writer.tag(1, WireType.Bit64).fixed64(message.server_steam_id);
		/* optional bool is_online = 2; */
		if (message.is_online !== undefined) writer.tag(2, WireType.Varint).bool(message.is_online);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCGetUserSessionServerResponse
 */
export const CMsgGCToGCGetUserSessionServerResponse = new CMsgGCToGCGetUserSessionServerResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCGetUserServerMembers$Type extends MessageType<CMsgGCToGCGetUserServerMembers> {
	constructor() {
		super("CMsgGCToGCGetUserServerMembers", [
			{
				no: 1,
				name: "account_id",
				kind: "scalar",
				localName: "account_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "max_spectators",
				kind: "scalar",
				localName: "max_spectators",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToGCGetUserServerMembers>): CMsgGCToGCGetUserServerMembers {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCGetUserServerMembers>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCGetUserServerMembers,
	): CMsgGCToGCGetUserServerMembers {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 account_id */ 1:
					message.account_id = reader.uint32();
					break;
				case /* optional uint32 max_spectators */ 2:
					message.max_spectators = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCGetUserServerMembers,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 account_id = 1; */
		if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
		/* optional uint32 max_spectators = 2; */
		if (message.max_spectators !== undefined) writer.tag(2, WireType.Varint).uint32(message.max_spectators);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCGetUserServerMembers
 */
export const CMsgGCToGCGetUserServerMembers = new CMsgGCToGCGetUserServerMembers$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCGetUserServerMembersResponse$Type extends MessageType<CMsgGCToGCGetUserServerMembersResponse> {
	constructor() {
		super("CMsgGCToGCGetUserServerMembersResponse", [
			{
				no: 1,
				name: "member_account_id",
				kind: "scalar",
				localName: "member_account_id",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToGCGetUserServerMembersResponse>): CMsgGCToGCGetUserServerMembersResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.member_account_id = [];
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCGetUserServerMembersResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCGetUserServerMembersResponse,
	): CMsgGCToGCGetUserServerMembersResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* repeated uint32 member_account_id */ 1:
					if (wireType === WireType.LengthDelimited)
						for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.member_account_id.push(reader.uint32());
					else message.member_account_id.push(reader.uint32());
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCGetUserServerMembersResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* repeated uint32 member_account_id = 1; */
		for (let i = 0; i < message.member_account_id.length; i++)
			writer.tag(1, WireType.Varint).uint32(message.member_account_id[i]);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCGetUserServerMembersResponse
 */
export const CMsgGCToGCGetUserServerMembersResponse = new CMsgGCToGCGetUserServerMembersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgLookupMultipleAccountNames$Type extends MessageType<CMsgLookupMultipleAccountNames> {
	constructor() {
		super("CMsgLookupMultipleAccountNames", [
			{
				no: 1,
				name: "accountids",
				kind: "scalar",
				repeat: 1 /*RepeatType.PACKED*/,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgLookupMultipleAccountNames>): CMsgLookupMultipleAccountNames {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.accountids = [];
		if (value !== undefined) reflectionMergePartial<CMsgLookupMultipleAccountNames>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgLookupMultipleAccountNames,
	): CMsgLookupMultipleAccountNames {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* repeated uint32 accountids = 1 [packed = true];*/ 1:
					if (wireType === WireType.LengthDelimited)
						for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.accountids.push(reader.uint32());
					else message.accountids.push(reader.uint32());
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgLookupMultipleAccountNames,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* repeated uint32 accountids = 1 [packed = true]; */
		if (message.accountids.length) {
			writer.tag(1, WireType.LengthDelimited).fork();
			for (let i = 0; i < message.accountids.length; i++) writer.uint32(message.accountids[i]);
			writer.join();
		}
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgLookupMultipleAccountNames
 */
export const CMsgLookupMultipleAccountNames = new CMsgLookupMultipleAccountNames$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgLookupMultipleAccountNamesResponse$Type extends MessageType<CMsgLookupMultipleAccountNamesResponse> {
	constructor() {
		super("CMsgLookupMultipleAccountNamesResponse", [
			{
				no: 1,
				name: "accounts",
				kind: "message",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: () => CMsgLookupMultipleAccountNamesResponse_Account,
			},
		]);
	}
	create(value?: PartialMessage<CMsgLookupMultipleAccountNamesResponse>): CMsgLookupMultipleAccountNamesResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.accounts = [];
		if (value !== undefined) reflectionMergePartial<CMsgLookupMultipleAccountNamesResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgLookupMultipleAccountNamesResponse,
	): CMsgLookupMultipleAccountNamesResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* repeated CMsgLookupMultipleAccountNamesResponse.Account accounts */ 1:
					message.accounts.push(
						CMsgLookupMultipleAccountNamesResponse_Account.internalBinaryRead(reader, reader.uint32(), options),
					);
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgLookupMultipleAccountNamesResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* repeated CMsgLookupMultipleAccountNamesResponse.Account accounts = 1; */
		for (let i = 0; i < message.accounts.length; i++)
			CMsgLookupMultipleAccountNamesResponse_Account.internalBinaryWrite(
				message.accounts[i],
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join();
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgLookupMultipleAccountNamesResponse
 */
export const CMsgLookupMultipleAccountNamesResponse = new CMsgLookupMultipleAccountNamesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgLookupMultipleAccountNamesResponse_Account$Type extends MessageType<CMsgLookupMultipleAccountNamesResponse_Account> {
	constructor() {
		super("CMsgLookupMultipleAccountNamesResponse.Account", [
			{
				no: 1,
				name: "accountid",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "persona",
				kind: "scalar",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
		]);
	}
	create(
		value?: PartialMessage<CMsgLookupMultipleAccountNamesResponse_Account>,
	): CMsgLookupMultipleAccountNamesResponse_Account {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined)
			reflectionMergePartial<CMsgLookupMultipleAccountNamesResponse_Account>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgLookupMultipleAccountNamesResponse_Account,
	): CMsgLookupMultipleAccountNamesResponse_Account {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 accountid */ 1:
					message.accountid = reader.uint32();
					break;
				case /* optional string persona */ 2:
					message.persona = reader.string();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgLookupMultipleAccountNamesResponse_Account,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 accountid = 1; */
		if (message.accountid !== undefined) writer.tag(1, WireType.Varint).uint32(message.accountid);
		/* optional string persona = 2; */
		if (message.persona !== undefined) writer.tag(2, WireType.LengthDelimited).string(message.persona);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgLookupMultipleAccountNamesResponse.Account
 */
export const CMsgLookupMultipleAccountNamesResponse_Account = new CMsgLookupMultipleAccountNamesResponse_Account$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgRequestCrateItems$Type extends MessageType<CMsgRequestCrateItems> {
	constructor() {
		super("CMsgRequestCrateItems", [
			{
				no: 1,
				name: "crate_item_def",
				kind: "scalar",
				localName: "crate_item_def",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgRequestCrateItems>): CMsgRequestCrateItems {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgRequestCrateItems>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgRequestCrateItems,
	): CMsgRequestCrateItems {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 crate_item_def */ 1:
					message.crate_item_def = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgRequestCrateItems,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 crate_item_def = 1; */
		if (message.crate_item_def !== undefined) writer.tag(1, WireType.Varint).uint32(message.crate_item_def);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgRequestCrateItems
 */
export const CMsgRequestCrateItems = new CMsgRequestCrateItems$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgRequestCrateItemsResponse$Type extends MessageType<CMsgRequestCrateItemsResponse> {
	constructor() {
		super("CMsgRequestCrateItemsResponse", [
			{
				no: 1,
				name: "response",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "item_defs",
				kind: "scalar",
				localName: "item_defs",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "peek_item_defs",
				kind: "scalar",
				localName: "peek_item_defs",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 4,
				name: "peek_items",
				kind: "message",
				localName: "peek_items",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: () => CSOEconItem,
			},
		]);
	}
	create(value?: PartialMessage<CMsgRequestCrateItemsResponse>): CMsgRequestCrateItemsResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.item_defs = [];
		message.peek_item_defs = [];
		message.peek_items = [];
		if (value !== undefined) reflectionMergePartial<CMsgRequestCrateItemsResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgRequestCrateItemsResponse,
	): CMsgRequestCrateItemsResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 response */ 1:
					message.response = reader.uint32();
					break;
				case /* repeated uint32 item_defs */ 2:
					if (wireType === WireType.LengthDelimited)
						for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.item_defs.push(reader.uint32());
					else message.item_defs.push(reader.uint32());
					break;
				case /* repeated uint32 peek_item_defs */ 3:
					if (wireType === WireType.LengthDelimited)
						for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.peek_item_defs.push(reader.uint32());
					else message.peek_item_defs.push(reader.uint32());
					break;
				case /* repeated CSOEconItem peek_items */ 4:
					message.peek_items.push(CSOEconItem.internalBinaryRead(reader, reader.uint32(), options));
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgRequestCrateItemsResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 response = 1; */
		if (message.response !== undefined) writer.tag(1, WireType.Varint).uint32(message.response);
		/* repeated uint32 item_defs = 2; */
		for (let i = 0; i < message.item_defs.length; i++) writer.tag(2, WireType.Varint).uint32(message.item_defs[i]);
		/* repeated uint32 peek_item_defs = 3; */
		for (let i = 0; i < message.peek_item_defs.length; i++)
			writer.tag(3, WireType.Varint).uint32(message.peek_item_defs[i]);
		/* repeated CSOEconItem peek_items = 4; */
		for (let i = 0; i < message.peek_items.length; i++)
			CSOEconItem.internalBinaryWrite(
				message.peek_items[i],
				writer.tag(4, WireType.LengthDelimited).fork(),
				options,
			).join();
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgRequestCrateItemsResponse
 */
export const CMsgRequestCrateItemsResponse = new CMsgRequestCrateItemsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgRequestCrateEscalationLevel$Type extends MessageType<CMsgRequestCrateEscalationLevel> {
	constructor() {
		super("CMsgRequestCrateEscalationLevel", [
			{
				no: 1,
				name: "crate_item_def",
				kind: "scalar",
				localName: "crate_item_def",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgRequestCrateEscalationLevel>): CMsgRequestCrateEscalationLevel {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgRequestCrateEscalationLevel>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgRequestCrateEscalationLevel,
	): CMsgRequestCrateEscalationLevel {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 crate_item_def */ 1:
					message.crate_item_def = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgRequestCrateEscalationLevel,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 crate_item_def = 1; */
		if (message.crate_item_def !== undefined) writer.tag(1, WireType.Varint).uint32(message.crate_item_def);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgRequestCrateEscalationLevel
 */
export const CMsgRequestCrateEscalationLevel = new CMsgRequestCrateEscalationLevel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgRequestCrateEscalationLevelResponse$Type extends MessageType<CMsgRequestCrateEscalationLevelResponse> {
	constructor() {
		super("CMsgRequestCrateEscalationLevelResponse", [
			{
				no: 1,
				name: "response",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "escalation_level0",
				kind: "scalar",
				localName: "escalation_level0",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "escalation_level1",
				kind: "scalar",
				localName: "escalation_level1",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 4,
				name: "escalation_level2",
				kind: "scalar",
				localName: "escalation_level2",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 5,
				name: "escalation_level3",
				kind: "scalar",
				localName: "escalation_level3",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgRequestCrateEscalationLevelResponse>): CMsgRequestCrateEscalationLevelResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgRequestCrateEscalationLevelResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgRequestCrateEscalationLevelResponse,
	): CMsgRequestCrateEscalationLevelResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 response */ 1:
					message.response = reader.uint32();
					break;
				case /* optional uint32 escalation_level0 */ 2:
					message.escalation_level0 = reader.uint32();
					break;
				case /* optional uint32 escalation_level1 */ 3:
					message.escalation_level1 = reader.uint32();
					break;
				case /* optional uint32 escalation_level2 */ 4:
					message.escalation_level2 = reader.uint32();
					break;
				case /* optional uint32 escalation_level3 */ 5:
					message.escalation_level3 = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgRequestCrateEscalationLevelResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 response = 1; */
		if (message.response !== undefined) writer.tag(1, WireType.Varint).uint32(message.response);
		/* optional uint32 escalation_level0 = 2; */
		if (message.escalation_level0 !== undefined) writer.tag(2, WireType.Varint).uint32(message.escalation_level0);
		/* optional uint32 escalation_level1 = 3; */
		if (message.escalation_level1 !== undefined) writer.tag(3, WireType.Varint).uint32(message.escalation_level1);
		/* optional uint32 escalation_level2 = 4; */
		if (message.escalation_level2 !== undefined) writer.tag(4, WireType.Varint).uint32(message.escalation_level2);
		/* optional uint32 escalation_level3 = 5; */
		if (message.escalation_level3 !== undefined) writer.tag(5, WireType.Varint).uint32(message.escalation_level3);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgRequestCrateEscalationLevelResponse
 */
export const CMsgRequestCrateEscalationLevelResponse = new CMsgRequestCrateEscalationLevelResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCCanUseDropRateBonus$Type extends MessageType<CMsgGCToGCCanUseDropRateBonus> {
	constructor() {
		super("CMsgGCToGCCanUseDropRateBonus", [
			{
				no: 1,
				name: "account_id",
				kind: "scalar",
				localName: "account_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "drop_rate_bonus",
				kind: "scalar",
				localName: "drop_rate_bonus",
				opt: true,
				T: 2 /*ScalarType.FLOAT*/,
			},
			{
				no: 3,
				name: "booster_type",
				kind: "scalar",
				localName: "booster_type",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 4,
				name: "exclusive_item_def",
				kind: "scalar",
				localName: "exclusive_item_def",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 5,
				name: "allow_equal_rate",
				kind: "scalar",
				localName: "allow_equal_rate",
				opt: true,
				T: 8 /*ScalarType.BOOL*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToGCCanUseDropRateBonus>): CMsgGCToGCCanUseDropRateBonus {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCCanUseDropRateBonus>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCCanUseDropRateBonus,
	): CMsgGCToGCCanUseDropRateBonus {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 account_id */ 1:
					message.account_id = reader.uint32();
					break;
				case /* optional float drop_rate_bonus */ 2:
					message.drop_rate_bonus = reader.float();
					break;
				case /* optional uint32 booster_type */ 3:
					message.booster_type = reader.uint32();
					break;
				case /* optional uint32 exclusive_item_def */ 4:
					message.exclusive_item_def = reader.uint32();
					break;
				case /* optional bool allow_equal_rate */ 5:
					message.allow_equal_rate = reader.bool();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCCanUseDropRateBonus,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 account_id = 1; */
		if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
		/* optional float drop_rate_bonus = 2; */
		if (message.drop_rate_bonus !== undefined) writer.tag(2, WireType.Bit32).float(message.drop_rate_bonus);
		/* optional uint32 booster_type = 3; */
		if (message.booster_type !== undefined) writer.tag(3, WireType.Varint).uint32(message.booster_type);
		/* optional uint32 exclusive_item_def = 4; */
		if (message.exclusive_item_def !== undefined) writer.tag(4, WireType.Varint).uint32(message.exclusive_item_def);
		/* optional bool allow_equal_rate = 5; */
		if (message.allow_equal_rate !== undefined) writer.tag(5, WireType.Varint).bool(message.allow_equal_rate);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCCanUseDropRateBonus
 */
export const CMsgGCToGCCanUseDropRateBonus = new CMsgGCToGCCanUseDropRateBonus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgSQLAddDropRateBonus$Type extends MessageType<CMsgSQLAddDropRateBonus> {
	constructor() {
		super("CMsgSQLAddDropRateBonus", [
			{
				no: 1,
				name: "account_id",
				kind: "scalar",
				localName: "account_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "item_id",
				kind: "scalar",
				localName: "item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 3,
				name: "item_def",
				kind: "scalar",
				localName: "item_def",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 4,
				name: "drop_rate_bonus",
				kind: "scalar",
				localName: "drop_rate_bonus",
				opt: true,
				T: 2 /*ScalarType.FLOAT*/,
			},
			{
				no: 5,
				name: "booster_type",
				kind: "scalar",
				localName: "booster_type",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 6,
				name: "seconds_duration",
				kind: "scalar",
				localName: "seconds_duration",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 7,
				name: "end_time_stamp",
				kind: "scalar",
				localName: "end_time_stamp",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgSQLAddDropRateBonus>): CMsgSQLAddDropRateBonus {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgSQLAddDropRateBonus>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgSQLAddDropRateBonus,
	): CMsgSQLAddDropRateBonus {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 account_id */ 1:
					message.account_id = reader.uint32();
					break;
				case /* optional uint64 item_id */ 2:
					message.item_id = reader.uint64().toBigInt();
					break;
				case /* optional uint32 item_def */ 3:
					message.item_def = reader.uint32();
					break;
				case /* optional float drop_rate_bonus */ 4:
					message.drop_rate_bonus = reader.float();
					break;
				case /* optional uint32 booster_type */ 5:
					message.booster_type = reader.uint32();
					break;
				case /* optional uint32 seconds_duration */ 6:
					message.seconds_duration = reader.uint32();
					break;
				case /* optional uint32 end_time_stamp */ 7:
					message.end_time_stamp = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgSQLAddDropRateBonus,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 account_id = 1; */
		if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
		/* optional uint64 item_id = 2; */
		if (message.item_id !== undefined) writer.tag(2, WireType.Varint).uint64(message.item_id);
		/* optional uint32 item_def = 3; */
		if (message.item_def !== undefined) writer.tag(3, WireType.Varint).uint32(message.item_def);
		/* optional float drop_rate_bonus = 4; */
		if (message.drop_rate_bonus !== undefined) writer.tag(4, WireType.Bit32).float(message.drop_rate_bonus);
		/* optional uint32 booster_type = 5; */
		if (message.booster_type !== undefined) writer.tag(5, WireType.Varint).uint32(message.booster_type);
		/* optional uint32 seconds_duration = 6; */
		if (message.seconds_duration !== undefined) writer.tag(6, WireType.Varint).uint32(message.seconds_duration);
		/* optional uint32 end_time_stamp = 7; */
		if (message.end_time_stamp !== undefined) writer.tag(7, WireType.Varint).uint32(message.end_time_stamp);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgSQLAddDropRateBonus
 */
export const CMsgSQLAddDropRateBonus = new CMsgSQLAddDropRateBonus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgSQLUpgradeBattleBooster$Type extends MessageType<CMsgSQLUpgradeBattleBooster> {
	constructor() {
		super("CMsgSQLUpgradeBattleBooster", [
			{
				no: 1,
				name: "account_id",
				kind: "scalar",
				localName: "account_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "item_def",
				kind: "scalar",
				localName: "item_def",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "bonus_to_add",
				kind: "scalar",
				localName: "bonus_to_add",
				opt: true,
				T: 2 /*ScalarType.FLOAT*/,
			},
			{
				no: 4,
				name: "booster_type",
				kind: "scalar",
				localName: "booster_type",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgSQLUpgradeBattleBooster>): CMsgSQLUpgradeBattleBooster {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgSQLUpgradeBattleBooster>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgSQLUpgradeBattleBooster,
	): CMsgSQLUpgradeBattleBooster {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 account_id */ 1:
					message.account_id = reader.uint32();
					break;
				case /* optional uint32 item_def */ 2:
					message.item_def = reader.uint32();
					break;
				case /* optional float bonus_to_add */ 3:
					message.bonus_to_add = reader.float();
					break;
				case /* optional uint32 booster_type */ 4:
					message.booster_type = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgSQLUpgradeBattleBooster,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 account_id = 1; */
		if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
		/* optional uint32 item_def = 2; */
		if (message.item_def !== undefined) writer.tag(2, WireType.Varint).uint32(message.item_def);
		/* optional float bonus_to_add = 3; */
		if (message.bonus_to_add !== undefined) writer.tag(3, WireType.Bit32).float(message.bonus_to_add);
		/* optional uint32 booster_type = 4; */
		if (message.booster_type !== undefined) writer.tag(4, WireType.Varint).uint32(message.booster_type);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgSQLUpgradeBattleBooster
 */
export const CMsgSQLUpgradeBattleBooster = new CMsgSQLUpgradeBattleBooster$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCRefreshSOCache$Type extends MessageType<CMsgGCToGCRefreshSOCache> {
	constructor() {
		super("CMsgGCToGCRefreshSOCache", [
			{
				no: 1,
				name: "account_id",
				kind: "scalar",
				localName: "account_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "reload",
				kind: "scalar",
				opt: true,
				T: 8 /*ScalarType.BOOL*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToGCRefreshSOCache>): CMsgGCToGCRefreshSOCache {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCRefreshSOCache>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCRefreshSOCache,
	): CMsgGCToGCRefreshSOCache {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 account_id */ 1:
					message.account_id = reader.uint32();
					break;
				case /* optional bool reload */ 2:
					message.reload = reader.bool();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCRefreshSOCache,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 account_id = 1; */
		if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
		/* optional bool reload = 2; */
		if (message.reload !== undefined) writer.tag(2, WireType.Varint).bool(message.reload);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCRefreshSOCache
 */
export const CMsgGCToGCRefreshSOCache = new CMsgGCToGCRefreshSOCache$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCAddSubscriptionTime$Type extends MessageType<CMsgGCToGCAddSubscriptionTime> {
	constructor() {
		super("CMsgGCToGCAddSubscriptionTime", [
			{
				no: 1,
				name: "account_id",
				kind: "scalar",
				localName: "account_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "matching_subscription_def_indexes",
				kind: "scalar",
				localName: "matching_subscription_def_indexes",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "additional_seconds",
				kind: "scalar",
				localName: "additional_seconds",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToGCAddSubscriptionTime>): CMsgGCToGCAddSubscriptionTime {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.matching_subscription_def_indexes = [];
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCAddSubscriptionTime>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCAddSubscriptionTime,
	): CMsgGCToGCAddSubscriptionTime {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 account_id */ 1:
					message.account_id = reader.uint32();
					break;
				case /* repeated uint32 matching_subscription_def_indexes */ 2:
					if (wireType === WireType.LengthDelimited)
						for (let e = reader.int32() + reader.pos; reader.pos < e; )
							message.matching_subscription_def_indexes.push(reader.uint32());
					else message.matching_subscription_def_indexes.push(reader.uint32());
					break;
				case /* optional uint32 additional_seconds */ 3:
					message.additional_seconds = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCAddSubscriptionTime,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 account_id = 1; */
		if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
		/* repeated uint32 matching_subscription_def_indexes = 2; */
		for (let i = 0; i < message.matching_subscription_def_indexes.length; i++)
			writer.tag(2, WireType.Varint).uint32(message.matching_subscription_def_indexes[i]);
		/* optional uint32 additional_seconds = 3; */
		if (message.additional_seconds !== undefined) writer.tag(3, WireType.Varint).uint32(message.additional_seconds);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCAddSubscriptionTime
 */
export const CMsgGCToGCAddSubscriptionTime = new CMsgGCToGCAddSubscriptionTime$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCGrantAccountRolledItems$Type extends MessageType<CMsgGCToGCGrantAccountRolledItems> {
	constructor() {
		super("CMsgGCToGCGrantAccountRolledItems", [
			{
				no: 1,
				name: "account_id",
				kind: "scalar",
				localName: "account_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "items",
				kind: "message",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: () => CMsgGCToGCGrantAccountRolledItems_Item,
			},
			{
				no: 3,
				name: "audit_action",
				kind: "scalar",
				localName: "audit_action",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 4,
				name: "audit_data",
				kind: "scalar",
				localName: "audit_data",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToGCGrantAccountRolledItems>): CMsgGCToGCGrantAccountRolledItems {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.items = [];
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCGrantAccountRolledItems>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCGrantAccountRolledItems,
	): CMsgGCToGCGrantAccountRolledItems {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 account_id */ 1:
					message.account_id = reader.uint32();
					break;
				case /* repeated CMsgGCToGCGrantAccountRolledItems.Item items */ 2:
					message.items.push(
						CMsgGCToGCGrantAccountRolledItems_Item.internalBinaryRead(reader, reader.uint32(), options),
					);
					break;
				case /* optional uint32 audit_action */ 3:
					message.audit_action = reader.uint32();
					break;
				case /* optional uint64 audit_data */ 4:
					message.audit_data = reader.uint64().toBigInt();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCGrantAccountRolledItems,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 account_id = 1; */
		if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
		/* repeated CMsgGCToGCGrantAccountRolledItems.Item items = 2; */
		for (let i = 0; i < message.items.length; i++)
			CMsgGCToGCGrantAccountRolledItems_Item.internalBinaryWrite(
				message.items[i],
				writer.tag(2, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* optional uint32 audit_action = 3; */
		if (message.audit_action !== undefined) writer.tag(3, WireType.Varint).uint32(message.audit_action);
		/* optional uint64 audit_data = 4; */
		if (message.audit_data !== undefined) writer.tag(4, WireType.Varint).uint64(message.audit_data);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCGrantAccountRolledItems
 */
export const CMsgGCToGCGrantAccountRolledItems = new CMsgGCToGCGrantAccountRolledItems$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCGrantAccountRolledItems_Item$Type extends MessageType<CMsgGCToGCGrantAccountRolledItems_Item> {
	constructor() {
		super("CMsgGCToGCGrantAccountRolledItems.Item", [
			{
				no: 1,
				name: "item_def",
				kind: "scalar",
				localName: "item_def",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "loot_lists",
				kind: "scalar",
				localName: "loot_lists",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 3,
				name: "ignore_limit",
				kind: "scalar",
				localName: "ignore_limit",
				opt: true,
				T: 8 /*ScalarType.BOOL*/,
			},
			{
				no: 4,
				name: "origin",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 5,
				name: "dynamic_attributes",
				kind: "message",
				localName: "dynamic_attributes",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: () => CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute,
			},
			{
				no: 6,
				name: "additional_audit_entries",
				kind: "message",
				localName: "additional_audit_entries",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: () => CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry,
			},
			{
				no: 7,
				name: "inventory_token",
				kind: "scalar",
				localName: "inventory_token",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 8,
				name: "quality",
				kind: "scalar",
				opt: true,
				T: 5 /*ScalarType.INT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToGCGrantAccountRolledItems_Item>): CMsgGCToGCGrantAccountRolledItems_Item {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.loot_lists = [];
		message.dynamic_attributes = [];
		message.additional_audit_entries = [];
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCGrantAccountRolledItems_Item>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCGrantAccountRolledItems_Item,
	): CMsgGCToGCGrantAccountRolledItems_Item {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 item_def */ 1:
					message.item_def = reader.uint32();
					break;
				case /* repeated string loot_lists */ 2:
					message.loot_lists.push(reader.string());
					break;
				case /* optional bool ignore_limit */ 3:
					message.ignore_limit = reader.bool();
					break;
				case /* optional uint32 origin */ 4:
					message.origin = reader.uint32();
					break;
				case /* repeated CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute dynamic_attributes */ 5:
					message.dynamic_attributes.push(
						CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
						),
					);
					break;
				case /* repeated CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry additional_audit_entries */ 6:
					message.additional_audit_entries.push(
						CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
						),
					);
					break;
				case /* optional uint32 inventory_token */ 7:
					message.inventory_token = reader.uint32();
					break;
				case /* optional int32 quality */ 8:
					message.quality = reader.int32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCGrantAccountRolledItems_Item,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 item_def = 1; */
		if (message.item_def !== undefined) writer.tag(1, WireType.Varint).uint32(message.item_def);
		/* repeated string loot_lists = 2; */
		for (let i = 0; i < message.loot_lists.length; i++)
			writer.tag(2, WireType.LengthDelimited).string(message.loot_lists[i]);
		/* optional bool ignore_limit = 3; */
		if (message.ignore_limit !== undefined) writer.tag(3, WireType.Varint).bool(message.ignore_limit);
		/* optional uint32 origin = 4; */
		if (message.origin !== undefined) writer.tag(4, WireType.Varint).uint32(message.origin);
		/* repeated CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute dynamic_attributes = 5; */
		for (let i = 0; i < message.dynamic_attributes.length; i++)
			CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute.internalBinaryWrite(
				message.dynamic_attributes[i],
				writer.tag(5, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* repeated CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry additional_audit_entries = 6; */
		for (let i = 0; i < message.additional_audit_entries.length; i++)
			CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry.internalBinaryWrite(
				message.additional_audit_entries[i],
				writer.tag(6, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* optional uint32 inventory_token = 7; */
		if (message.inventory_token !== undefined) writer.tag(7, WireType.Varint).uint32(message.inventory_token);
		/* optional int32 quality = 8; */
		if (message.quality !== undefined) writer.tag(8, WireType.Varint).int32(message.quality);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCGrantAccountRolledItems.Item
 */
export const CMsgGCToGCGrantAccountRolledItems_Item = new CMsgGCToGCGrantAccountRolledItems_Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute$Type extends MessageType<CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute> {
	constructor() {
		super("CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute", [
			{
				no: 1,
				name: "name",
				kind: "scalar",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 2,
				name: "value_uint32",
				kind: "scalar",
				localName: "value_uint32",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "value_float",
				kind: "scalar",
				localName: "value_float",
				opt: true,
				T: 2 /*ScalarType.FLOAT*/,
			},
			{
				no: 4,
				name: "value_string",
				kind: "scalar",
				localName: "value_string",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
		]);
	}
	create(
		value?: PartialMessage<CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute>,
	): CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined)
			reflectionMergePartial<CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute,
	): CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional string name */ 1:
					message.name = reader.string();
					break;
				case /* optional uint32 value_uint32 */ 2:
					message.value_uint32 = reader.uint32();
					break;
				case /* optional float value_float */ 3:
					message.value_float = reader.float();
					break;
				case /* optional string value_string */ 4:
					message.value_string = reader.string();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional string name = 1; */
		if (message.name !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.name);
		/* optional uint32 value_uint32 = 2; */
		if (message.value_uint32 !== undefined) writer.tag(2, WireType.Varint).uint32(message.value_uint32);
		/* optional float value_float = 3; */
		if (message.value_float !== undefined) writer.tag(3, WireType.Bit32).float(message.value_float);
		/* optional string value_string = 4; */
		if (message.value_string !== undefined) writer.tag(4, WireType.LengthDelimited).string(message.value_string);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute
 */
export const CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute =
	new CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry$Type extends MessageType<CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry> {
	constructor() {
		super("CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry", [
			{
				no: 1,
				name: "owner_account_id",
				kind: "scalar",
				localName: "owner_account_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "audit_action",
				kind: "scalar",
				localName: "audit_action",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "audit_data",
				kind: "scalar",
				localName: "audit_data",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
		]);
	}
	create(
		value?: PartialMessage<CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry>,
	): CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined)
			reflectionMergePartial<CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry,
	): CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 owner_account_id */ 1:
					message.owner_account_id = reader.uint32();
					break;
				case /* optional uint32 audit_action */ 2:
					message.audit_action = reader.uint32();
					break;
				case /* optional uint64 audit_data */ 3:
					message.audit_data = reader.uint64().toBigInt();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 owner_account_id = 1; */
		if (message.owner_account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.owner_account_id);
		/* optional uint32 audit_action = 2; */
		if (message.audit_action !== undefined) writer.tag(2, WireType.Varint).uint32(message.audit_action);
		/* optional uint64 audit_data = 3; */
		if (message.audit_data !== undefined) writer.tag(3, WireType.Varint).uint64(message.audit_data);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry
 */
export const CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry =
	new CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCBetaDeleteItems$Type extends MessageType<CMsgGCToGCBetaDeleteItems> {
	constructor() {
		super("CMsgGCToGCBetaDeleteItems", [
			{
				no: 1,
				name: "account_id",
				kind: "scalar",
				localName: "account_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "item_ids",
				kind: "scalar",
				localName: "item_ids",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 3,
				name: "item_defs",
				kind: "scalar",
				localName: "item_defs",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToGCBetaDeleteItems>): CMsgGCToGCBetaDeleteItems {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.item_ids = [];
		message.item_defs = [];
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCBetaDeleteItems>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCBetaDeleteItems,
	): CMsgGCToGCBetaDeleteItems {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 account_id */ 1:
					message.account_id = reader.uint32();
					break;
				case /* repeated uint64 item_ids */ 2:
					if (wireType === WireType.LengthDelimited)
						for (let e = reader.int32() + reader.pos; reader.pos < e; )
							message.item_ids.push(reader.uint64().toBigInt());
					else message.item_ids.push(reader.uint64().toBigInt());
					break;
				case /* repeated uint32 item_defs */ 3:
					if (wireType === WireType.LengthDelimited)
						for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.item_defs.push(reader.uint32());
					else message.item_defs.push(reader.uint32());
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCBetaDeleteItems,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 account_id = 1; */
		if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
		/* repeated uint64 item_ids = 2; */
		for (let i = 0; i < message.item_ids.length; i++) writer.tag(2, WireType.Varint).uint64(message.item_ids[i]);
		/* repeated uint32 item_defs = 3; */
		for (let i = 0; i < message.item_defs.length; i++) writer.tag(3, WireType.Varint).uint32(message.item_defs[i]);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCBetaDeleteItems
 */
export const CMsgGCToGCBetaDeleteItems = new CMsgGCToGCBetaDeleteItems$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCGrantSelfMadeItemToAccount$Type extends MessageType<CMsgGCToGCGrantSelfMadeItemToAccount> {
	constructor() {
		super("CMsgGCToGCGrantSelfMadeItemToAccount", [
			{
				no: 1,
				name: "item_def_index",
				kind: "scalar",
				localName: "item_def_index",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "accountid",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToGCGrantSelfMadeItemToAccount>): CMsgGCToGCGrantSelfMadeItemToAccount {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCGrantSelfMadeItemToAccount>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCGrantSelfMadeItemToAccount,
	): CMsgGCToGCGrantSelfMadeItemToAccount {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 item_def_index */ 1:
					message.item_def_index = reader.uint32();
					break;
				case /* optional uint32 accountid */ 2:
					message.accountid = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCGrantSelfMadeItemToAccount,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 item_def_index = 1; */
		if (message.item_def_index !== undefined) writer.tag(1, WireType.Varint).uint32(message.item_def_index);
		/* optional uint32 accountid = 2; */
		if (message.accountid !== undefined) writer.tag(2, WireType.Varint).uint32(message.accountid);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCGrantSelfMadeItemToAccount
 */
export const CMsgGCToGCGrantSelfMadeItemToAccount = new CMsgGCToGCGrantSelfMadeItemToAccount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgUseItem$Type extends MessageType<CMsgUseItem> {
	constructor() {
		super("CMsgUseItem", [
			{
				no: 1,
				name: "item_id",
				kind: "scalar",
				localName: "item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 2,
				name: "target_steam_id",
				kind: "scalar",
				localName: "target_steam_id",
				opt: true,
				T: 6 /*ScalarType.FIXED64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 3,
				name: "gift__potential_targets",
				kind: "scalar",
				localName: "gift__potential_targets",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 4,
				name: "duel__class_lock",
				kind: "scalar",
				localName: "duel__class_lock",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 5,
				name: "initiator_steam_id",
				kind: "scalar",
				localName: "initiator_steam_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 6,
				name: "itempack__ack_immediately",
				kind: "scalar",
				localName: "itempack__ack_immediately",
				opt: true,
				T: 8 /*ScalarType.BOOL*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgUseItem>): CMsgUseItem {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.gift__potential_targets = [];
		if (value !== undefined) reflectionMergePartial<CMsgUseItem>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgUseItem,
	): CMsgUseItem {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint64 item_id */ 1:
					message.item_id = reader.uint64().toBigInt();
					break;
				case /* optional fixed64 target_steam_id */ 2:
					message.target_steam_id = reader.fixed64().toBigInt();
					break;
				case /* repeated uint32 gift__potential_targets */ 3:
					if (wireType === WireType.LengthDelimited)
						for (let e = reader.int32() + reader.pos; reader.pos < e; )
							message.gift__potential_targets.push(reader.uint32());
					else message.gift__potential_targets.push(reader.uint32());
					break;
				case /* optional uint32 duel__class_lock */ 4:
					message.duel__class_lock = reader.uint32();
					break;
				case /* optional uint64 initiator_steam_id */ 5:
					message.initiator_steam_id = reader.uint64().toBigInt();
					break;
				case /* optional bool itempack__ack_immediately */ 6:
					message.itempack__ack_immediately = reader.bool();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(message: CMsgUseItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
		/* optional uint64 item_id = 1; */
		if (message.item_id !== undefined) writer.tag(1, WireType.Varint).uint64(message.item_id);
		/* optional fixed64 target_steam_id = 2; */
		if (message.target_steam_id !== undefined) writer.tag(2, WireType.Bit64).fixed64(message.target_steam_id);
		/* repeated uint32 gift__potential_targets = 3; */
		for (let i = 0; i < message.gift__potential_targets.length; i++)
			writer.tag(3, WireType.Varint).uint32(message.gift__potential_targets[i]);
		/* optional uint32 duel__class_lock = 4; */
		if (message.duel__class_lock !== undefined) writer.tag(4, WireType.Varint).uint32(message.duel__class_lock);
		/* optional uint64 initiator_steam_id = 5; */
		if (message.initiator_steam_id !== undefined) writer.tag(5, WireType.Varint).uint64(message.initiator_steam_id);
		/* optional bool itempack__ack_immediately = 6; */
		if (message.itempack__ack_immediately !== undefined)
			writer.tag(6, WireType.Varint).bool(message.itempack__ack_immediately);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgUseItem
 */
export const CMsgUseItem = new CMsgUseItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgServerUseItem$Type extends MessageType<CMsgServerUseItem> {
	constructor() {
		super("CMsgServerUseItem", [
			{
				no: 1,
				name: "initiator_account_id",
				kind: "scalar",
				localName: "initiator_account_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "use_item_msg",
				kind: "message",
				localName: "use_item_msg",
				T: () => CMsgUseItem,
			},
		]);
	}
	create(value?: PartialMessage<CMsgServerUseItem>): CMsgServerUseItem {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgServerUseItem>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgServerUseItem,
	): CMsgServerUseItem {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 initiator_account_id */ 1:
					message.initiator_account_id = reader.uint32();
					break;
				case /* optional CMsgUseItem use_item_msg */ 2:
					message.use_item_msg = CMsgUseItem.internalBinaryRead(reader, reader.uint32(), options, message.use_item_msg);
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(message: CMsgServerUseItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
		/* optional uint32 initiator_account_id = 1; */
		if (message.initiator_account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.initiator_account_id);
		/* optional CMsgUseItem use_item_msg = 2; */
		if (message.use_item_msg)
			CMsgUseItem.internalBinaryWrite(
				message.use_item_msg,
				writer.tag(2, WireType.LengthDelimited).fork(),
				options,
			).join();
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgServerUseItem
 */
export const CMsgServerUseItem = new CMsgServerUseItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgUseMultipleItems$Type extends MessageType<CMsgUseMultipleItems> {
	constructor() {
		super("CMsgUseMultipleItems", [
			{
				no: 1,
				name: "item_ids",
				kind: "scalar",
				localName: "item_ids",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgUseMultipleItems>): CMsgUseMultipleItems {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.item_ids = [];
		if (value !== undefined) reflectionMergePartial<CMsgUseMultipleItems>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgUseMultipleItems,
	): CMsgUseMultipleItems {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* repeated uint64 item_ids */ 1:
					if (wireType === WireType.LengthDelimited)
						for (let e = reader.int32() + reader.pos; reader.pos < e; )
							message.item_ids.push(reader.uint64().toBigInt());
					else message.item_ids.push(reader.uint64().toBigInt());
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgUseMultipleItems,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* repeated uint64 item_ids = 1; */
		for (let i = 0; i < message.item_ids.length; i++) writer.tag(1, WireType.Varint).uint64(message.item_ids[i]);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgUseMultipleItems
 */
export const CMsgUseMultipleItems = new CMsgUseMultipleItems$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CGCStoreRechargeRedirect_LineItem$Type extends MessageType<CGCStoreRechargeRedirect_LineItem> {
	constructor() {
		super("CGCStoreRechargeRedirect_LineItem", [
			{
				no: 1,
				name: "item_def_id",
				kind: "scalar",
				localName: "item_def_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "quantity",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CGCStoreRechargeRedirect_LineItem>): CGCStoreRechargeRedirect_LineItem {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CGCStoreRechargeRedirect_LineItem>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CGCStoreRechargeRedirect_LineItem,
	): CGCStoreRechargeRedirect_LineItem {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 item_def_id */ 1:
					message.item_def_id = reader.uint32();
					break;
				case /* optional uint32 quantity */ 2:
					message.quantity = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CGCStoreRechargeRedirect_LineItem,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 item_def_id = 1; */
		if (message.item_def_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.item_def_id);
		/* optional uint32 quantity = 2; */
		if (message.quantity !== undefined) writer.tag(2, WireType.Varint).uint32(message.quantity);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CGCStoreRechargeRedirect_LineItem
 */
export const CGCStoreRechargeRedirect_LineItem = new CGCStoreRechargeRedirect_LineItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCEconSQLWorkItemEmbeddedRollbackData$Type extends MessageType<CMsgGCEconSQLWorkItemEmbeddedRollbackData> {
	constructor() {
		super("CMsgGCEconSQLWorkItemEmbeddedRollbackData", [
			{
				no: 1,
				name: "account_id",
				kind: "scalar",
				localName: "account_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "deleted_item_id",
				kind: "scalar",
				localName: "deleted_item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 3,
				name: "old_audit_action",
				kind: "scalar",
				localName: "old_audit_action",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 4,
				name: "new_audit_action",
				kind: "scalar",
				localName: "new_audit_action",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 5,
				name: "expected_audit_action",
				kind: "scalar",
				localName: "expected_audit_action",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCEconSQLWorkItemEmbeddedRollbackData>): CMsgGCEconSQLWorkItemEmbeddedRollbackData {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCEconSQLWorkItemEmbeddedRollbackData>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCEconSQLWorkItemEmbeddedRollbackData,
	): CMsgGCEconSQLWorkItemEmbeddedRollbackData {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 account_id */ 1:
					message.account_id = reader.uint32();
					break;
				case /* optional uint64 deleted_item_id */ 2:
					message.deleted_item_id = reader.uint64().toBigInt();
					break;
				case /* optional uint32 old_audit_action */ 3:
					message.old_audit_action = reader.uint32();
					break;
				case /* optional uint32 new_audit_action */ 4:
					message.new_audit_action = reader.uint32();
					break;
				case /* optional uint32 expected_audit_action */ 5:
					message.expected_audit_action = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCEconSQLWorkItemEmbeddedRollbackData,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 account_id = 1; */
		if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
		/* optional uint64 deleted_item_id = 2; */
		if (message.deleted_item_id !== undefined) writer.tag(2, WireType.Varint).uint64(message.deleted_item_id);
		/* optional uint32 old_audit_action = 3; */
		if (message.old_audit_action !== undefined) writer.tag(3, WireType.Varint).uint32(message.old_audit_action);
		/* optional uint32 new_audit_action = 4; */
		if (message.new_audit_action !== undefined) writer.tag(4, WireType.Varint).uint32(message.new_audit_action);
		/* optional uint32 expected_audit_action = 5; */
		if (message.expected_audit_action !== undefined)
			writer.tag(5, WireType.Varint).uint32(message.expected_audit_action);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCEconSQLWorkItemEmbeddedRollbackData
 */
export const CMsgGCEconSQLWorkItemEmbeddedRollbackData = new CMsgGCEconSQLWorkItemEmbeddedRollbackData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgCraftStatue$Type extends MessageType<CMsgCraftStatue> {
	constructor() {
		super("CMsgCraftStatue", [
			{
				no: 1,
				name: "heroid",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "sequencename",
				kind: "scalar",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 3,
				name: "cycle",
				kind: "scalar",
				opt: true,
				T: 2 /*ScalarType.FLOAT*/,
			},
			{
				no: 4,
				name: "description",
				kind: "scalar",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 5,
				name: "pedestal_itemdef",
				kind: "scalar",
				localName: "pedestal_itemdef",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 6,
				name: "toolid",
				kind: "scalar",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgCraftStatue>): CMsgCraftStatue {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgCraftStatue>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgCraftStatue,
	): CMsgCraftStatue {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 heroid */ 1:
					message.heroid = reader.uint32();
					break;
				case /* optional string sequencename */ 2:
					message.sequencename = reader.string();
					break;
				case /* optional float cycle */ 3:
					message.cycle = reader.float();
					break;
				case /* optional string description */ 4:
					message.description = reader.string();
					break;
				case /* optional uint32 pedestal_itemdef */ 5:
					message.pedestal_itemdef = reader.uint32();
					break;
				case /* optional uint64 toolid */ 6:
					message.toolid = reader.uint64().toBigInt();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(message: CMsgCraftStatue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
		/* optional uint32 heroid = 1; */
		if (message.heroid !== undefined) writer.tag(1, WireType.Varint).uint32(message.heroid);
		/* optional string sequencename = 2; */
		if (message.sequencename !== undefined) writer.tag(2, WireType.LengthDelimited).string(message.sequencename);
		/* optional float cycle = 3; */
		if (message.cycle !== undefined) writer.tag(3, WireType.Bit32).float(message.cycle);
		/* optional string description = 4; */
		if (message.description !== undefined) writer.tag(4, WireType.LengthDelimited).string(message.description);
		/* optional uint32 pedestal_itemdef = 5; */
		if (message.pedestal_itemdef !== undefined) writer.tag(5, WireType.Varint).uint32(message.pedestal_itemdef);
		/* optional uint64 toolid = 6; */
		if (message.toolid !== undefined) writer.tag(6, WireType.Varint).uint64(message.toolid);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgCraftStatue
 */
export const CMsgCraftStatue = new CMsgCraftStatue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgRedeemCode$Type extends MessageType<CMsgRedeemCode> {
	constructor() {
		super("CMsgRedeemCode", [
			{
				no: 1,
				name: "code",
				kind: "scalar",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgRedeemCode>): CMsgRedeemCode {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgRedeemCode>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgRedeemCode,
	): CMsgRedeemCode {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional string code */ 1:
					message.code = reader.string();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(message: CMsgRedeemCode, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
		/* optional string code = 1; */
		if (message.code !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.code);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgRedeemCode
 */
export const CMsgRedeemCode = new CMsgRedeemCode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgRedeemCodeResponse$Type extends MessageType<CMsgRedeemCodeResponse> {
	constructor() {
		super("CMsgRedeemCodeResponse", [
			{
				no: 1,
				name: "response",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "item_id",
				kind: "scalar",
				localName: "item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgRedeemCodeResponse>): CMsgRedeemCodeResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgRedeemCodeResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgRedeemCodeResponse,
	): CMsgRedeemCodeResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 response */ 1:
					message.response = reader.uint32();
					break;
				case /* optional uint64 item_id */ 2:
					message.item_id = reader.uint64().toBigInt();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgRedeemCodeResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 response = 1; */
		if (message.response !== undefined) writer.tag(1, WireType.Varint).uint32(message.response);
		/* optional uint64 item_id = 2; */
		if (message.item_id !== undefined) writer.tag(2, WireType.Varint).uint64(message.item_id);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgRedeemCodeResponse
 */
export const CMsgRedeemCodeResponse = new CMsgRedeemCodeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgDevNewItemRequest$Type extends MessageType<CMsgDevNewItemRequest> {
	constructor() {
		super("CMsgDevNewItemRequest", [
			{
				no: 3,
				name: "item_def_name",
				kind: "scalar",
				localName: "item_def_name",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 4,
				name: "loot_list_name",
				kind: "scalar",
				localName: "loot_list_name",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 5,
				name: "attr_def_name",
				kind: "scalar",
				localName: "attr_def_name",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 6,
				name: "attr_value",
				kind: "scalar",
				localName: "attr_value",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 7,
				name: "item_quality",
				kind: "scalar",
				localName: "item_quality",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgDevNewItemRequest>): CMsgDevNewItemRequest {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.attr_def_name = [];
		message.attr_value = [];
		if (value !== undefined) reflectionMergePartial<CMsgDevNewItemRequest>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgDevNewItemRequest,
	): CMsgDevNewItemRequest {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional string item_def_name */ 3:
					message.item_def_name = reader.string();
					break;
				case /* optional string loot_list_name */ 4:
					message.loot_list_name = reader.string();
					break;
				case /* repeated string attr_def_name */ 5:
					message.attr_def_name.push(reader.string());
					break;
				case /* repeated string attr_value */ 6:
					message.attr_value.push(reader.string());
					break;
				case /* optional uint32 item_quality */ 7:
					message.item_quality = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgDevNewItemRequest,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional string item_def_name = 3; */
		if (message.item_def_name !== undefined) writer.tag(3, WireType.LengthDelimited).string(message.item_def_name);
		/* optional string loot_list_name = 4; */
		if (message.loot_list_name !== undefined) writer.tag(4, WireType.LengthDelimited).string(message.loot_list_name);
		/* repeated string attr_def_name = 5; */
		for (let i = 0; i < message.attr_def_name.length; i++)
			writer.tag(5, WireType.LengthDelimited).string(message.attr_def_name[i]);
		/* repeated string attr_value = 6; */
		for (let i = 0; i < message.attr_value.length; i++)
			writer.tag(6, WireType.LengthDelimited).string(message.attr_value[i]);
		/* optional uint32 item_quality = 7; */
		if (message.item_quality !== undefined) writer.tag(7, WireType.Varint).uint32(message.item_quality);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgDevNewItemRequest
 */
export const CMsgDevNewItemRequest = new CMsgDevNewItemRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgDevNewItemRequestResponse$Type extends MessageType<CMsgDevNewItemRequestResponse> {
	constructor() {
		super("CMsgDevNewItemRequestResponse", [
			{
				no: 1,
				name: "success",
				kind: "scalar",
				opt: true,
				T: 8 /*ScalarType.BOOL*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgDevNewItemRequestResponse>): CMsgDevNewItemRequestResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgDevNewItemRequestResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgDevNewItemRequestResponse,
	): CMsgDevNewItemRequestResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional bool success */ 1:
					message.success = reader.bool();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgDevNewItemRequestResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional bool success = 1; */
		if (message.success !== undefined) writer.tag(1, WireType.Varint).bool(message.success);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgDevNewItemRequestResponse
 */
export const CMsgDevNewItemRequestResponse = new CMsgDevNewItemRequestResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgDevUnlockAllItemStyles$Type extends MessageType<CMsgDevUnlockAllItemStyles> {
	constructor() {
		super("CMsgDevUnlockAllItemStyles", [
			{
				no: 1,
				name: "item_id",
				kind: "scalar",
				localName: "item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgDevUnlockAllItemStyles>): CMsgDevUnlockAllItemStyles {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgDevUnlockAllItemStyles>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgDevUnlockAllItemStyles,
	): CMsgDevUnlockAllItemStyles {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint64 item_id */ 1:
					message.item_id = reader.uint64().toBigInt();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgDevUnlockAllItemStyles,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint64 item_id = 1; */
		if (message.item_id !== undefined) writer.tag(1, WireType.Varint).uint64(message.item_id);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgDevUnlockAllItemStyles
 */
export const CMsgDevUnlockAllItemStyles = new CMsgDevUnlockAllItemStyles$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgDevUnlockAllItemStylesResponse$Type extends MessageType<CMsgDevUnlockAllItemStylesResponse> {
	constructor() {
		super("CMsgDevUnlockAllItemStylesResponse", [
			{
				no: 1,
				name: "success",
				kind: "scalar",
				opt: true,
				T: 8 /*ScalarType.BOOL*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgDevUnlockAllItemStylesResponse>): CMsgDevUnlockAllItemStylesResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgDevUnlockAllItemStylesResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgDevUnlockAllItemStylesResponse,
	): CMsgDevUnlockAllItemStylesResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional bool success */ 1:
					message.success = reader.bool();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgDevUnlockAllItemStylesResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional bool success = 1; */
		if (message.success !== undefined) writer.tag(1, WireType.Varint).bool(message.success);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgDevUnlockAllItemStylesResponse
 */
export const CMsgDevUnlockAllItemStylesResponse = new CMsgDevUnlockAllItemStylesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCGetAccountSubscriptionItem$Type extends MessageType<CMsgGCGetAccountSubscriptionItem> {
	constructor() {
		super("CMsgGCGetAccountSubscriptionItem", [
			{
				no: 1,
				name: "account_id",
				kind: "scalar",
				localName: "account_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCGetAccountSubscriptionItem>): CMsgGCGetAccountSubscriptionItem {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCGetAccountSubscriptionItem>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCGetAccountSubscriptionItem,
	): CMsgGCGetAccountSubscriptionItem {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 account_id */ 1:
					message.account_id = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCGetAccountSubscriptionItem,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 account_id = 1; */
		if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCGetAccountSubscriptionItem
 */
export const CMsgGCGetAccountSubscriptionItem = new CMsgGCGetAccountSubscriptionItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCGetAccountSubscriptionItemResponse$Type extends MessageType<CMsgGCGetAccountSubscriptionItemResponse> {
	constructor() {
		super("CMsgGCGetAccountSubscriptionItemResponse", [
			{
				no: 1,
				name: "def_index",
				kind: "scalar",
				localName: "def_index",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCGetAccountSubscriptionItemResponse>): CMsgGCGetAccountSubscriptionItemResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCGetAccountSubscriptionItemResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCGetAccountSubscriptionItemResponse,
	): CMsgGCGetAccountSubscriptionItemResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 def_index */ 1:
					message.def_index = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCGetAccountSubscriptionItemResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 def_index = 1; */
		if (message.def_index !== undefined) writer.tag(1, WireType.Varint).uint32(message.def_index);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCGetAccountSubscriptionItemResponse
 */
export const CMsgGCGetAccountSubscriptionItemResponse = new CMsgGCGetAccountSubscriptionItemResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCAddGiftItem$Type extends MessageType<CMsgGCAddGiftItem> {
	constructor() {
		super("CMsgGCAddGiftItem", [
			{
				no: 1,
				name: "gifter_account_id",
				kind: "scalar",
				localName: "gifter_account_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "receiver_account_id",
				kind: "scalar",
				localName: "receiver_account_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "wrapped_item",
				kind: "message",
				localName: "wrapped_item",
				T: () => CSOEconItem,
			},
			{
				no: 4,
				name: "gift_message",
				kind: "scalar",
				localName: "gift_message",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 5,
				name: "is_wallet_cash_trusted",
				kind: "scalar",
				localName: "is_wallet_cash_trusted",
				opt: true,
				T: 8 /*ScalarType.BOOL*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCAddGiftItem>): CMsgGCAddGiftItem {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCAddGiftItem>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCAddGiftItem,
	): CMsgGCAddGiftItem {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 gifter_account_id */ 1:
					message.gifter_account_id = reader.uint32();
					break;
				case /* optional uint32 receiver_account_id */ 2:
					message.receiver_account_id = reader.uint32();
					break;
				case /* optional CSOEconItem wrapped_item */ 3:
					message.wrapped_item = CSOEconItem.internalBinaryRead(reader, reader.uint32(), options, message.wrapped_item);
					break;
				case /* optional string gift_message */ 4:
					message.gift_message = reader.string();
					break;
				case /* optional bool is_wallet_cash_trusted */ 5:
					message.is_wallet_cash_trusted = reader.bool();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(message: CMsgGCAddGiftItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
		/* optional uint32 gifter_account_id = 1; */
		if (message.gifter_account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.gifter_account_id);
		/* optional uint32 receiver_account_id = 2; */
		if (message.receiver_account_id !== undefined) writer.tag(2, WireType.Varint).uint32(message.receiver_account_id);
		/* optional CSOEconItem wrapped_item = 3; */
		if (message.wrapped_item)
			CSOEconItem.internalBinaryWrite(
				message.wrapped_item,
				writer.tag(3, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* optional string gift_message = 4; */
		if (message.gift_message !== undefined) writer.tag(4, WireType.LengthDelimited).string(message.gift_message);
		/* optional bool is_wallet_cash_trusted = 5; */
		if (message.is_wallet_cash_trusted !== undefined)
			writer.tag(5, WireType.Varint).bool(message.is_wallet_cash_trusted);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCAddGiftItem
 */
export const CMsgGCAddGiftItem = new CMsgGCAddGiftItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCWrapAndDeliverGift$Type extends MessageType<CMsgClientToGCWrapAndDeliverGift> {
	constructor() {
		super("CMsgClientToGCWrapAndDeliverGift", [
			{
				no: 1,
				name: "item_id",
				kind: "scalar",
				localName: "item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 2,
				name: "give_to_account_id",
				kind: "scalar",
				localName: "give_to_account_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "gift_message",
				kind: "scalar",
				localName: "gift_message",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCWrapAndDeliverGift>): CMsgClientToGCWrapAndDeliverGift {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCWrapAndDeliverGift>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCWrapAndDeliverGift,
	): CMsgClientToGCWrapAndDeliverGift {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint64 item_id */ 1:
					message.item_id = reader.uint64().toBigInt();
					break;
				case /* optional uint32 give_to_account_id */ 2:
					message.give_to_account_id = reader.uint32();
					break;
				case /* optional string gift_message */ 3:
					message.gift_message = reader.string();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCWrapAndDeliverGift,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint64 item_id = 1; */
		if (message.item_id !== undefined) writer.tag(1, WireType.Varint).uint64(message.item_id);
		/* optional uint32 give_to_account_id = 2; */
		if (message.give_to_account_id !== undefined) writer.tag(2, WireType.Varint).uint32(message.give_to_account_id);
		/* optional string gift_message = 3; */
		if (message.gift_message !== undefined) writer.tag(3, WireType.LengthDelimited).string(message.gift_message);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCWrapAndDeliverGift
 */
export const CMsgClientToGCWrapAndDeliverGift = new CMsgClientToGCWrapAndDeliverGift$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgSQLGCToGCRevokeUntrustedGift$Type extends MessageType<CMsgSQLGCToGCRevokeUntrustedGift> {
	constructor() {
		super("CMsgSQLGCToGCRevokeUntrustedGift", [
			{
				no: 1,
				name: "account_id",
				kind: "scalar",
				localName: "account_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 4,
				name: "sent_item_id",
				kind: "scalar",
				localName: "sent_item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgSQLGCToGCRevokeUntrustedGift>): CMsgSQLGCToGCRevokeUntrustedGift {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgSQLGCToGCRevokeUntrustedGift>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgSQLGCToGCRevokeUntrustedGift,
	): CMsgSQLGCToGCRevokeUntrustedGift {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 account_id */ 1:
					message.account_id = reader.uint32();
					break;
				case /* optional uint64 sent_item_id */ 4:
					message.sent_item_id = reader.uint64().toBigInt();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgSQLGCToGCRevokeUntrustedGift,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 account_id = 1; */
		if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
		/* optional uint64 sent_item_id = 4; */
		if (message.sent_item_id !== undefined) writer.tag(4, WireType.Varint).uint64(message.sent_item_id);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgSQLGCToGCRevokeUntrustedGift
 */
export const CMsgSQLGCToGCRevokeUntrustedGift = new CMsgSQLGCToGCRevokeUntrustedGift$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCWrapAndDeliverGiftResponse$Type extends MessageType<CMsgClientToGCWrapAndDeliverGiftResponse> {
	constructor() {
		super("CMsgClientToGCWrapAndDeliverGiftResponse", [
			{
				no: 1,
				name: "response",
				kind: "enum",
				opt: true,
				T: () => ["EGCMsgResponse", EGCMsgResponse],
			},
			{
				no: 2,
				name: "gifting_charge_uses",
				kind: "scalar",
				localName: "gifting_charge_uses",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "gifting_charge_max",
				kind: "scalar",
				localName: "gifting_charge_max",
				opt: true,
				T: 5 /*ScalarType.INT32*/,
			},
			{
				no: 4,
				name: "gifting_uses",
				kind: "scalar",
				localName: "gifting_uses",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 5,
				name: "gifting_max",
				kind: "scalar",
				localName: "gifting_max",
				opt: true,
				T: 5 /*ScalarType.INT32*/,
			},
			{
				no: 6,
				name: "gifting_window_hours",
				kind: "scalar",
				localName: "gifting_window_hours",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 7,
				name: "trade_restriction",
				kind: "enum",
				localName: "trade_restriction",
				opt: true,
				T: () => ["EGCMsgInitiateTradeResponse", EGCMsgInitiateTradeResponse],
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCWrapAndDeliverGiftResponse>): CMsgClientToGCWrapAndDeliverGiftResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCWrapAndDeliverGiftResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCWrapAndDeliverGiftResponse,
	): CMsgClientToGCWrapAndDeliverGiftResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional EGCMsgResponse response */ 1:
					message.response = reader.int32();
					break;
				case /* optional uint32 gifting_charge_uses */ 2:
					message.gifting_charge_uses = reader.uint32();
					break;
				case /* optional int32 gifting_charge_max */ 3:
					message.gifting_charge_max = reader.int32();
					break;
				case /* optional uint32 gifting_uses */ 4:
					message.gifting_uses = reader.uint32();
					break;
				case /* optional int32 gifting_max */ 5:
					message.gifting_max = reader.int32();
					break;
				case /* optional uint32 gifting_window_hours */ 6:
					message.gifting_window_hours = reader.uint32();
					break;
				case /* optional EGCMsgInitiateTradeResponse trade_restriction */ 7:
					message.trade_restriction = reader.int32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCWrapAndDeliverGiftResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional EGCMsgResponse response = 1; */
		if (message.response !== undefined) writer.tag(1, WireType.Varint).int32(message.response);
		/* optional uint32 gifting_charge_uses = 2; */
		if (message.gifting_charge_uses !== undefined) writer.tag(2, WireType.Varint).uint32(message.gifting_charge_uses);
		/* optional int32 gifting_charge_max = 3; */
		if (message.gifting_charge_max !== undefined) writer.tag(3, WireType.Varint).int32(message.gifting_charge_max);
		/* optional uint32 gifting_uses = 4; */
		if (message.gifting_uses !== undefined) writer.tag(4, WireType.Varint).uint32(message.gifting_uses);
		/* optional int32 gifting_max = 5; */
		if (message.gifting_max !== undefined) writer.tag(5, WireType.Varint).int32(message.gifting_max);
		/* optional uint32 gifting_window_hours = 6; */
		if (message.gifting_window_hours !== undefined) writer.tag(6, WireType.Varint).uint32(message.gifting_window_hours);
		/* optional EGCMsgInitiateTradeResponse trade_restriction = 7; */
		if (message.trade_restriction !== undefined) writer.tag(7, WireType.Varint).int32(message.trade_restriction);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCWrapAndDeliverGiftResponse
 */
export const CMsgClientToGCWrapAndDeliverGiftResponse = new CMsgClientToGCWrapAndDeliverGiftResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCUnwrapGift$Type extends MessageType<CMsgClientToGCUnwrapGift> {
	constructor() {
		super("CMsgClientToGCUnwrapGift", [
			{
				no: 1,
				name: "item_id",
				kind: "scalar",
				localName: "item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCUnwrapGift>): CMsgClientToGCUnwrapGift {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCUnwrapGift>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCUnwrapGift,
	): CMsgClientToGCUnwrapGift {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint64 item_id */ 1:
					message.item_id = reader.uint64().toBigInt();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCUnwrapGift,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint64 item_id = 1; */
		if (message.item_id !== undefined) writer.tag(1, WireType.Varint).uint64(message.item_id);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCUnwrapGift
 */
export const CMsgClientToGCUnwrapGift = new CMsgClientToGCUnwrapGift$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetGiftPermissions$Type extends MessageType<CMsgClientToGCGetGiftPermissions> {
	constructor() {
		super("CMsgClientToGCGetGiftPermissions", []);
	}
	create(value?: PartialMessage<CMsgClientToGCGetGiftPermissions>): CMsgClientToGCGetGiftPermissions {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetGiftPermissions>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCGetGiftPermissions,
	): CMsgClientToGCGetGiftPermissions {
		return target ?? this.create();
	}
	internalBinaryWrite(
		message: CMsgClientToGCGetGiftPermissions,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetGiftPermissions
 */
export const CMsgClientToGCGetGiftPermissions = new CMsgClientToGCGetGiftPermissions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetGiftPermissionsResponse$Type extends MessageType<CMsgClientToGCGetGiftPermissionsResponse> {
	constructor() {
		super("CMsgClientToGCGetGiftPermissionsResponse", [
			{
				no: 1,
				name: "is_unlimited",
				kind: "scalar",
				localName: "is_unlimited",
				opt: true,
				T: 8 /*ScalarType.BOOL*/,
			},
			{
				no: 3,
				name: "has_two_factor",
				kind: "scalar",
				localName: "has_two_factor",
				opt: true,
				T: 8 /*ScalarType.BOOL*/,
			},
			{
				no: 6,
				name: "sender_permission",
				kind: "enum",
				localName: "sender_permission",
				opt: true,
				T: () => ["EGCMsgInitiateTradeResponse", EGCMsgInitiateTradeResponse],
			},
			{
				no: 7,
				name: "friendship_age_requirement",
				kind: "scalar",
				localName: "friendship_age_requirement",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 8,
				name: "friendship_age_requirement_two_factor",
				kind: "scalar",
				localName: "friendship_age_requirement_two_factor",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 9,
				name: "friend_permissions",
				kind: "message",
				localName: "friend_permissions",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: () => CMsgClientToGCGetGiftPermissionsResponse_FriendPermission,
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCGetGiftPermissionsResponse>): CMsgClientToGCGetGiftPermissionsResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.friend_permissions = [];
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetGiftPermissionsResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCGetGiftPermissionsResponse,
	): CMsgClientToGCGetGiftPermissionsResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional bool is_unlimited */ 1:
					message.is_unlimited = reader.bool();
					break;
				case /* optional bool has_two_factor */ 3:
					message.has_two_factor = reader.bool();
					break;
				case /* optional EGCMsgInitiateTradeResponse sender_permission */ 6:
					message.sender_permission = reader.int32();
					break;
				case /* optional uint32 friendship_age_requirement */ 7:
					message.friendship_age_requirement = reader.uint32();
					break;
				case /* optional uint32 friendship_age_requirement_two_factor */ 8:
					message.friendship_age_requirement_two_factor = reader.uint32();
					break;
				case /* repeated CMsgClientToGCGetGiftPermissionsResponse.FriendPermission friend_permissions */ 9:
					message.friend_permissions.push(
						CMsgClientToGCGetGiftPermissionsResponse_FriendPermission.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
						),
					);
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCGetGiftPermissionsResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional bool is_unlimited = 1; */
		if (message.is_unlimited !== undefined) writer.tag(1, WireType.Varint).bool(message.is_unlimited);
		/* optional bool has_two_factor = 3; */
		if (message.has_two_factor !== undefined) writer.tag(3, WireType.Varint).bool(message.has_two_factor);
		/* optional EGCMsgInitiateTradeResponse sender_permission = 6; */
		if (message.sender_permission !== undefined) writer.tag(6, WireType.Varint).int32(message.sender_permission);
		/* optional uint32 friendship_age_requirement = 7; */
		if (message.friendship_age_requirement !== undefined)
			writer.tag(7, WireType.Varint).uint32(message.friendship_age_requirement);
		/* optional uint32 friendship_age_requirement_two_factor = 8; */
		if (message.friendship_age_requirement_two_factor !== undefined)
			writer.tag(8, WireType.Varint).uint32(message.friendship_age_requirement_two_factor);
		/* repeated CMsgClientToGCGetGiftPermissionsResponse.FriendPermission friend_permissions = 9; */
		for (let i = 0; i < message.friend_permissions.length; i++)
			CMsgClientToGCGetGiftPermissionsResponse_FriendPermission.internalBinaryWrite(
				message.friend_permissions[i],
				writer.tag(9, WireType.LengthDelimited).fork(),
				options,
			).join();
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetGiftPermissionsResponse
 */
export const CMsgClientToGCGetGiftPermissionsResponse = new CMsgClientToGCGetGiftPermissionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetGiftPermissionsResponse_FriendPermission$Type extends MessageType<CMsgClientToGCGetGiftPermissionsResponse_FriendPermission> {
	constructor() {
		super("CMsgClientToGCGetGiftPermissionsResponse.FriendPermission", [
			{
				no: 1,
				name: "account_id",
				kind: "scalar",
				localName: "account_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "permission",
				kind: "enum",
				opt: true,
				T: () => ["EGCMsgInitiateTradeResponse", EGCMsgInitiateTradeResponse],
			},
		]);
	}
	create(
		value?: PartialMessage<CMsgClientToGCGetGiftPermissionsResponse_FriendPermission>,
	): CMsgClientToGCGetGiftPermissionsResponse_FriendPermission {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined)
			reflectionMergePartial<CMsgClientToGCGetGiftPermissionsResponse_FriendPermission>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCGetGiftPermissionsResponse_FriendPermission,
	): CMsgClientToGCGetGiftPermissionsResponse_FriendPermission {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 account_id */ 1:
					message.account_id = reader.uint32();
					break;
				case /* optional EGCMsgInitiateTradeResponse permission */ 2:
					message.permission = reader.int32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCGetGiftPermissionsResponse_FriendPermission,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 account_id = 1; */
		if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
		/* optional EGCMsgInitiateTradeResponse permission = 2; */
		if (message.permission !== undefined) writer.tag(2, WireType.Varint).int32(message.permission);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetGiftPermissionsResponse.FriendPermission
 */
export const CMsgClientToGCGetGiftPermissionsResponse_FriendPermission =
	new CMsgClientToGCGetGiftPermissionsResponse_FriendPermission$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCUnpackBundle$Type extends MessageType<CMsgClientToGCUnpackBundle> {
	constructor() {
		super("CMsgClientToGCUnpackBundle", [
			{
				no: 1,
				name: "item_id",
				kind: "scalar",
				localName: "item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCUnpackBundle>): CMsgClientToGCUnpackBundle {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCUnpackBundle>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCUnpackBundle,
	): CMsgClientToGCUnpackBundle {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint64 item_id */ 1:
					message.item_id = reader.uint64().toBigInt();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCUnpackBundle,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint64 item_id = 1; */
		if (message.item_id !== undefined) writer.tag(1, WireType.Varint).uint64(message.item_id);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCUnpackBundle
 */
export const CMsgClientToGCUnpackBundle = new CMsgClientToGCUnpackBundle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCUnpackBundleResponse$Type extends MessageType<CMsgClientToGCUnpackBundleResponse> {
	constructor() {
		super("CMsgClientToGCUnpackBundleResponse", [
			{
				no: 1,
				name: "unpacked_item_ids",
				kind: "scalar",
				localName: "unpacked_item_ids",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 2,
				name: "response",
				kind: "enum",
				opt: true,
				T: () => ["CMsgClientToGCUnpackBundleResponse.EUnpackBundle", CMsgClientToGCUnpackBundleResponse_EUnpackBundle],
			},
			{
				no: 3,
				name: "unpacked_item_def_indexes",
				kind: "scalar",
				localName: "unpacked_item_def_indexes",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCUnpackBundleResponse>): CMsgClientToGCUnpackBundleResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.unpacked_item_ids = [];
		message.unpacked_item_def_indexes = [];
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCUnpackBundleResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCUnpackBundleResponse,
	): CMsgClientToGCUnpackBundleResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* repeated uint64 unpacked_item_ids */ 1:
					if (wireType === WireType.LengthDelimited)
						for (let e = reader.int32() + reader.pos; reader.pos < e; )
							message.unpacked_item_ids.push(reader.uint64().toBigInt());
					else message.unpacked_item_ids.push(reader.uint64().toBigInt());
					break;
				case /* optional CMsgClientToGCUnpackBundleResponse.EUnpackBundle response */ 2:
					message.response = reader.int32();
					break;
				case /* repeated uint32 unpacked_item_def_indexes */ 3:
					if (wireType === WireType.LengthDelimited)
						for (let e = reader.int32() + reader.pos; reader.pos < e; )
							message.unpacked_item_def_indexes.push(reader.uint32());
					else message.unpacked_item_def_indexes.push(reader.uint32());
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCUnpackBundleResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* repeated uint64 unpacked_item_ids = 1; */
		for (let i = 0; i < message.unpacked_item_ids.length; i++)
			writer.tag(1, WireType.Varint).uint64(message.unpacked_item_ids[i]);
		/* optional CMsgClientToGCUnpackBundleResponse.EUnpackBundle response = 2; */
		if (message.response !== undefined) writer.tag(2, WireType.Varint).int32(message.response);
		/* repeated uint32 unpacked_item_def_indexes = 3; */
		for (let i = 0; i < message.unpacked_item_def_indexes.length; i++)
			writer.tag(3, WireType.Varint).uint32(message.unpacked_item_def_indexes[i]);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCUnpackBundleResponse
 */
export const CMsgClientToGCUnpackBundleResponse = new CMsgClientToGCUnpackBundleResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPackBundle$Type extends MessageType<CMsgClientToGCPackBundle> {
	constructor() {
		super("CMsgClientToGCPackBundle", [
			{
				no: 1,
				name: "item_ids",
				kind: "scalar",
				localName: "item_ids",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 2,
				name: "bundle_item_def_index",
				kind: "scalar",
				localName: "bundle_item_def_index",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCPackBundle>): CMsgClientToGCPackBundle {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.item_ids = [];
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCPackBundle>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCPackBundle,
	): CMsgClientToGCPackBundle {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* repeated uint64 item_ids */ 1:
					if (wireType === WireType.LengthDelimited)
						for (let e = reader.int32() + reader.pos; reader.pos < e; )
							message.item_ids.push(reader.uint64().toBigInt());
					else message.item_ids.push(reader.uint64().toBigInt());
					break;
				case /* optional uint32 bundle_item_def_index */ 2:
					message.bundle_item_def_index = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCPackBundle,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* repeated uint64 item_ids = 1; */
		for (let i = 0; i < message.item_ids.length; i++) writer.tag(1, WireType.Varint).uint64(message.item_ids[i]);
		/* optional uint32 bundle_item_def_index = 2; */
		if (message.bundle_item_def_index !== undefined)
			writer.tag(2, WireType.Varint).uint32(message.bundle_item_def_index);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPackBundle
 */
export const CMsgClientToGCPackBundle = new CMsgClientToGCPackBundle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPackBundleResponse$Type extends MessageType<CMsgClientToGCPackBundleResponse> {
	constructor() {
		super("CMsgClientToGCPackBundleResponse", [
			{
				no: 1,
				name: "item_id",
				kind: "scalar",
				localName: "item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 2,
				name: "response",
				kind: "enum",
				opt: true,
				T: () => ["CMsgClientToGCPackBundleResponse.EPackBundle", CMsgClientToGCPackBundleResponse_EPackBundle],
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCPackBundleResponse>): CMsgClientToGCPackBundleResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCPackBundleResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCPackBundleResponse,
	): CMsgClientToGCPackBundleResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint64 item_id */ 1:
					message.item_id = reader.uint64().toBigInt();
					break;
				case /* optional CMsgClientToGCPackBundleResponse.EPackBundle response */ 2:
					message.response = reader.int32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCPackBundleResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint64 item_id = 1; */
		if (message.item_id !== undefined) writer.tag(1, WireType.Varint).uint64(message.item_id);
		/* optional CMsgClientToGCPackBundleResponse.EPackBundle response = 2; */
		if (message.response !== undefined) writer.tag(2, WireType.Varint).int32(message.response);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPackBundleResponse
 */
export const CMsgClientToGCPackBundleResponse = new CMsgClientToGCPackBundleResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToClientStoreTransactionCompleted$Type extends MessageType<CMsgGCToClientStoreTransactionCompleted> {
	constructor() {
		super("CMsgGCToClientStoreTransactionCompleted", [
			{
				no: 1,
				name: "txn_id",
				kind: "scalar",
				localName: "txn_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 2,
				name: "item_ids",
				kind: "scalar",
				localName: "item_ids",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToClientStoreTransactionCompleted>): CMsgGCToClientStoreTransactionCompleted {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.item_ids = [];
		if (value !== undefined) reflectionMergePartial<CMsgGCToClientStoreTransactionCompleted>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToClientStoreTransactionCompleted,
	): CMsgGCToClientStoreTransactionCompleted {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint64 txn_id */ 1:
					message.txn_id = reader.uint64().toBigInt();
					break;
				case /* repeated uint64 item_ids */ 2:
					if (wireType === WireType.LengthDelimited)
						for (let e = reader.int32() + reader.pos; reader.pos < e; )
							message.item_ids.push(reader.uint64().toBigInt());
					else message.item_ids.push(reader.uint64().toBigInt());
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToClientStoreTransactionCompleted,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint64 txn_id = 1; */
		if (message.txn_id !== undefined) writer.tag(1, WireType.Varint).uint64(message.txn_id);
		/* repeated uint64 item_ids = 2; */
		for (let i = 0; i < message.item_ids.length; i++) writer.tag(2, WireType.Varint).uint64(message.item_ids[i]);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToClientStoreTransactionCompleted
 */
export const CMsgGCToClientStoreTransactionCompleted = new CMsgGCToClientStoreTransactionCompleted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCEquipItems$Type extends MessageType<CMsgClientToGCEquipItems> {
	constructor() {
		super("CMsgClientToGCEquipItems", [
			{
				no: 1,
				name: "equips",
				kind: "message",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: () => CMsgAdjustItemEquippedState,
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCEquipItems>): CMsgClientToGCEquipItems {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.equips = [];
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCEquipItems>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCEquipItems,
	): CMsgClientToGCEquipItems {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* repeated CMsgAdjustItemEquippedState equips */ 1:
					message.equips.push(CMsgAdjustItemEquippedState.internalBinaryRead(reader, reader.uint32(), options));
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCEquipItems,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* repeated CMsgAdjustItemEquippedState equips = 1; */
		for (let i = 0; i < message.equips.length; i++)
			CMsgAdjustItemEquippedState.internalBinaryWrite(
				message.equips[i],
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join();
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCEquipItems
 */
export const CMsgClientToGCEquipItems = new CMsgClientToGCEquipItems$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCEquipItemsResponse$Type extends MessageType<CMsgClientToGCEquipItemsResponse> {
	constructor() {
		super("CMsgClientToGCEquipItemsResponse", [
			{
				no: 1,
				name: "so_cache_version_id",
				kind: "scalar",
				localName: "so_cache_version_id",
				opt: true,
				T: 6 /*ScalarType.FIXED64*/,
				L: 0 /*LongType.BIGINT*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCEquipItemsResponse>): CMsgClientToGCEquipItemsResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCEquipItemsResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCEquipItemsResponse,
	): CMsgClientToGCEquipItemsResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional fixed64 so_cache_version_id */ 1:
					message.so_cache_version_id = reader.fixed64().toBigInt();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCEquipItemsResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional fixed64 so_cache_version_id = 1; */
		if (message.so_cache_version_id !== undefined) writer.tag(1, WireType.Bit64).fixed64(message.so_cache_version_id);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCEquipItemsResponse
 */
export const CMsgClientToGCEquipItemsResponse = new CMsgClientToGCEquipItemsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCSetItemStyle$Type extends MessageType<CMsgClientToGCSetItemStyle> {
	constructor() {
		super("CMsgClientToGCSetItemStyle", [
			{
				no: 1,
				name: "item_id",
				kind: "scalar",
				localName: "item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 2,
				name: "style_index",
				kind: "scalar",
				localName: "style_index",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCSetItemStyle>): CMsgClientToGCSetItemStyle {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCSetItemStyle>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCSetItemStyle,
	): CMsgClientToGCSetItemStyle {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint64 item_id */ 1:
					message.item_id = reader.uint64().toBigInt();
					break;
				case /* optional uint32 style_index */ 2:
					message.style_index = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCSetItemStyle,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint64 item_id = 1; */
		if (message.item_id !== undefined) writer.tag(1, WireType.Varint).uint64(message.item_id);
		/* optional uint32 style_index = 2; */
		if (message.style_index !== undefined) writer.tag(2, WireType.Varint).uint32(message.style_index);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCSetItemStyle
 */
export const CMsgClientToGCSetItemStyle = new CMsgClientToGCSetItemStyle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCSetItemStyleResponse$Type extends MessageType<CMsgClientToGCSetItemStyleResponse> {
	constructor() {
		super("CMsgClientToGCSetItemStyleResponse", [
			{
				no: 1,
				name: "response",
				kind: "enum",
				opt: true,
				T: () => ["CMsgClientToGCSetItemStyleResponse.ESetStyle", CMsgClientToGCSetItemStyleResponse_ESetStyle],
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCSetItemStyleResponse>): CMsgClientToGCSetItemStyleResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCSetItemStyleResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCSetItemStyleResponse,
	): CMsgClientToGCSetItemStyleResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional CMsgClientToGCSetItemStyleResponse.ESetStyle response */ 1:
					message.response = reader.int32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCSetItemStyleResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional CMsgClientToGCSetItemStyleResponse.ESetStyle response = 1; */
		if (message.response !== undefined) writer.tag(1, WireType.Varint).int32(message.response);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCSetItemStyleResponse
 */
export const CMsgClientToGCSetItemStyleResponse = new CMsgClientToGCSetItemStyleResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCUnlockItemStyle$Type extends MessageType<CMsgClientToGCUnlockItemStyle> {
	constructor() {
		super("CMsgClientToGCUnlockItemStyle", [
			{
				no: 1,
				name: "item_to_unlock",
				kind: "scalar",
				localName: "item_to_unlock",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 2,
				name: "style_index",
				kind: "scalar",
				localName: "style_index",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "consumable_item_ids",
				kind: "scalar",
				localName: "consumable_item_ids",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCUnlockItemStyle>): CMsgClientToGCUnlockItemStyle {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.consumable_item_ids = [];
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCUnlockItemStyle>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCUnlockItemStyle,
	): CMsgClientToGCUnlockItemStyle {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint64 item_to_unlock */ 1:
					message.item_to_unlock = reader.uint64().toBigInt();
					break;
				case /* optional uint32 style_index */ 2:
					message.style_index = reader.uint32();
					break;
				case /* repeated uint64 consumable_item_ids */ 3:
					if (wireType === WireType.LengthDelimited)
						for (let e = reader.int32() + reader.pos; reader.pos < e; )
							message.consumable_item_ids.push(reader.uint64().toBigInt());
					else message.consumable_item_ids.push(reader.uint64().toBigInt());
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCUnlockItemStyle,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint64 item_to_unlock = 1; */
		if (message.item_to_unlock !== undefined) writer.tag(1, WireType.Varint).uint64(message.item_to_unlock);
		/* optional uint32 style_index = 2; */
		if (message.style_index !== undefined) writer.tag(2, WireType.Varint).uint32(message.style_index);
		/* repeated uint64 consumable_item_ids = 3; */
		for (let i = 0; i < message.consumable_item_ids.length; i++)
			writer.tag(3, WireType.Varint).uint64(message.consumable_item_ids[i]);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCUnlockItemStyle
 */
export const CMsgClientToGCUnlockItemStyle = new CMsgClientToGCUnlockItemStyle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCUnlockItemStyleResponse$Type extends MessageType<CMsgClientToGCUnlockItemStyleResponse> {
	constructor() {
		super("CMsgClientToGCUnlockItemStyleResponse", [
			{
				no: 1,
				name: "response",
				kind: "enum",
				opt: true,
				T: () => [
					"CMsgClientToGCUnlockItemStyleResponse.EUnlockStyle",
					CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle,
				],
			},
			{
				no: 2,
				name: "item_id",
				kind: "scalar",
				localName: "item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 3,
				name: "style_index",
				kind: "scalar",
				localName: "style_index",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 4,
				name: "style_prereq",
				kind: "scalar",
				localName: "style_prereq",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCUnlockItemStyleResponse>): CMsgClientToGCUnlockItemStyleResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCUnlockItemStyleResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCUnlockItemStyleResponse,
	): CMsgClientToGCUnlockItemStyleResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional CMsgClientToGCUnlockItemStyleResponse.EUnlockStyle response */ 1:
					message.response = reader.int32();
					break;
				case /* optional uint64 item_id */ 2:
					message.item_id = reader.uint64().toBigInt();
					break;
				case /* optional uint32 style_index */ 3:
					message.style_index = reader.uint32();
					break;
				case /* optional uint32 style_prereq */ 4:
					message.style_prereq = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCUnlockItemStyleResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional CMsgClientToGCUnlockItemStyleResponse.EUnlockStyle response = 1; */
		if (message.response !== undefined) writer.tag(1, WireType.Varint).int32(message.response);
		/* optional uint64 item_id = 2; */
		if (message.item_id !== undefined) writer.tag(2, WireType.Varint).uint64(message.item_id);
		/* optional uint32 style_index = 3; */
		if (message.style_index !== undefined) writer.tag(3, WireType.Varint).uint32(message.style_index);
		/* optional uint32 style_prereq = 4; */
		if (message.style_prereq !== undefined) writer.tag(4, WireType.Varint).uint32(message.style_prereq);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCUnlockItemStyleResponse
 */
export const CMsgClientToGCUnlockItemStyleResponse = new CMsgClientToGCUnlockItemStyleResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCSetItemInventoryCategory$Type extends MessageType<CMsgClientToGCSetItemInventoryCategory> {
	constructor() {
		super("CMsgClientToGCSetItemInventoryCategory", [
			{
				no: 1,
				name: "item_ids",
				kind: "scalar",
				localName: "item_ids",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 2,
				name: "set_to_value",
				kind: "scalar",
				localName: "set_to_value",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "remove_categories",
				kind: "scalar",
				localName: "remove_categories",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 4,
				name: "add_categories",
				kind: "scalar",
				localName: "add_categories",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCSetItemInventoryCategory>): CMsgClientToGCSetItemInventoryCategory {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.item_ids = [];
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCSetItemInventoryCategory>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCSetItemInventoryCategory,
	): CMsgClientToGCSetItemInventoryCategory {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* repeated uint64 item_ids */ 1:
					if (wireType === WireType.LengthDelimited)
						for (let e = reader.int32() + reader.pos; reader.pos < e; )
							message.item_ids.push(reader.uint64().toBigInt());
					else message.item_ids.push(reader.uint64().toBigInt());
					break;
				case /* optional uint32 set_to_value */ 2:
					message.set_to_value = reader.uint32();
					break;
				case /* optional uint32 remove_categories */ 3:
					message.remove_categories = reader.uint32();
					break;
				case /* optional uint32 add_categories */ 4:
					message.add_categories = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCSetItemInventoryCategory,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* repeated uint64 item_ids = 1; */
		for (let i = 0; i < message.item_ids.length; i++) writer.tag(1, WireType.Varint).uint64(message.item_ids[i]);
		/* optional uint32 set_to_value = 2; */
		if (message.set_to_value !== undefined) writer.tag(2, WireType.Varint).uint32(message.set_to_value);
		/* optional uint32 remove_categories = 3; */
		if (message.remove_categories !== undefined) writer.tag(3, WireType.Varint).uint32(message.remove_categories);
		/* optional uint32 add_categories = 4; */
		if (message.add_categories !== undefined) writer.tag(4, WireType.Varint).uint32(message.add_categories);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCSetItemInventoryCategory
 */
export const CMsgClientToGCSetItemInventoryCategory = new CMsgClientToGCSetItemInventoryCategory$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCUnlockCrate$Type extends MessageType<CMsgClientToGCUnlockCrate> {
	constructor() {
		super("CMsgClientToGCUnlockCrate", [
			{
				no: 1,
				name: "crate_item_id",
				kind: "scalar",
				localName: "crate_item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 2,
				name: "key_item_id",
				kind: "scalar",
				localName: "key_item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCUnlockCrate>): CMsgClientToGCUnlockCrate {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCUnlockCrate>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCUnlockCrate,
	): CMsgClientToGCUnlockCrate {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint64 crate_item_id */ 1:
					message.crate_item_id = reader.uint64().toBigInt();
					break;
				case /* optional uint64 key_item_id */ 2:
					message.key_item_id = reader.uint64().toBigInt();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCUnlockCrate,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint64 crate_item_id = 1; */
		if (message.crate_item_id !== undefined) writer.tag(1, WireType.Varint).uint64(message.crate_item_id);
		/* optional uint64 key_item_id = 2; */
		if (message.key_item_id !== undefined) writer.tag(2, WireType.Varint).uint64(message.key_item_id);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCUnlockCrate
 */
export const CMsgClientToGCUnlockCrate = new CMsgClientToGCUnlockCrate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCUnlockCrateResponse$Type extends MessageType<CMsgClientToGCUnlockCrateResponse> {
	constructor() {
		super("CMsgClientToGCUnlockCrateResponse", [
			{
				no: 1,
				name: "result",
				kind: "enum",
				opt: true,
				T: () => ["EGCMsgResponse", EGCMsgResponse],
			},
			{
				no: 2,
				name: "granted_items",
				kind: "message",
				localName: "granted_items",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: () => CMsgClientToGCUnlockCrateResponse_Item,
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCUnlockCrateResponse>): CMsgClientToGCUnlockCrateResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.granted_items = [];
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCUnlockCrateResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCUnlockCrateResponse,
	): CMsgClientToGCUnlockCrateResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional EGCMsgResponse result */ 1:
					message.result = reader.int32();
					break;
				case /* repeated CMsgClientToGCUnlockCrateResponse.Item granted_items */ 2:
					message.granted_items.push(
						CMsgClientToGCUnlockCrateResponse_Item.internalBinaryRead(reader, reader.uint32(), options),
					);
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCUnlockCrateResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional EGCMsgResponse result = 1; */
		if (message.result !== undefined) writer.tag(1, WireType.Varint).int32(message.result);
		/* repeated CMsgClientToGCUnlockCrateResponse.Item granted_items = 2; */
		for (let i = 0; i < message.granted_items.length; i++)
			CMsgClientToGCUnlockCrateResponse_Item.internalBinaryWrite(
				message.granted_items[i],
				writer.tag(2, WireType.LengthDelimited).fork(),
				options,
			).join();
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCUnlockCrateResponse
 */
export const CMsgClientToGCUnlockCrateResponse = new CMsgClientToGCUnlockCrateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCUnlockCrateResponse_Item$Type extends MessageType<CMsgClientToGCUnlockCrateResponse_Item> {
	constructor() {
		super("CMsgClientToGCUnlockCrateResponse.Item", [
			{
				no: 1,
				name: "item_id",
				kind: "scalar",
				localName: "item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 2,
				name: "def_index",
				kind: "scalar",
				localName: "def_index",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCUnlockCrateResponse_Item>): CMsgClientToGCUnlockCrateResponse_Item {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCUnlockCrateResponse_Item>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCUnlockCrateResponse_Item,
	): CMsgClientToGCUnlockCrateResponse_Item {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint64 item_id */ 1:
					message.item_id = reader.uint64().toBigInt();
					break;
				case /* optional uint32 def_index */ 2:
					message.def_index = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCUnlockCrateResponse_Item,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint64 item_id = 1; */
		if (message.item_id !== undefined) writer.tag(1, WireType.Varint).uint64(message.item_id);
		/* optional uint32 def_index = 2; */
		if (message.def_index !== undefined) writer.tag(2, WireType.Varint).uint32(message.def_index);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCUnlockCrateResponse.Item
 */
export const CMsgClientToGCUnlockCrateResponse_Item = new CMsgClientToGCUnlockCrateResponse_Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCRemoveItemAttribute$Type extends MessageType<CMsgClientToGCRemoveItemAttribute> {
	constructor() {
		super("CMsgClientToGCRemoveItemAttribute", [
			{
				no: 1,
				name: "item_id",
				kind: "scalar",
				localName: "item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCRemoveItemAttribute>): CMsgClientToGCRemoveItemAttribute {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCRemoveItemAttribute>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCRemoveItemAttribute,
	): CMsgClientToGCRemoveItemAttribute {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint64 item_id */ 1:
					message.item_id = reader.uint64().toBigInt();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCRemoveItemAttribute,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint64 item_id = 1; */
		if (message.item_id !== undefined) writer.tag(1, WireType.Varint).uint64(message.item_id);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCRemoveItemAttribute
 */
export const CMsgClientToGCRemoveItemAttribute = new CMsgClientToGCRemoveItemAttribute$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCRemoveItemAttributeResponse$Type extends MessageType<CMsgClientToGCRemoveItemAttributeResponse> {
	constructor() {
		super("CMsgClientToGCRemoveItemAttributeResponse", [
			{
				no: 1,
				name: "response",
				kind: "enum",
				opt: true,
				T: () => [
					"CMsgClientToGCRemoveItemAttributeResponse.ERemoveItemAttribute",
					CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute,
				],
			},
			{
				no: 2,
				name: "item_id",
				kind: "scalar",
				localName: "item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCRemoveItemAttributeResponse>): CMsgClientToGCRemoveItemAttributeResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCRemoveItemAttributeResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCRemoveItemAttributeResponse,
	): CMsgClientToGCRemoveItemAttributeResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional CMsgClientToGCRemoveItemAttributeResponse.ERemoveItemAttribute response */ 1:
					message.response = reader.int32();
					break;
				case /* optional uint64 item_id */ 2:
					message.item_id = reader.uint64().toBigInt();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCRemoveItemAttributeResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional CMsgClientToGCRemoveItemAttributeResponse.ERemoveItemAttribute response = 1; */
		if (message.response !== undefined) writer.tag(1, WireType.Varint).int32(message.response);
		/* optional uint64 item_id = 2; */
		if (message.item_id !== undefined) writer.tag(2, WireType.Varint).uint64(message.item_id);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCRemoveItemAttributeResponse
 */
export const CMsgClientToGCRemoveItemAttributeResponse = new CMsgClientToGCRemoveItemAttributeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCNameItem$Type extends MessageType<CMsgClientToGCNameItem> {
	constructor() {
		super("CMsgClientToGCNameItem", [
			{
				no: 1,
				name: "subject_item_id",
				kind: "scalar",
				localName: "subject_item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 2,
				name: "tool_item_id",
				kind: "scalar",
				localName: "tool_item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 3,
				name: "name",
				kind: "scalar",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCNameItem>): CMsgClientToGCNameItem {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCNameItem>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCNameItem,
	): CMsgClientToGCNameItem {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint64 subject_item_id */ 1:
					message.subject_item_id = reader.uint64().toBigInt();
					break;
				case /* optional uint64 tool_item_id */ 2:
					message.tool_item_id = reader.uint64().toBigInt();
					break;
				case /* optional string name */ 3:
					message.name = reader.string();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCNameItem,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint64 subject_item_id = 1; */
		if (message.subject_item_id !== undefined) writer.tag(1, WireType.Varint).uint64(message.subject_item_id);
		/* optional uint64 tool_item_id = 2; */
		if (message.tool_item_id !== undefined) writer.tag(2, WireType.Varint).uint64(message.tool_item_id);
		/* optional string name = 3; */
		if (message.name !== undefined) writer.tag(3, WireType.LengthDelimited).string(message.name);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCNameItem
 */
export const CMsgClientToGCNameItem = new CMsgClientToGCNameItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCNameItemResponse$Type extends MessageType<CMsgClientToGCNameItemResponse> {
	constructor() {
		super("CMsgClientToGCNameItemResponse", [
			{
				no: 1,
				name: "response",
				kind: "enum",
				opt: true,
				T: () => ["CMsgClientToGCNameItemResponse.ENameItem", CMsgClientToGCNameItemResponse_ENameItem],
			},
			{
				no: 2,
				name: "item_id",
				kind: "scalar",
				localName: "item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCNameItemResponse>): CMsgClientToGCNameItemResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCNameItemResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCNameItemResponse,
	): CMsgClientToGCNameItemResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional CMsgClientToGCNameItemResponse.ENameItem response */ 1:
					message.response = reader.int32();
					break;
				case /* optional uint64 item_id */ 2:
					message.item_id = reader.uint64().toBigInt();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCNameItemResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional CMsgClientToGCNameItemResponse.ENameItem response = 1; */
		if (message.response !== undefined) writer.tag(1, WireType.Varint).int32(message.response);
		/* optional uint64 item_id = 2; */
		if (message.item_id !== undefined) writer.tag(2, WireType.Varint).uint64(message.item_id);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCNameItemResponse
 */
export const CMsgClientToGCNameItemResponse = new CMsgClientToGCNameItemResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCSetItemPosition$Type extends MessageType<CMsgGCSetItemPosition> {
	constructor() {
		super("CMsgGCSetItemPosition", [
			{
				no: 1,
				name: "item_id",
				kind: "scalar",
				localName: "item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 2,
				name: "new_position",
				kind: "scalar",
				localName: "new_position",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCSetItemPosition>): CMsgGCSetItemPosition {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCSetItemPosition>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCSetItemPosition,
	): CMsgGCSetItemPosition {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint64 item_id */ 1:
					message.item_id = reader.uint64().toBigInt();
					break;
				case /* optional uint32 new_position */ 2:
					message.new_position = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCSetItemPosition,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint64 item_id = 1; */
		if (message.item_id !== undefined) writer.tag(1, WireType.Varint).uint64(message.item_id);
		/* optional uint32 new_position = 2; */
		if (message.new_position !== undefined) writer.tag(2, WireType.Varint).uint32(message.new_position);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCSetItemPosition
 */
export const CMsgGCSetItemPosition = new CMsgGCSetItemPosition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CAttribute_ItemDynamicRecipeComponent$Type extends MessageType<CAttribute_ItemDynamicRecipeComponent> {
	constructor() {
		super("CAttribute_ItemDynamicRecipeComponent", [
			{
				no: 1,
				name: "item_def",
				kind: "scalar",
				localName: "item_def",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "item_quality",
				kind: "scalar",
				localName: "item_quality",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "item_flags",
				kind: "scalar",
				localName: "item_flags",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 4,
				name: "attributes_string",
				kind: "scalar",
				localName: "attributes_string",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 5,
				name: "item_count",
				kind: "scalar",
				localName: "item_count",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 6,
				name: "items_fulfilled",
				kind: "scalar",
				localName: "items_fulfilled",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 7,
				name: "item_rarity",
				kind: "scalar",
				localName: "item_rarity",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 8,
				name: "lootlist",
				kind: "scalar",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 9,
				name: "fulfilled_item_id",
				kind: "scalar",
				localName: "fulfilled_item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 10,
				name: "associated_item_def",
				kind: "scalar",
				localName: "associated_item_def",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CAttribute_ItemDynamicRecipeComponent>): CAttribute_ItemDynamicRecipeComponent {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CAttribute_ItemDynamicRecipeComponent>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CAttribute_ItemDynamicRecipeComponent,
	): CAttribute_ItemDynamicRecipeComponent {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 item_def */ 1:
					message.item_def = reader.uint32();
					break;
				case /* optional uint32 item_quality */ 2:
					message.item_quality = reader.uint32();
					break;
				case /* optional uint32 item_flags */ 3:
					message.item_flags = reader.uint32();
					break;
				case /* optional string attributes_string */ 4:
					message.attributes_string = reader.string();
					break;
				case /* optional uint32 item_count */ 5:
					message.item_count = reader.uint32();
					break;
				case /* optional uint32 items_fulfilled */ 6:
					message.items_fulfilled = reader.uint32();
					break;
				case /* optional uint32 item_rarity */ 7:
					message.item_rarity = reader.uint32();
					break;
				case /* optional string lootlist */ 8:
					message.lootlist = reader.string();
					break;
				case /* optional uint64 fulfilled_item_id */ 9:
					message.fulfilled_item_id = reader.uint64().toBigInt();
					break;
				case /* optional uint32 associated_item_def */ 10:
					message.associated_item_def = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CAttribute_ItemDynamicRecipeComponent,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 item_def = 1; */
		if (message.item_def !== undefined) writer.tag(1, WireType.Varint).uint32(message.item_def);
		/* optional uint32 item_quality = 2; */
		if (message.item_quality !== undefined) writer.tag(2, WireType.Varint).uint32(message.item_quality);
		/* optional uint32 item_flags = 3; */
		if (message.item_flags !== undefined) writer.tag(3, WireType.Varint).uint32(message.item_flags);
		/* optional string attributes_string = 4; */
		if (message.attributes_string !== undefined)
			writer.tag(4, WireType.LengthDelimited).string(message.attributes_string);
		/* optional uint32 item_count = 5; */
		if (message.item_count !== undefined) writer.tag(5, WireType.Varint).uint32(message.item_count);
		/* optional uint32 items_fulfilled = 6; */
		if (message.items_fulfilled !== undefined) writer.tag(6, WireType.Varint).uint32(message.items_fulfilled);
		/* optional uint32 item_rarity = 7; */
		if (message.item_rarity !== undefined) writer.tag(7, WireType.Varint).uint32(message.item_rarity);
		/* optional string lootlist = 8; */
		if (message.lootlist !== undefined) writer.tag(8, WireType.LengthDelimited).string(message.lootlist);
		/* optional uint64 fulfilled_item_id = 9; */
		if (message.fulfilled_item_id !== undefined) writer.tag(9, WireType.Varint).uint64(message.fulfilled_item_id);
		/* optional uint32 associated_item_def = 10; */
		if (message.associated_item_def !== undefined) writer.tag(10, WireType.Varint).uint32(message.associated_item_def);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CAttribute_ItemDynamicRecipeComponent
 */
export const CAttribute_ItemDynamicRecipeComponent = new CAttribute_ItemDynamicRecipeComponent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CProtoItemSocket$Type extends MessageType<CProtoItemSocket> {
	constructor() {
		super("CProtoItemSocket", [
			{
				no: 1,
				name: "item_id",
				kind: "scalar",
				localName: "item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 2,
				name: "attr_def_index",
				kind: "scalar",
				localName: "attr_def_index",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "required_type",
				kind: "scalar",
				localName: "required_type",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 4,
				name: "required_hero",
				kind: "scalar",
				localName: "required_hero",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 5,
				name: "gem_def_index",
				kind: "scalar",
				localName: "gem_def_index",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 6,
				name: "not_tradable",
				kind: "scalar",
				localName: "not_tradable",
				opt: true,
				T: 8 /*ScalarType.BOOL*/,
			},
			{
				no: 7,
				name: "required_item_slot",
				kind: "scalar",
				localName: "required_item_slot",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
		]);
	}
	create(value?: PartialMessage<CProtoItemSocket>): CProtoItemSocket {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CProtoItemSocket>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CProtoItemSocket,
	): CProtoItemSocket {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint64 item_id */ 1:
					message.item_id = reader.uint64().toBigInt();
					break;
				case /* optional uint32 attr_def_index */ 2:
					message.attr_def_index = reader.uint32();
					break;
				case /* optional uint32 required_type */ 3:
					message.required_type = reader.uint32();
					break;
				case /* optional string required_hero */ 4:
					message.required_hero = reader.string();
					break;
				case /* optional uint32 gem_def_index */ 5:
					message.gem_def_index = reader.uint32();
					break;
				case /* optional bool not_tradable */ 6:
					message.not_tradable = reader.bool();
					break;
				case /* optional string required_item_slot */ 7:
					message.required_item_slot = reader.string();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(message: CProtoItemSocket, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
		/* optional uint64 item_id = 1; */
		if (message.item_id !== undefined) writer.tag(1, WireType.Varint).uint64(message.item_id);
		/* optional uint32 attr_def_index = 2; */
		if (message.attr_def_index !== undefined) writer.tag(2, WireType.Varint).uint32(message.attr_def_index);
		/* optional uint32 required_type = 3; */
		if (message.required_type !== undefined) writer.tag(3, WireType.Varint).uint32(message.required_type);
		/* optional string required_hero = 4; */
		if (message.required_hero !== undefined) writer.tag(4, WireType.LengthDelimited).string(message.required_hero);
		/* optional uint32 gem_def_index = 5; */
		if (message.gem_def_index !== undefined) writer.tag(5, WireType.Varint).uint32(message.gem_def_index);
		/* optional bool not_tradable = 6; */
		if (message.not_tradable !== undefined) writer.tag(6, WireType.Varint).bool(message.not_tradable);
		/* optional string required_item_slot = 7; */
		if (message.required_item_slot !== undefined)
			writer.tag(7, WireType.LengthDelimited).string(message.required_item_slot);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CProtoItemSocket
 */
export const CProtoItemSocket = new CProtoItemSocket$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CProtoItemSocket_Empty$Type extends MessageType<CProtoItemSocket_Empty> {
	constructor() {
		super("CProtoItemSocket_Empty", [{ no: 1, name: "socket", kind: "message", T: () => CProtoItemSocket }]);
	}
	create(value?: PartialMessage<CProtoItemSocket_Empty>): CProtoItemSocket_Empty {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CProtoItemSocket_Empty>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CProtoItemSocket_Empty,
	): CProtoItemSocket_Empty {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional CProtoItemSocket socket */ 1:
					message.socket = CProtoItemSocket.internalBinaryRead(reader, reader.uint32(), options, message.socket);
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CProtoItemSocket_Empty,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional CProtoItemSocket socket = 1; */
		if (message.socket)
			CProtoItemSocket.internalBinaryWrite(
				message.socket,
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join();
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CProtoItemSocket_Empty
 */
export const CProtoItemSocket_Empty = new CProtoItemSocket_Empty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CProtoItemSocket_Effect$Type extends MessageType<CProtoItemSocket_Effect> {
	constructor() {
		super("CProtoItemSocket_Effect", [
			{ no: 1, name: "socket", kind: "message", T: () => CProtoItemSocket },
			{
				no: 2,
				name: "effect",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CProtoItemSocket_Effect>): CProtoItemSocket_Effect {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CProtoItemSocket_Effect>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CProtoItemSocket_Effect,
	): CProtoItemSocket_Effect {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional CProtoItemSocket socket */ 1:
					message.socket = CProtoItemSocket.internalBinaryRead(reader, reader.uint32(), options, message.socket);
					break;
				case /* optional uint32 effect */ 2:
					message.effect = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CProtoItemSocket_Effect,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional CProtoItemSocket socket = 1; */
		if (message.socket)
			CProtoItemSocket.internalBinaryWrite(
				message.socket,
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* optional uint32 effect = 2; */
		if (message.effect !== undefined) writer.tag(2, WireType.Varint).uint32(message.effect);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CProtoItemSocket_Effect
 */
export const CProtoItemSocket_Effect = new CProtoItemSocket_Effect$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CProtoItemSocket_Color$Type extends MessageType<CProtoItemSocket_Color> {
	constructor() {
		super("CProtoItemSocket_Color", [
			{ no: 1, name: "socket", kind: "message", T: () => CProtoItemSocket },
			{
				no: 2,
				name: "red",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "green",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 4,
				name: "blue",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CProtoItemSocket_Color>): CProtoItemSocket_Color {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CProtoItemSocket_Color>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CProtoItemSocket_Color,
	): CProtoItemSocket_Color {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional CProtoItemSocket socket */ 1:
					message.socket = CProtoItemSocket.internalBinaryRead(reader, reader.uint32(), options, message.socket);
					break;
				case /* optional uint32 red */ 2:
					message.red = reader.uint32();
					break;
				case /* optional uint32 green */ 3:
					message.green = reader.uint32();
					break;
				case /* optional uint32 blue */ 4:
					message.blue = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CProtoItemSocket_Color,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional CProtoItemSocket socket = 1; */
		if (message.socket)
			CProtoItemSocket.internalBinaryWrite(
				message.socket,
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* optional uint32 red = 2; */
		if (message.red !== undefined) writer.tag(2, WireType.Varint).uint32(message.red);
		/* optional uint32 green = 3; */
		if (message.green !== undefined) writer.tag(3, WireType.Varint).uint32(message.green);
		/* optional uint32 blue = 4; */
		if (message.blue !== undefined) writer.tag(4, WireType.Varint).uint32(message.blue);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CProtoItemSocket_Color
 */
export const CProtoItemSocket_Color = new CProtoItemSocket_Color$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CProtoItemSocket_Strange$Type extends MessageType<CProtoItemSocket_Strange> {
	constructor() {
		super("CProtoItemSocket_Strange", [
			{ no: 1, name: "socket", kind: "message", T: () => CProtoItemSocket },
			{
				no: 2,
				name: "strange_type",
				kind: "scalar",
				localName: "strange_type",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "strange_value",
				kind: "scalar",
				localName: "strange_value",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CProtoItemSocket_Strange>): CProtoItemSocket_Strange {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CProtoItemSocket_Strange>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CProtoItemSocket_Strange,
	): CProtoItemSocket_Strange {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional CProtoItemSocket socket */ 1:
					message.socket = CProtoItemSocket.internalBinaryRead(reader, reader.uint32(), options, message.socket);
					break;
				case /* optional uint32 strange_type */ 2:
					message.strange_type = reader.uint32();
					break;
				case /* optional uint32 strange_value */ 3:
					message.strange_value = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CProtoItemSocket_Strange,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional CProtoItemSocket socket = 1; */
		if (message.socket)
			CProtoItemSocket.internalBinaryWrite(
				message.socket,
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* optional uint32 strange_type = 2; */
		if (message.strange_type !== undefined) writer.tag(2, WireType.Varint).uint32(message.strange_type);
		/* optional uint32 strange_value = 3; */
		if (message.strange_value !== undefined) writer.tag(3, WireType.Varint).uint32(message.strange_value);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CProtoItemSocket_Strange
 */
export const CProtoItemSocket_Strange = new CProtoItemSocket_Strange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY$Type extends MessageType<CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY> {
	constructor() {
		super("CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY", [
			{ no: 1, name: "socket", kind: "message", T: () => CProtoItemSocket },
			{
				no: 2,
				name: "strange_type",
				kind: "scalar",
				localName: "strange_type",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "strange_value",
				kind: "scalar",
				localName: "strange_value",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 4,
				name: "ability_effect",
				kind: "scalar",
				localName: "ability_effect",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(
		value?: PartialMessage<CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY>,
	): CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined)
			reflectionMergePartial<CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY,
	): CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional CProtoItemSocket socket */ 1:
					message.socket = CProtoItemSocket.internalBinaryRead(reader, reader.uint32(), options, message.socket);
					break;
				case /* optional uint32 strange_type */ 2:
					message.strange_type = reader.uint32();
					break;
				case /* optional uint32 strange_value */ 3:
					message.strange_value = reader.uint32();
					break;
				case /* optional uint32 ability_effect */ 4:
					message.ability_effect = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional CProtoItemSocket socket = 1; */
		if (message.socket)
			CProtoItemSocket.internalBinaryWrite(
				message.socket,
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* optional uint32 strange_type = 2; */
		if (message.strange_type !== undefined) writer.tag(2, WireType.Varint).uint32(message.strange_type);
		/* optional uint32 strange_value = 3; */
		if (message.strange_value !== undefined) writer.tag(3, WireType.Varint).uint32(message.strange_value);
		/* optional uint32 ability_effect = 4; */
		if (message.ability_effect !== undefined) writer.tag(4, WireType.Varint).uint32(message.ability_effect);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY
 */
export const CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY =
	new CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CProtoItemSocket_Spectator$Type extends MessageType<CProtoItemSocket_Spectator> {
	constructor() {
		super("CProtoItemSocket_Spectator", [
			{ no: 1, name: "socket", kind: "message", T: () => CProtoItemSocket },
			{
				no: 2,
				name: "games_viewed",
				kind: "scalar",
				localName: "games_viewed",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "corporation_id",
				kind: "scalar",
				localName: "corporation_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 4,
				name: "league_id",
				kind: "scalar",
				localName: "league_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 5,
				name: "team_id",
				kind: "scalar",
				localName: "team_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CProtoItemSocket_Spectator>): CProtoItemSocket_Spectator {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CProtoItemSocket_Spectator>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CProtoItemSocket_Spectator,
	): CProtoItemSocket_Spectator {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional CProtoItemSocket socket */ 1:
					message.socket = CProtoItemSocket.internalBinaryRead(reader, reader.uint32(), options, message.socket);
					break;
				case /* optional uint32 games_viewed */ 2:
					message.games_viewed = reader.uint32();
					break;
				case /* optional uint32 corporation_id */ 3:
					message.corporation_id = reader.uint32();
					break;
				case /* optional uint32 league_id */ 4:
					message.league_id = reader.uint32();
					break;
				case /* optional uint32 team_id */ 5:
					message.team_id = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CProtoItemSocket_Spectator,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional CProtoItemSocket socket = 1; */
		if (message.socket)
			CProtoItemSocket.internalBinaryWrite(
				message.socket,
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* optional uint32 games_viewed = 2; */
		if (message.games_viewed !== undefined) writer.tag(2, WireType.Varint).uint32(message.games_viewed);
		/* optional uint32 corporation_id = 3; */
		if (message.corporation_id !== undefined) writer.tag(3, WireType.Varint).uint32(message.corporation_id);
		/* optional uint32 league_id = 4; */
		if (message.league_id !== undefined) writer.tag(4, WireType.Varint).uint32(message.league_id);
		/* optional uint32 team_id = 5; */
		if (message.team_id !== undefined) writer.tag(5, WireType.Varint).uint32(message.team_id);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CProtoItemSocket_Spectator
 */
export const CProtoItemSocket_Spectator = new CProtoItemSocket_Spectator$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CProtoItemSocket_AssetModifier$Type extends MessageType<CProtoItemSocket_AssetModifier> {
	constructor() {
		super("CProtoItemSocket_AssetModifier", [
			{ no: 1, name: "socket", kind: "message", T: () => CProtoItemSocket },
			{
				no: 2,
				name: "asset_modifier",
				kind: "scalar",
				localName: "asset_modifier",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CProtoItemSocket_AssetModifier>): CProtoItemSocket_AssetModifier {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CProtoItemSocket_AssetModifier>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CProtoItemSocket_AssetModifier,
	): CProtoItemSocket_AssetModifier {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional CProtoItemSocket socket */ 1:
					message.socket = CProtoItemSocket.internalBinaryRead(reader, reader.uint32(), options, message.socket);
					break;
				case /* optional uint32 asset_modifier */ 2:
					message.asset_modifier = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CProtoItemSocket_AssetModifier,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional CProtoItemSocket socket = 1; */
		if (message.socket)
			CProtoItemSocket.internalBinaryWrite(
				message.socket,
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* optional uint32 asset_modifier = 2; */
		if (message.asset_modifier !== undefined) writer.tag(2, WireType.Varint).uint32(message.asset_modifier);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CProtoItemSocket_AssetModifier
 */
export const CProtoItemSocket_AssetModifier = new CProtoItemSocket_AssetModifier$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY$Type extends MessageType<CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY> {
	constructor() {
		super("CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY", [
			{ no: 1, name: "socket", kind: "message", T: () => CProtoItemSocket },
			{
				no: 2,
				name: "asset_modifier",
				kind: "scalar",
				localName: "asset_modifier",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "anim_modifier",
				kind: "scalar",
				localName: "anim_modifier",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 4,
				name: "ability_effect",
				kind: "scalar",
				localName: "ability_effect",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(
		value?: PartialMessage<CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY>,
	): CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined)
			reflectionMergePartial<CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY,
	): CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional CProtoItemSocket socket */ 1:
					message.socket = CProtoItemSocket.internalBinaryRead(reader, reader.uint32(), options, message.socket);
					break;
				case /* optional uint32 asset_modifier */ 2:
					message.asset_modifier = reader.uint32();
					break;
				case /* optional uint32 anim_modifier */ 3:
					message.anim_modifier = reader.uint32();
					break;
				case /* optional uint32 ability_effect */ 4:
					message.ability_effect = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional CProtoItemSocket socket = 1; */
		if (message.socket)
			CProtoItemSocket.internalBinaryWrite(
				message.socket,
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* optional uint32 asset_modifier = 2; */
		if (message.asset_modifier !== undefined) writer.tag(2, WireType.Varint).uint32(message.asset_modifier);
		/* optional uint32 anim_modifier = 3; */
		if (message.anim_modifier !== undefined) writer.tag(3, WireType.Varint).uint32(message.anim_modifier);
		/* optional uint32 ability_effect = 4; */
		if (message.ability_effect !== undefined) writer.tag(4, WireType.Varint).uint32(message.ability_effect);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY
 */
export const CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY =
	new CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CProtoItemSocket_Autograph$Type extends MessageType<CProtoItemSocket_Autograph> {
	constructor() {
		super("CProtoItemSocket_Autograph", [
			{ no: 1, name: "socket", kind: "message", T: () => CProtoItemSocket },
			{
				no: 2,
				name: "autograph",
				kind: "scalar",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 3,
				name: "autograph_id",
				kind: "scalar",
				localName: "autograph_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 4,
				name: "autograph_score",
				kind: "scalar",
				localName: "autograph_score",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CProtoItemSocket_Autograph>): CProtoItemSocket_Autograph {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CProtoItemSocket_Autograph>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CProtoItemSocket_Autograph,
	): CProtoItemSocket_Autograph {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional CProtoItemSocket socket */ 1:
					message.socket = CProtoItemSocket.internalBinaryRead(reader, reader.uint32(), options, message.socket);
					break;
				case /* optional string autograph */ 2:
					message.autograph = reader.string();
					break;
				case /* optional uint32 autograph_id */ 3:
					message.autograph_id = reader.uint32();
					break;
				case /* optional uint32 autograph_score */ 4:
					message.autograph_score = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CProtoItemSocket_Autograph,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional CProtoItemSocket socket = 1; */
		if (message.socket)
			CProtoItemSocket.internalBinaryWrite(
				message.socket,
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* optional string autograph = 2; */
		if (message.autograph !== undefined) writer.tag(2, WireType.LengthDelimited).string(message.autograph);
		/* optional uint32 autograph_id = 3; */
		if (message.autograph_id !== undefined) writer.tag(3, WireType.Varint).uint32(message.autograph_id);
		/* optional uint32 autograph_score = 4; */
		if (message.autograph_score !== undefined) writer.tag(4, WireType.Varint).uint32(message.autograph_score);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CProtoItemSocket_Autograph
 */
export const CProtoItemSocket_Autograph = new CProtoItemSocket_Autograph$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CProtoItemSocket_StaticVisuals$Type extends MessageType<CProtoItemSocket_StaticVisuals> {
	constructor() {
		super("CProtoItemSocket_StaticVisuals", [{ no: 1, name: "socket", kind: "message", T: () => CProtoItemSocket }]);
	}
	create(value?: PartialMessage<CProtoItemSocket_StaticVisuals>): CProtoItemSocket_StaticVisuals {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CProtoItemSocket_StaticVisuals>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CProtoItemSocket_StaticVisuals,
	): CProtoItemSocket_StaticVisuals {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional CProtoItemSocket socket */ 1:
					message.socket = CProtoItemSocket.internalBinaryRead(reader, reader.uint32(), options, message.socket);
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CProtoItemSocket_StaticVisuals,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional CProtoItemSocket socket = 1; */
		if (message.socket)
			CProtoItemSocket.internalBinaryWrite(
				message.socket,
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join();
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CProtoItemSocket_StaticVisuals
 */
export const CProtoItemSocket_StaticVisuals = new CProtoItemSocket_StaticVisuals$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CAttribute_String$Type extends MessageType<CAttribute_String> {
	constructor() {
		super("CAttribute_String", [
			{
				no: 1,
				name: "value",
				kind: "scalar",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
		]);
	}
	create(value?: PartialMessage<CAttribute_String>): CAttribute_String {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CAttribute_String>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CAttribute_String,
	): CAttribute_String {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional string value */ 1:
					message.value = reader.string();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(message: CAttribute_String, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
		/* optional string value = 1; */
		if (message.value !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.value);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CAttribute_String
 */
export const CAttribute_String = new CAttribute_String$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CWorkshop_GetItemDailyRevenue_Request$Type extends MessageType<CWorkshop_GetItemDailyRevenue_Request> {
	constructor() {
		super("CWorkshop_GetItemDailyRevenue_Request", [
			{
				no: 1,
				name: "appid",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "item_id",
				kind: "scalar",
				localName: "item_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "date_start",
				kind: "scalar",
				localName: "date_start",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 4,
				name: "date_end",
				kind: "scalar",
				localName: "date_end",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CWorkshop_GetItemDailyRevenue_Request>): CWorkshop_GetItemDailyRevenue_Request {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CWorkshop_GetItemDailyRevenue_Request>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CWorkshop_GetItemDailyRevenue_Request,
	): CWorkshop_GetItemDailyRevenue_Request {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 appid */ 1:
					message.appid = reader.uint32();
					break;
				case /* optional uint32 item_id */ 2:
					message.item_id = reader.uint32();
					break;
				case /* optional uint32 date_start */ 3:
					message.date_start = reader.uint32();
					break;
				case /* optional uint32 date_end */ 4:
					message.date_end = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CWorkshop_GetItemDailyRevenue_Request,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 appid = 1; */
		if (message.appid !== undefined) writer.tag(1, WireType.Varint).uint32(message.appid);
		/* optional uint32 item_id = 2; */
		if (message.item_id !== undefined) writer.tag(2, WireType.Varint).uint32(message.item_id);
		/* optional uint32 date_start = 3; */
		if (message.date_start !== undefined) writer.tag(3, WireType.Varint).uint32(message.date_start);
		/* optional uint32 date_end = 4; */
		if (message.date_end !== undefined) writer.tag(4, WireType.Varint).uint32(message.date_end);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CWorkshop_GetItemDailyRevenue_Request
 */
export const CWorkshop_GetItemDailyRevenue_Request = new CWorkshop_GetItemDailyRevenue_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CWorkshop_GetItemDailyRevenue_Response$Type extends MessageType<CWorkshop_GetItemDailyRevenue_Response> {
	constructor() {
		super("CWorkshop_GetItemDailyRevenue_Response", [
			{
				no: 1,
				name: "country_revenue",
				kind: "message",
				localName: "country_revenue",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: () => CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue,
			},
		]);
	}
	create(value?: PartialMessage<CWorkshop_GetItemDailyRevenue_Response>): CWorkshop_GetItemDailyRevenue_Response {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.country_revenue = [];
		if (value !== undefined) reflectionMergePartial<CWorkshop_GetItemDailyRevenue_Response>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CWorkshop_GetItemDailyRevenue_Response,
	): CWorkshop_GetItemDailyRevenue_Response {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* repeated CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue country_revenue */ 1:
					message.country_revenue.push(
						CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
						),
					);
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CWorkshop_GetItemDailyRevenue_Response,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* repeated CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue country_revenue = 1; */
		for (let i = 0; i < message.country_revenue.length; i++)
			CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue.internalBinaryWrite(
				message.country_revenue[i],
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join();
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CWorkshop_GetItemDailyRevenue_Response
 */
export const CWorkshop_GetItemDailyRevenue_Response = new CWorkshop_GetItemDailyRevenue_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue$Type extends MessageType<CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue> {
	constructor() {
		super("CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue", [
			{
				no: 1,
				name: "country_code",
				kind: "scalar",
				localName: "country_code",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 2,
				name: "date",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "revenue_usd",
				kind: "scalar",
				localName: "revenue_usd",
				opt: true,
				T: 3 /*ScalarType.INT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 4,
				name: "units",
				kind: "scalar",
				opt: true,
				T: 5 /*ScalarType.INT32*/,
			},
		]);
	}
	create(
		value?: PartialMessage<CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue>,
	): CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined)
			reflectionMergePartial<CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue,
	): CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional string country_code */ 1:
					message.country_code = reader.string();
					break;
				case /* optional uint32 date */ 2:
					message.date = reader.uint32();
					break;
				case /* optional int64 revenue_usd */ 3:
					message.revenue_usd = reader.int64().toBigInt();
					break;
				case /* optional int32 units */ 4:
					message.units = reader.int32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional string country_code = 1; */
		if (message.country_code !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.country_code);
		/* optional uint32 date = 2; */
		if (message.date !== undefined) writer.tag(2, WireType.Varint).uint32(message.date);
		/* optional int64 revenue_usd = 3; */
		if (message.revenue_usd !== undefined) writer.tag(3, WireType.Varint).int64(message.revenue_usd);
		/* optional int32 units = 4; */
		if (message.units !== undefined) writer.tag(4, WireType.Varint).int32(message.units);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue
 */
export const CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue =
	new CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CWorkshop_GetPackageDailyRevenue_Request$Type extends MessageType<CWorkshop_GetPackageDailyRevenue_Request> {
	constructor() {
		super("CWorkshop_GetPackageDailyRevenue_Request", [
			{
				no: 1,
				name: "packageid",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "date_start",
				kind: "scalar",
				localName: "date_start",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "date_end",
				kind: "scalar",
				localName: "date_end",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CWorkshop_GetPackageDailyRevenue_Request>): CWorkshop_GetPackageDailyRevenue_Request {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CWorkshop_GetPackageDailyRevenue_Request>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CWorkshop_GetPackageDailyRevenue_Request,
	): CWorkshop_GetPackageDailyRevenue_Request {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 packageid */ 1:
					message.packageid = reader.uint32();
					break;
				case /* optional uint32 date_start */ 2:
					message.date_start = reader.uint32();
					break;
				case /* optional uint32 date_end */ 3:
					message.date_end = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CWorkshop_GetPackageDailyRevenue_Request,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 packageid = 1; */
		if (message.packageid !== undefined) writer.tag(1, WireType.Varint).uint32(message.packageid);
		/* optional uint32 date_start = 2; */
		if (message.date_start !== undefined) writer.tag(2, WireType.Varint).uint32(message.date_start);
		/* optional uint32 date_end = 3; */
		if (message.date_end !== undefined) writer.tag(3, WireType.Varint).uint32(message.date_end);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CWorkshop_GetPackageDailyRevenue_Request
 */
export const CWorkshop_GetPackageDailyRevenue_Request = new CWorkshop_GetPackageDailyRevenue_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CWorkshop_GetPackageDailyRevenue_Response$Type extends MessageType<CWorkshop_GetPackageDailyRevenue_Response> {
	constructor() {
		super("CWorkshop_GetPackageDailyRevenue_Response", [
			{
				no: 1,
				name: "country_revenue",
				kind: "message",
				localName: "country_revenue",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: () => CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue,
			},
		]);
	}
	create(value?: PartialMessage<CWorkshop_GetPackageDailyRevenue_Response>): CWorkshop_GetPackageDailyRevenue_Response {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.country_revenue = [];
		if (value !== undefined) reflectionMergePartial<CWorkshop_GetPackageDailyRevenue_Response>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CWorkshop_GetPackageDailyRevenue_Response,
	): CWorkshop_GetPackageDailyRevenue_Response {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* repeated CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue country_revenue */ 1:
					message.country_revenue.push(
						CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
						),
					);
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CWorkshop_GetPackageDailyRevenue_Response,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* repeated CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue country_revenue = 1; */
		for (let i = 0; i < message.country_revenue.length; i++)
			CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue.internalBinaryWrite(
				message.country_revenue[i],
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join();
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CWorkshop_GetPackageDailyRevenue_Response
 */
export const CWorkshop_GetPackageDailyRevenue_Response = new CWorkshop_GetPackageDailyRevenue_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue$Type extends MessageType<CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue> {
	constructor() {
		super("CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue", [
			{
				no: 1,
				name: "country_code",
				kind: "scalar",
				localName: "country_code",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 2,
				name: "date",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "revenue_usd",
				kind: "scalar",
				localName: "revenue_usd",
				opt: true,
				T: 3 /*ScalarType.INT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 4,
				name: "units",
				kind: "scalar",
				opt: true,
				T: 5 /*ScalarType.INT32*/,
			},
		]);
	}
	create(
		value?: PartialMessage<CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue>,
	): CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined)
			reflectionMergePartial<CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue,
	): CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional string country_code */ 1:
					message.country_code = reader.string();
					break;
				case /* optional uint32 date */ 2:
					message.date = reader.uint32();
					break;
				case /* optional int64 revenue_usd */ 3:
					message.revenue_usd = reader.int64().toBigInt();
					break;
				case /* optional int32 units */ 4:
					message.units = reader.int32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional string country_code = 1; */
		if (message.country_code !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.country_code);
		/* optional uint32 date = 2; */
		if (message.date !== undefined) writer.tag(2, WireType.Varint).uint32(message.date);
		/* optional int64 revenue_usd = 3; */
		if (message.revenue_usd !== undefined) writer.tag(3, WireType.Varint).int64(message.revenue_usd);
		/* optional int32 units = 4; */
		if (message.units !== undefined) writer.tag(4, WireType.Varint).int32(message.units);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue
 */
export const CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue =
	new CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgSQLGCToGCGrantBackpackSlots$Type extends MessageType<CMsgSQLGCToGCGrantBackpackSlots> {
	constructor() {
		super("CMsgSQLGCToGCGrantBackpackSlots", [
			{
				no: 1,
				name: "account_id",
				kind: "scalar",
				localName: "account_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "add_slots",
				kind: "scalar",
				localName: "add_slots",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgSQLGCToGCGrantBackpackSlots>): CMsgSQLGCToGCGrantBackpackSlots {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgSQLGCToGCGrantBackpackSlots>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgSQLGCToGCGrantBackpackSlots,
	): CMsgSQLGCToGCGrantBackpackSlots {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 account_id */ 1:
					message.account_id = reader.uint32();
					break;
				case /* optional uint32 add_slots */ 2:
					message.add_slots = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgSQLGCToGCGrantBackpackSlots,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 account_id = 1; */
		if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
		/* optional uint32 add_slots = 2; */
		if (message.add_slots !== undefined) writer.tag(2, WireType.Varint).uint32(message.add_slots);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgSQLGCToGCGrantBackpackSlots
 */
export const CMsgSQLGCToGCGrantBackpackSlots = new CMsgSQLGCToGCGrantBackpackSlots$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCLookupAccountName$Type extends MessageType<CMsgClientToGCLookupAccountName> {
	constructor() {
		super("CMsgClientToGCLookupAccountName", [
			{
				no: 1,
				name: "account_id",
				kind: "scalar",
				localName: "account_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCLookupAccountName>): CMsgClientToGCLookupAccountName {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCLookupAccountName>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCLookupAccountName,
	): CMsgClientToGCLookupAccountName {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 account_id */ 1:
					message.account_id = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCLookupAccountName,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 account_id = 1; */
		if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCLookupAccountName
 */
export const CMsgClientToGCLookupAccountName = new CMsgClientToGCLookupAccountName$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCLookupAccountNameResponse$Type extends MessageType<CMsgClientToGCLookupAccountNameResponse> {
	constructor() {
		super("CMsgClientToGCLookupAccountNameResponse", [
			{
				no: 1,
				name: "account_id",
				kind: "scalar",
				localName: "account_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "account_name",
				kind: "scalar",
				localName: "account_name",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCLookupAccountNameResponse>): CMsgClientToGCLookupAccountNameResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCLookupAccountNameResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCLookupAccountNameResponse,
	): CMsgClientToGCLookupAccountNameResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 account_id */ 1:
					message.account_id = reader.uint32();
					break;
				case /* optional string account_name */ 2:
					message.account_name = reader.string();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCLookupAccountNameResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 account_id = 1; */
		if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
		/* optional string account_name = 2; */
		if (message.account_name !== undefined) writer.tag(2, WireType.LengthDelimited).string(message.account_name);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCLookupAccountNameResponse
 */
export const CMsgClientToGCLookupAccountNameResponse = new CMsgClientToGCLookupAccountNameResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCCreateStaticRecipe$Type extends MessageType<CMsgClientToGCCreateStaticRecipe> {
	constructor() {
		super("CMsgClientToGCCreateStaticRecipe", [
			{
				no: 1,
				name: "items",
				kind: "message",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: () => CMsgClientToGCCreateStaticRecipe_Item,
			},
			{
				no: 2,
				name: "recipe_def_index",
				kind: "scalar",
				localName: "recipe_def_index",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCCreateStaticRecipe>): CMsgClientToGCCreateStaticRecipe {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.items = [];
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCCreateStaticRecipe>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCCreateStaticRecipe,
	): CMsgClientToGCCreateStaticRecipe {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* repeated CMsgClientToGCCreateStaticRecipe.Item items */ 1:
					message.items.push(
						CMsgClientToGCCreateStaticRecipe_Item.internalBinaryRead(reader, reader.uint32(), options),
					);
					break;
				case /* optional uint32 recipe_def_index */ 2:
					message.recipe_def_index = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCCreateStaticRecipe,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* repeated CMsgClientToGCCreateStaticRecipe.Item items = 1; */
		for (let i = 0; i < message.items.length; i++)
			CMsgClientToGCCreateStaticRecipe_Item.internalBinaryWrite(
				message.items[i],
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* optional uint32 recipe_def_index = 2; */
		if (message.recipe_def_index !== undefined) writer.tag(2, WireType.Varint).uint32(message.recipe_def_index);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCCreateStaticRecipe
 */
export const CMsgClientToGCCreateStaticRecipe = new CMsgClientToGCCreateStaticRecipe$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCCreateStaticRecipe_Item$Type extends MessageType<CMsgClientToGCCreateStaticRecipe_Item> {
	constructor() {
		super("CMsgClientToGCCreateStaticRecipe.Item", [
			{
				no: 1,
				name: "item_id",
				kind: "scalar",
				localName: "item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 2,
				name: "slot_id",
				kind: "scalar",
				localName: "slot_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCCreateStaticRecipe_Item>): CMsgClientToGCCreateStaticRecipe_Item {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCCreateStaticRecipe_Item>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCCreateStaticRecipe_Item,
	): CMsgClientToGCCreateStaticRecipe_Item {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint64 item_id */ 1:
					message.item_id = reader.uint64().toBigInt();
					break;
				case /* optional uint32 slot_id */ 2:
					message.slot_id = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCCreateStaticRecipe_Item,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint64 item_id = 1; */
		if (message.item_id !== undefined) writer.tag(1, WireType.Varint).uint64(message.item_id);
		/* optional uint32 slot_id = 2; */
		if (message.slot_id !== undefined) writer.tag(2, WireType.Varint).uint32(message.slot_id);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCCreateStaticRecipe.Item
 */
export const CMsgClientToGCCreateStaticRecipe_Item = new CMsgClientToGCCreateStaticRecipe_Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCCreateStaticRecipeResponse$Type extends MessageType<CMsgClientToGCCreateStaticRecipeResponse> {
	constructor() {
		super("CMsgClientToGCCreateStaticRecipeResponse", [
			{
				no: 1,
				name: "response",
				kind: "enum",
				opt: true,
				T: () => [
					"CMsgClientToGCCreateStaticRecipeResponse.EResponse",
					CMsgClientToGCCreateStaticRecipeResponse_EResponse,
				],
			},
			{
				no: 2,
				name: "output_items",
				kind: "message",
				localName: "output_items",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: () => CMsgClientToGCCreateStaticRecipeResponse_OutputItem,
			},
			{
				no: 3,
				name: "input_errors",
				kind: "message",
				localName: "input_errors",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: () => CMsgClientToGCCreateStaticRecipeResponse_InputError,
			},
			{
				no: 4,
				name: "additional_outputs",
				kind: "message",
				localName: "additional_outputs",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: () => CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput,
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCCreateStaticRecipeResponse>): CMsgClientToGCCreateStaticRecipeResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.output_items = [];
		message.input_errors = [];
		message.additional_outputs = [];
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCCreateStaticRecipeResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCCreateStaticRecipeResponse,
	): CMsgClientToGCCreateStaticRecipeResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional CMsgClientToGCCreateStaticRecipeResponse.EResponse response */ 1:
					message.response = reader.int32();
					break;
				case /* repeated CMsgClientToGCCreateStaticRecipeResponse.OutputItem output_items */ 2:
					message.output_items.push(
						CMsgClientToGCCreateStaticRecipeResponse_OutputItem.internalBinaryRead(reader, reader.uint32(), options),
					);
					break;
				case /* repeated CMsgClientToGCCreateStaticRecipeResponse.InputError input_errors */ 3:
					message.input_errors.push(
						CMsgClientToGCCreateStaticRecipeResponse_InputError.internalBinaryRead(reader, reader.uint32(), options),
					);
					break;
				case /* repeated CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput additional_outputs */ 4:
					message.additional_outputs.push(
						CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
						),
					);
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCCreateStaticRecipeResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional CMsgClientToGCCreateStaticRecipeResponse.EResponse response = 1; */
		if (message.response !== undefined) writer.tag(1, WireType.Varint).int32(message.response);
		/* repeated CMsgClientToGCCreateStaticRecipeResponse.OutputItem output_items = 2; */
		for (let i = 0; i < message.output_items.length; i++)
			CMsgClientToGCCreateStaticRecipeResponse_OutputItem.internalBinaryWrite(
				message.output_items[i],
				writer.tag(2, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* repeated CMsgClientToGCCreateStaticRecipeResponse.InputError input_errors = 3; */
		for (let i = 0; i < message.input_errors.length; i++)
			CMsgClientToGCCreateStaticRecipeResponse_InputError.internalBinaryWrite(
				message.input_errors[i],
				writer.tag(3, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* repeated CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput additional_outputs = 4; */
		for (let i = 0; i < message.additional_outputs.length; i++)
			CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput.internalBinaryWrite(
				message.additional_outputs[i],
				writer.tag(4, WireType.LengthDelimited).fork(),
				options,
			).join();
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCCreateStaticRecipeResponse
 */
export const CMsgClientToGCCreateStaticRecipeResponse = new CMsgClientToGCCreateStaticRecipeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCCreateStaticRecipeResponse_OutputItem$Type extends MessageType<CMsgClientToGCCreateStaticRecipeResponse_OutputItem> {
	constructor() {
		super("CMsgClientToGCCreateStaticRecipeResponse.OutputItem", [
			{
				no: 1,
				name: "def_index",
				kind: "scalar",
				localName: "def_index",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "item_id",
				kind: "scalar",
				localName: "item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 3,
				name: "slot_id",
				kind: "scalar",
				localName: "slot_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(
		value?: PartialMessage<CMsgClientToGCCreateStaticRecipeResponse_OutputItem>,
	): CMsgClientToGCCreateStaticRecipeResponse_OutputItem {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined)
			reflectionMergePartial<CMsgClientToGCCreateStaticRecipeResponse_OutputItem>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCCreateStaticRecipeResponse_OutputItem,
	): CMsgClientToGCCreateStaticRecipeResponse_OutputItem {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 def_index */ 1:
					message.def_index = reader.uint32();
					break;
				case /* optional uint64 item_id */ 2:
					message.item_id = reader.uint64().toBigInt();
					break;
				case /* optional uint32 slot_id */ 3:
					message.slot_id = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCCreateStaticRecipeResponse_OutputItem,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 def_index = 1; */
		if (message.def_index !== undefined) writer.tag(1, WireType.Varint).uint32(message.def_index);
		/* optional uint64 item_id = 2; */
		if (message.item_id !== undefined) writer.tag(2, WireType.Varint).uint64(message.item_id);
		/* optional uint32 slot_id = 3; */
		if (message.slot_id !== undefined) writer.tag(3, WireType.Varint).uint32(message.slot_id);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCCreateStaticRecipeResponse.OutputItem
 */
export const CMsgClientToGCCreateStaticRecipeResponse_OutputItem =
	new CMsgClientToGCCreateStaticRecipeResponse_OutputItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCCreateStaticRecipeResponse_InputError$Type extends MessageType<CMsgClientToGCCreateStaticRecipeResponse_InputError> {
	constructor() {
		super("CMsgClientToGCCreateStaticRecipeResponse.InputError", [
			{
				no: 1,
				name: "slot_id",
				kind: "scalar",
				localName: "slot_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "error",
				kind: "enum",
				opt: true,
				T: () => [
					"CMsgClientToGCCreateStaticRecipeResponse.EResponse",
					CMsgClientToGCCreateStaticRecipeResponse_EResponse,
				],
			},
		]);
	}
	create(
		value?: PartialMessage<CMsgClientToGCCreateStaticRecipeResponse_InputError>,
	): CMsgClientToGCCreateStaticRecipeResponse_InputError {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined)
			reflectionMergePartial<CMsgClientToGCCreateStaticRecipeResponse_InputError>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCCreateStaticRecipeResponse_InputError,
	): CMsgClientToGCCreateStaticRecipeResponse_InputError {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 slot_id */ 1:
					message.slot_id = reader.uint32();
					break;
				case /* optional CMsgClientToGCCreateStaticRecipeResponse.EResponse error */ 2:
					message.error = reader.int32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCCreateStaticRecipeResponse_InputError,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 slot_id = 1; */
		if (message.slot_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.slot_id);
		/* optional CMsgClientToGCCreateStaticRecipeResponse.EResponse error = 2; */
		if (message.error !== undefined) writer.tag(2, WireType.Varint).int32(message.error);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCCreateStaticRecipeResponse.InputError
 */
export const CMsgClientToGCCreateStaticRecipeResponse_InputError =
	new CMsgClientToGCCreateStaticRecipeResponse_InputError$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput$Type extends MessageType<CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput> {
	constructor() {
		super("CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput", [
			{
				no: 1,
				name: "slot_id",
				kind: "scalar",
				localName: "slot_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "value",
				kind: "scalar",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
		]);
	}
	create(
		value?: PartialMessage<CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput>,
	): CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined)
			reflectionMergePartial<CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput,
	): CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 slot_id */ 1:
					message.slot_id = reader.uint32();
					break;
				case /* optional uint64 value */ 2:
					message.value = reader.uint64().toBigInt();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 slot_id = 1; */
		if (message.slot_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.slot_id);
		/* optional uint64 value = 2; */
		if (message.value !== undefined) writer.tag(2, WireType.Varint).uint64(message.value);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput
 */
export const CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput =
	new CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgProcessTransactionOrder$Type extends MessageType<CMsgProcessTransactionOrder> {
	constructor() {
		super("CMsgProcessTransactionOrder", [
			{
				no: 1,
				name: "txn_id",
				kind: "scalar",
				localName: "txn_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 2,
				name: "steam_txn_id",
				kind: "scalar",
				localName: "steam_txn_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 3,
				name: "partner_txn_id",
				kind: "scalar",
				localName: "partner_txn_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 4,
				name: "steam_id",
				kind: "scalar",
				localName: "steam_id",
				opt: true,
				T: 6 /*ScalarType.FIXED64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 5,
				name: "time_stamp",
				kind: "scalar",
				localName: "time_stamp",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 6,
				name: "watermark",
				kind: "scalar",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 7,
				name: "purchase_report_status",
				kind: "scalar",
				localName: "purchase_report_status",
				opt: true,
				T: 5 /*ScalarType.INT32*/,
			},
			{
				no: 8,
				name: "currency",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 9,
				name: "items",
				kind: "message",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: () => CMsgProcessTransactionOrder_Item,
			},
		]);
	}
	create(value?: PartialMessage<CMsgProcessTransactionOrder>): CMsgProcessTransactionOrder {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.items = [];
		if (value !== undefined) reflectionMergePartial<CMsgProcessTransactionOrder>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgProcessTransactionOrder,
	): CMsgProcessTransactionOrder {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint64 txn_id */ 1:
					message.txn_id = reader.uint64().toBigInt();
					break;
				case /* optional uint64 steam_txn_id */ 2:
					message.steam_txn_id = reader.uint64().toBigInt();
					break;
				case /* optional uint64 partner_txn_id */ 3:
					message.partner_txn_id = reader.uint64().toBigInt();
					break;
				case /* optional fixed64 steam_id */ 4:
					message.steam_id = reader.fixed64().toBigInt();
					break;
				case /* optional uint32 time_stamp */ 5:
					message.time_stamp = reader.uint32();
					break;
				case /* optional uint64 watermark */ 6:
					message.watermark = reader.uint64().toBigInt();
					break;
				case /* optional int32 purchase_report_status */ 7:
					message.purchase_report_status = reader.int32();
					break;
				case /* optional uint32 currency */ 8:
					message.currency = reader.uint32();
					break;
				case /* repeated CMsgProcessTransactionOrder.Item items */ 9:
					message.items.push(CMsgProcessTransactionOrder_Item.internalBinaryRead(reader, reader.uint32(), options));
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgProcessTransactionOrder,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint64 txn_id = 1; */
		if (message.txn_id !== undefined) writer.tag(1, WireType.Varint).uint64(message.txn_id);
		/* optional uint64 steam_txn_id = 2; */
		if (message.steam_txn_id !== undefined) writer.tag(2, WireType.Varint).uint64(message.steam_txn_id);
		/* optional uint64 partner_txn_id = 3; */
		if (message.partner_txn_id !== undefined) writer.tag(3, WireType.Varint).uint64(message.partner_txn_id);
		/* optional fixed64 steam_id = 4; */
		if (message.steam_id !== undefined) writer.tag(4, WireType.Bit64).fixed64(message.steam_id);
		/* optional uint32 time_stamp = 5; */
		if (message.time_stamp !== undefined) writer.tag(5, WireType.Varint).uint32(message.time_stamp);
		/* optional uint64 watermark = 6; */
		if (message.watermark !== undefined) writer.tag(6, WireType.Varint).uint64(message.watermark);
		/* optional int32 purchase_report_status = 7; */
		if (message.purchase_report_status !== undefined)
			writer.tag(7, WireType.Varint).int32(message.purchase_report_status);
		/* optional uint32 currency = 8; */
		if (message.currency !== undefined) writer.tag(8, WireType.Varint).uint32(message.currency);
		/* repeated CMsgProcessTransactionOrder.Item items = 9; */
		for (let i = 0; i < message.items.length; i++)
			CMsgProcessTransactionOrder_Item.internalBinaryWrite(
				message.items[i],
				writer.tag(9, WireType.LengthDelimited).fork(),
				options,
			).join();
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgProcessTransactionOrder
 */
export const CMsgProcessTransactionOrder = new CMsgProcessTransactionOrder$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgProcessTransactionOrder_Item$Type extends MessageType<CMsgProcessTransactionOrder_Item> {
	constructor() {
		super("CMsgProcessTransactionOrder.Item", [
			{
				no: 1,
				name: "item_def_index",
				kind: "scalar",
				localName: "item_def_index",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "item_price",
				kind: "scalar",
				localName: "item_price",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "quantity",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 4,
				name: "category_desc",
				kind: "scalar",
				localName: "category_desc",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 5,
				name: "store_purchase_type",
				kind: "scalar",
				localName: "store_purchase_type",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 6,
				name: "source_reference_id",
				kind: "scalar",
				localName: "source_reference_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 7,
				name: "parent_stack_index",
				kind: "scalar",
				localName: "parent_stack_index",
				opt: true,
				T: 5 /*ScalarType.INT32*/,
			},
			{
				no: 8,
				name: "default_price",
				kind: "scalar",
				localName: "default_price",
				opt: true,
				T: 8 /*ScalarType.BOOL*/,
			},
			{
				no: 9,
				name: "is_user_facing",
				kind: "scalar",
				localName: "is_user_facing",
				opt: true,
				T: 8 /*ScalarType.BOOL*/,
			},
			{
				no: 11,
				name: "price_index",
				kind: "scalar",
				localName: "price_index",
				opt: true,
				T: 5 /*ScalarType.INT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgProcessTransactionOrder_Item>): CMsgProcessTransactionOrder_Item {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgProcessTransactionOrder_Item>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgProcessTransactionOrder_Item,
	): CMsgProcessTransactionOrder_Item {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 item_def_index */ 1:
					message.item_def_index = reader.uint32();
					break;
				case /* optional uint32 item_price */ 2:
					message.item_price = reader.uint32();
					break;
				case /* optional uint32 quantity */ 3:
					message.quantity = reader.uint32();
					break;
				case /* optional string category_desc */ 4:
					message.category_desc = reader.string();
					break;
				case /* optional uint32 store_purchase_type */ 5:
					message.store_purchase_type = reader.uint32();
					break;
				case /* optional uint64 source_reference_id */ 6:
					message.source_reference_id = reader.uint64().toBigInt();
					break;
				case /* optional int32 parent_stack_index */ 7:
					message.parent_stack_index = reader.int32();
					break;
				case /* optional bool default_price */ 8:
					message.default_price = reader.bool();
					break;
				case /* optional bool is_user_facing */ 9:
					message.is_user_facing = reader.bool();
					break;
				case /* optional int32 price_index */ 11:
					message.price_index = reader.int32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgProcessTransactionOrder_Item,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 item_def_index = 1; */
		if (message.item_def_index !== undefined) writer.tag(1, WireType.Varint).uint32(message.item_def_index);
		/* optional uint32 item_price = 2; */
		if (message.item_price !== undefined) writer.tag(2, WireType.Varint).uint32(message.item_price);
		/* optional uint32 quantity = 3; */
		if (message.quantity !== undefined) writer.tag(3, WireType.Varint).uint32(message.quantity);
		/* optional string category_desc = 4; */
		if (message.category_desc !== undefined) writer.tag(4, WireType.LengthDelimited).string(message.category_desc);
		/* optional uint32 store_purchase_type = 5; */
		if (message.store_purchase_type !== undefined) writer.tag(5, WireType.Varint).uint32(message.store_purchase_type);
		/* optional uint64 source_reference_id = 6; */
		if (message.source_reference_id !== undefined) writer.tag(6, WireType.Varint).uint64(message.source_reference_id);
		/* optional int32 parent_stack_index = 7; */
		if (message.parent_stack_index !== undefined) writer.tag(7, WireType.Varint).int32(message.parent_stack_index);
		/* optional bool default_price = 8; */
		if (message.default_price !== undefined) writer.tag(8, WireType.Varint).bool(message.default_price);
		/* optional bool is_user_facing = 9; */
		if (message.is_user_facing !== undefined) writer.tag(9, WireType.Varint).bool(message.is_user_facing);
		/* optional int32 price_index = 11; */
		if (message.price_index !== undefined) writer.tag(11, WireType.Varint).int32(message.price_index);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgProcessTransactionOrder.Item
 */
export const CMsgProcessTransactionOrder_Item = new CMsgProcessTransactionOrder_Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCStoreProcessCDKeyTransaction$Type extends MessageType<CMsgGCToGCStoreProcessCDKeyTransaction> {
	constructor() {
		super("CMsgGCToGCStoreProcessCDKeyTransaction", [
			{
				no: 1,
				name: "order",
				kind: "message",
				T: () => CMsgProcessTransactionOrder,
			},
			{
				no: 2,
				name: "reason_code",
				kind: "scalar",
				localName: "reason_code",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "partner",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToGCStoreProcessCDKeyTransaction>): CMsgGCToGCStoreProcessCDKeyTransaction {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCStoreProcessCDKeyTransaction>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCStoreProcessCDKeyTransaction,
	): CMsgGCToGCStoreProcessCDKeyTransaction {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional CMsgProcessTransactionOrder order */ 1:
					message.order = CMsgProcessTransactionOrder.internalBinaryRead(
						reader,
						reader.uint32(),
						options,
						message.order,
					);
					break;
				case /* optional uint32 reason_code */ 2:
					message.reason_code = reader.uint32();
					break;
				case /* optional uint32 partner */ 3:
					message.partner = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCStoreProcessCDKeyTransaction,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional CMsgProcessTransactionOrder order = 1; */
		if (message.order)
			CMsgProcessTransactionOrder.internalBinaryWrite(
				message.order,
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* optional uint32 reason_code = 2; */
		if (message.reason_code !== undefined) writer.tag(2, WireType.Varint).uint32(message.reason_code);
		/* optional uint32 partner = 3; */
		if (message.partner !== undefined) writer.tag(3, WireType.Varint).uint32(message.partner);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCStoreProcessCDKeyTransaction
 */
export const CMsgGCToGCStoreProcessCDKeyTransaction = new CMsgGCToGCStoreProcessCDKeyTransaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCStoreProcessCDKeyTransactionResponse$Type extends MessageType<CMsgGCToGCStoreProcessCDKeyTransactionResponse> {
	constructor() {
		super("CMsgGCToGCStoreProcessCDKeyTransactionResponse", [
			{
				no: 1,
				name: "success",
				kind: "scalar",
				opt: true,
				T: 8 /*ScalarType.BOOL*/,
			},
		]);
	}
	create(
		value?: PartialMessage<CMsgGCToGCStoreProcessCDKeyTransactionResponse>,
	): CMsgGCToGCStoreProcessCDKeyTransactionResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined)
			reflectionMergePartial<CMsgGCToGCStoreProcessCDKeyTransactionResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCStoreProcessCDKeyTransactionResponse,
	): CMsgGCToGCStoreProcessCDKeyTransactionResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional bool success */ 1:
					message.success = reader.bool();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCStoreProcessCDKeyTransactionResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional bool success = 1; */
		if (message.success !== undefined) writer.tag(1, WireType.Varint).bool(message.success);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCStoreProcessCDKeyTransactionResponse
 */
export const CMsgGCToGCStoreProcessCDKeyTransactionResponse = new CMsgGCToGCStoreProcessCDKeyTransactionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCStoreProcessSettlement$Type extends MessageType<CMsgGCToGCStoreProcessSettlement> {
	constructor() {
		super("CMsgGCToGCStoreProcessSettlement", [
			{
				no: 1,
				name: "order",
				kind: "message",
				T: () => CMsgProcessTransactionOrder,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToGCStoreProcessSettlement>): CMsgGCToGCStoreProcessSettlement {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCStoreProcessSettlement>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCStoreProcessSettlement,
	): CMsgGCToGCStoreProcessSettlement {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional CMsgProcessTransactionOrder order */ 1:
					message.order = CMsgProcessTransactionOrder.internalBinaryRead(
						reader,
						reader.uint32(),
						options,
						message.order,
					);
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCStoreProcessSettlement,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional CMsgProcessTransactionOrder order = 1; */
		if (message.order)
			CMsgProcessTransactionOrder.internalBinaryWrite(
				message.order,
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join();
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCStoreProcessSettlement
 */
export const CMsgGCToGCStoreProcessSettlement = new CMsgGCToGCStoreProcessSettlement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCStoreProcessSettlementResponse$Type extends MessageType<CMsgGCToGCStoreProcessSettlementResponse> {
	constructor() {
		super("CMsgGCToGCStoreProcessSettlementResponse", [
			{
				no: 1,
				name: "success",
				kind: "scalar",
				opt: true,
				T: 8 /*ScalarType.BOOL*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToGCStoreProcessSettlementResponse>): CMsgGCToGCStoreProcessSettlementResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCStoreProcessSettlementResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCStoreProcessSettlementResponse,
	): CMsgGCToGCStoreProcessSettlementResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional bool success */ 1:
					message.success = reader.bool();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCStoreProcessSettlementResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional bool success = 1; */
		if (message.success !== undefined) writer.tag(1, WireType.Varint).bool(message.success);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCStoreProcessSettlementResponse
 */
export const CMsgGCToGCStoreProcessSettlementResponse = new CMsgGCToGCStoreProcessSettlementResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCBroadcastConsoleCommand$Type extends MessageType<CMsgGCToGCBroadcastConsoleCommand> {
	constructor() {
		super("CMsgGCToGCBroadcastConsoleCommand", [
			{
				no: 1,
				name: "con_command",
				kind: "scalar",
				localName: "con_command",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 2,
				name: "report_output",
				kind: "scalar",
				localName: "report_output",
				opt: true,
				T: 8 /*ScalarType.BOOL*/,
			},
			{
				no: 3,
				name: "sending_gc",
				kind: "scalar",
				localName: "sending_gc",
				opt: true,
				T: 5 /*ScalarType.INT32*/,
			},
			{
				no: 4,
				name: "output_initiator",
				kind: "scalar",
				localName: "output_initiator",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 5,
				name: "sender_source",
				kind: "scalar",
				localName: "sender_source",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToGCBroadcastConsoleCommand>): CMsgGCToGCBroadcastConsoleCommand {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCBroadcastConsoleCommand>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCBroadcastConsoleCommand,
	): CMsgGCToGCBroadcastConsoleCommand {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional string con_command */ 1:
					message.con_command = reader.string();
					break;
				case /* optional bool report_output */ 2:
					message.report_output = reader.bool();
					break;
				case /* optional int32 sending_gc */ 3:
					message.sending_gc = reader.int32();
					break;
				case /* optional string output_initiator */ 4:
					message.output_initiator = reader.string();
					break;
				case /* optional string sender_source */ 5:
					message.sender_source = reader.string();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCBroadcastConsoleCommand,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional string con_command = 1; */
		if (message.con_command !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.con_command);
		/* optional bool report_output = 2; */
		if (message.report_output !== undefined) writer.tag(2, WireType.Varint).bool(message.report_output);
		/* optional int32 sending_gc = 3; */
		if (message.sending_gc !== undefined) writer.tag(3, WireType.Varint).int32(message.sending_gc);
		/* optional string output_initiator = 4; */
		if (message.output_initiator !== undefined)
			writer.tag(4, WireType.LengthDelimited).string(message.output_initiator);
		/* optional string sender_source = 5; */
		if (message.sender_source !== undefined) writer.tag(5, WireType.LengthDelimited).string(message.sender_source);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCBroadcastConsoleCommand
 */
export const CMsgGCToGCBroadcastConsoleCommand = new CMsgGCToGCBroadcastConsoleCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCConsoleOutput$Type extends MessageType<CMsgGCToGCConsoleOutput> {
	constructor() {
		super("CMsgGCToGCConsoleOutput", [
			{
				no: 1,
				name: "initiator",
				kind: "scalar",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 2,
				name: "sending_gc",
				kind: "scalar",
				localName: "sending_gc",
				opt: true,
				T: 5 /*ScalarType.INT32*/,
			},
			{
				no: 3,
				name: "msgs",
				kind: "message",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: () => CMsgGCToGCConsoleOutput_OutputLine,
			},
			{
				no: 4,
				name: "is_last_for_source_job",
				kind: "scalar",
				localName: "is_last_for_source_job",
				opt: true,
				T: 8 /*ScalarType.BOOL*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToGCConsoleOutput>): CMsgGCToGCConsoleOutput {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.msgs = [];
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCConsoleOutput>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCConsoleOutput,
	): CMsgGCToGCConsoleOutput {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional string initiator */ 1:
					message.initiator = reader.string();
					break;
				case /* optional int32 sending_gc */ 2:
					message.sending_gc = reader.int32();
					break;
				case /* repeated CMsgGCToGCConsoleOutput.OutputLine msgs */ 3:
					message.msgs.push(CMsgGCToGCConsoleOutput_OutputLine.internalBinaryRead(reader, reader.uint32(), options));
					break;
				case /* optional bool is_last_for_source_job */ 4:
					message.is_last_for_source_job = reader.bool();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCConsoleOutput,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional string initiator = 1; */
		if (message.initiator !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.initiator);
		/* optional int32 sending_gc = 2; */
		if (message.sending_gc !== undefined) writer.tag(2, WireType.Varint).int32(message.sending_gc);
		/* repeated CMsgGCToGCConsoleOutput.OutputLine msgs = 3; */
		for (let i = 0; i < message.msgs.length; i++)
			CMsgGCToGCConsoleOutput_OutputLine.internalBinaryWrite(
				message.msgs[i],
				writer.tag(3, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* optional bool is_last_for_source_job = 4; */
		if (message.is_last_for_source_job !== undefined)
			writer.tag(4, WireType.Varint).bool(message.is_last_for_source_job);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCConsoleOutput
 */
export const CMsgGCToGCConsoleOutput = new CMsgGCToGCConsoleOutput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCConsoleOutput_OutputLine$Type extends MessageType<CMsgGCToGCConsoleOutput_OutputLine> {
	constructor() {
		super("CMsgGCToGCConsoleOutput.OutputLine", [
			{
				no: 1,
				name: "text",
				kind: "scalar",
				opt: true,
				T: 9 /*ScalarType.STRING*/,
			},
			{
				no: 2,
				name: "spew_level",
				kind: "scalar",
				localName: "spew_level",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToGCConsoleOutput_OutputLine>): CMsgGCToGCConsoleOutput_OutputLine {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCConsoleOutput_OutputLine>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCConsoleOutput_OutputLine,
	): CMsgGCToGCConsoleOutput_OutputLine {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional string text */ 1:
					message.text = reader.string();
					break;
				case /* optional uint32 spew_level */ 2:
					message.spew_level = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCConsoleOutput_OutputLine,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional string text = 1; */
		if (message.text !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.text);
		/* optional uint32 spew_level = 2; */
		if (message.spew_level !== undefined) writer.tag(2, WireType.Varint).uint32(message.spew_level);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCConsoleOutput.OutputLine
 */
export const CMsgGCToGCConsoleOutput_OutputLine = new CMsgGCToGCConsoleOutput_OutputLine$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgItemAges$Type extends MessageType<CMsgItemAges> {
	constructor() {
		super("CMsgItemAges", [
			{
				no: 1,
				name: "max_item_id_timestamps",
				kind: "message",
				localName: "max_item_id_timestamps",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: () => CMsgItemAges_MaxItemIDTimestamp,
			},
		]);
	}
	create(value?: PartialMessage<CMsgItemAges>): CMsgItemAges {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.max_item_id_timestamps = [];
		if (value !== undefined) reflectionMergePartial<CMsgItemAges>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgItemAges,
	): CMsgItemAges {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* repeated CMsgItemAges.MaxItemIDTimestamp max_item_id_timestamps */ 1:
					message.max_item_id_timestamps.push(
						CMsgItemAges_MaxItemIDTimestamp.internalBinaryRead(reader, reader.uint32(), options),
					);
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(message: CMsgItemAges, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
		/* repeated CMsgItemAges.MaxItemIDTimestamp max_item_id_timestamps = 1; */
		for (let i = 0; i < message.max_item_id_timestamps.length; i++)
			CMsgItemAges_MaxItemIDTimestamp.internalBinaryWrite(
				message.max_item_id_timestamps[i],
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join();
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgItemAges
 */
export const CMsgItemAges = new CMsgItemAges$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgItemAges_MaxItemIDTimestamp$Type extends MessageType<CMsgItemAges_MaxItemIDTimestamp> {
	constructor() {
		super("CMsgItemAges.MaxItemIDTimestamp", [
			{
				no: 1,
				name: "timestamp",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "max_item_id",
				kind: "scalar",
				localName: "max_item_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgItemAges_MaxItemIDTimestamp>): CMsgItemAges_MaxItemIDTimestamp {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgItemAges_MaxItemIDTimestamp>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgItemAges_MaxItemIDTimestamp,
	): CMsgItemAges_MaxItemIDTimestamp {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 timestamp */ 1:
					message.timestamp = reader.uint32();
					break;
				case /* optional uint64 max_item_id */ 2:
					message.max_item_id = reader.uint64().toBigInt();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgItemAges_MaxItemIDTimestamp,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 timestamp = 1; */
		if (message.timestamp !== undefined) writer.tag(1, WireType.Varint).uint32(message.timestamp);
		/* optional uint64 max_item_id = 2; */
		if (message.max_item_id !== undefined) writer.tag(2, WireType.Varint).uint64(message.max_item_id);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgItemAges.MaxItemIDTimestamp
 */
export const CMsgItemAges_MaxItemIDTimestamp = new CMsgItemAges_MaxItemIDTimestamp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCInternalTestMsg$Type extends MessageType<CMsgGCToGCInternalTestMsg> {
	constructor() {
		super("CMsgGCToGCInternalTestMsg", [
			{
				no: 1,
				name: "sending_gc",
				kind: "scalar",
				localName: "sending_gc",
				opt: true,
				T: 5 /*ScalarType.INT32*/,
			},
			{
				no: 2,
				name: "sender_id",
				kind: "scalar",
				localName: "sender_id",
				opt: true,
				T: 6 /*ScalarType.FIXED64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 3,
				name: "context",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 4,
				name: "message_id",
				kind: "scalar",
				localName: "message_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 5,
				name: "message_body",
				kind: "scalar",
				localName: "message_body",
				opt: true,
				T: 12 /*ScalarType.BYTES*/,
			},
			{
				no: 6,
				name: "job_id_source",
				kind: "scalar",
				localName: "job_id_source",
				opt: true,
				T: 6 /*ScalarType.FIXED64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 7,
				name: "job_id_target",
				kind: "scalar",
				localName: "job_id_target",
				opt: true,
				T: 6 /*ScalarType.FIXED64*/,
				L: 0 /*LongType.BIGINT*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToGCInternalTestMsg>): CMsgGCToGCInternalTestMsg {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCInternalTestMsg>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCInternalTestMsg,
	): CMsgGCToGCInternalTestMsg {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional int32 sending_gc */ 1:
					message.sending_gc = reader.int32();
					break;
				case /* optional fixed64 sender_id */ 2:
					message.sender_id = reader.fixed64().toBigInt();
					break;
				case /* optional uint32 context */ 3:
					message.context = reader.uint32();
					break;
				case /* optional uint32 message_id */ 4:
					message.message_id = reader.uint32();
					break;
				case /* optional bytes message_body */ 5:
					message.message_body = reader.bytes();
					break;
				case /* optional fixed64 job_id_source */ 6:
					message.job_id_source = reader.fixed64().toBigInt();
					break;
				case /* optional fixed64 job_id_target */ 7:
					message.job_id_target = reader.fixed64().toBigInt();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCInternalTestMsg,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional int32 sending_gc = 1; */
		if (message.sending_gc !== undefined) writer.tag(1, WireType.Varint).int32(message.sending_gc);
		/* optional fixed64 sender_id = 2; */
		if (message.sender_id !== undefined) writer.tag(2, WireType.Bit64).fixed64(message.sender_id);
		/* optional uint32 context = 3; */
		if (message.context !== undefined) writer.tag(3, WireType.Varint).uint32(message.context);
		/* optional uint32 message_id = 4; */
		if (message.message_id !== undefined) writer.tag(4, WireType.Varint).uint32(message.message_id);
		/* optional bytes message_body = 5; */
		if (message.message_body !== undefined) writer.tag(5, WireType.LengthDelimited).bytes(message.message_body);
		/* optional fixed64 job_id_source = 6; */
		if (message.job_id_source !== undefined) writer.tag(6, WireType.Bit64).fixed64(message.job_id_source);
		/* optional fixed64 job_id_target = 7; */
		if (message.job_id_target !== undefined) writer.tag(7, WireType.Bit64).fixed64(message.job_id_target);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCInternalTestMsg
 */
export const CMsgGCToGCInternalTestMsg = new CMsgGCToGCInternalTestMsg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCClientServerVersionsUpdated$Type extends MessageType<CMsgGCToGCClientServerVersionsUpdated> {
	constructor() {
		super("CMsgGCToGCClientServerVersionsUpdated", [
			{
				no: 1,
				name: "client_min_allowed_version",
				kind: "scalar",
				localName: "client_min_allowed_version",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "client_active_version",
				kind: "scalar",
				localName: "client_active_version",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "server_active_version",
				kind: "scalar",
				localName: "server_active_version",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 4,
				name: "server_deployed_version",
				kind: "scalar",
				localName: "server_deployed_version",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 5,
				name: "what_changed",
				kind: "scalar",
				localName: "what_changed",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToGCClientServerVersionsUpdated>): CMsgGCToGCClientServerVersionsUpdated {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCClientServerVersionsUpdated>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCClientServerVersionsUpdated,
	): CMsgGCToGCClientServerVersionsUpdated {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 client_min_allowed_version */ 1:
					message.client_min_allowed_version = reader.uint32();
					break;
				case /* optional uint32 client_active_version */ 2:
					message.client_active_version = reader.uint32();
					break;
				case /* optional uint32 server_active_version */ 3:
					message.server_active_version = reader.uint32();
					break;
				case /* optional uint32 server_deployed_version */ 4:
					message.server_deployed_version = reader.uint32();
					break;
				case /* optional uint32 what_changed */ 5:
					message.what_changed = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCClientServerVersionsUpdated,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 client_min_allowed_version = 1; */
		if (message.client_min_allowed_version !== undefined)
			writer.tag(1, WireType.Varint).uint32(message.client_min_allowed_version);
		/* optional uint32 client_active_version = 2; */
		if (message.client_active_version !== undefined)
			writer.tag(2, WireType.Varint).uint32(message.client_active_version);
		/* optional uint32 server_active_version = 3; */
		if (message.server_active_version !== undefined)
			writer.tag(3, WireType.Varint).uint32(message.server_active_version);
		/* optional uint32 server_deployed_version = 4; */
		if (message.server_deployed_version !== undefined)
			writer.tag(4, WireType.Varint).uint32(message.server_deployed_version);
		/* optional uint32 what_changed = 5; */
		if (message.what_changed !== undefined) writer.tag(5, WireType.Varint).uint32(message.what_changed);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCClientServerVersionsUpdated
 */
export const CMsgGCToGCClientServerVersionsUpdated = new CMsgGCToGCClientServerVersionsUpdated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCBroadcastMessageFromSub$Type extends MessageType<CMsgGCToGCBroadcastMessageFromSub> {
	constructor() {
		super("CMsgGCToGCBroadcastMessageFromSub", [
			{
				no: 1,
				name: "msg_id",
				kind: "scalar",
				localName: "msg_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "serialized_msg",
				kind: "scalar",
				localName: "serialized_msg",
				opt: true,
				T: 12 /*ScalarType.BYTES*/,
			},
			{
				no: 3,
				name: "account_id_list",
				kind: "scalar",
				localName: "account_id_list",
				repeat: 1 /*RepeatType.PACKED*/,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 4,
				name: "steam_id_list",
				kind: "scalar",
				localName: "steam_id_list",
				repeat: 1 /*RepeatType.PACKED*/,
				T: 6 /*ScalarType.FIXED64*/,
				L: 0 /*LongType.BIGINT*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToGCBroadcastMessageFromSub>): CMsgGCToGCBroadcastMessageFromSub {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.account_id_list = [];
		message.steam_id_list = [];
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCBroadcastMessageFromSub>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCBroadcastMessageFromSub,
	): CMsgGCToGCBroadcastMessageFromSub {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 msg_id */ 1:
					message.msg_id = reader.uint32();
					break;
				case /* optional bytes serialized_msg */ 2:
					message.serialized_msg = reader.bytes();
					break;
				case /* repeated uint32 account_id_list = 3 [packed = true];*/ 3:
					if (wireType === WireType.LengthDelimited)
						for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.account_id_list.push(reader.uint32());
					else message.account_id_list.push(reader.uint32());
					break;
				case /* repeated fixed64 steam_id_list = 4 [packed = true];*/ 4:
					if (wireType === WireType.LengthDelimited)
						for (let e = reader.int32() + reader.pos; reader.pos < e; )
							message.steam_id_list.push(reader.fixed64().toBigInt());
					else message.steam_id_list.push(reader.fixed64().toBigInt());
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCBroadcastMessageFromSub,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 msg_id = 1; */
		if (message.msg_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.msg_id);
		/* optional bytes serialized_msg = 2; */
		if (message.serialized_msg !== undefined) writer.tag(2, WireType.LengthDelimited).bytes(message.serialized_msg);
		/* repeated uint32 account_id_list = 3 [packed = true]; */
		if (message.account_id_list.length) {
			writer.tag(3, WireType.LengthDelimited).fork();
			for (let i = 0; i < message.account_id_list.length; i++) writer.uint32(message.account_id_list[i]);
			writer.join();
		}
		/* repeated fixed64 steam_id_list = 4 [packed = true]; */
		if (message.steam_id_list.length) {
			writer.tag(4, WireType.LengthDelimited).fork();
			for (let i = 0; i < message.steam_id_list.length; i++) writer.fixed64(message.steam_id_list[i]);
			writer.join();
		}
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCBroadcastMessageFromSub
 */
export const CMsgGCToGCBroadcastMessageFromSub = new CMsgGCToGCBroadcastMessageFromSub$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToClientCurrencyPricePoints$Type extends MessageType<CMsgGCToClientCurrencyPricePoints> {
	constructor() {
		super("CMsgGCToClientCurrencyPricePoints", [
			{
				no: 1,
				name: "price_key",
				kind: "scalar",
				localName: "price_key",
				repeat: 1 /*RepeatType.PACKED*/,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 2,
				name: "currencies",
				kind: "message",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: () => CMsgGCToClientCurrencyPricePoints_Currency,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToClientCurrencyPricePoints>): CMsgGCToClientCurrencyPricePoints {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.price_key = [];
		message.currencies = [];
		if (value !== undefined) reflectionMergePartial<CMsgGCToClientCurrencyPricePoints>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToClientCurrencyPricePoints,
	): CMsgGCToClientCurrencyPricePoints {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* repeated uint64 price_key = 1 [packed = true];*/ 1:
					if (wireType === WireType.LengthDelimited)
						for (let e = reader.int32() + reader.pos; reader.pos < e; )
							message.price_key.push(reader.uint64().toBigInt());
					else message.price_key.push(reader.uint64().toBigInt());
					break;
				case /* repeated CMsgGCToClientCurrencyPricePoints.Currency currencies */ 2:
					message.currencies.push(
						CMsgGCToClientCurrencyPricePoints_Currency.internalBinaryRead(reader, reader.uint32(), options),
					);
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToClientCurrencyPricePoints,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* repeated uint64 price_key = 1 [packed = true]; */
		if (message.price_key.length) {
			writer.tag(1, WireType.LengthDelimited).fork();
			for (let i = 0; i < message.price_key.length; i++) writer.uint64(message.price_key[i]);
			writer.join();
		}
		/* repeated CMsgGCToClientCurrencyPricePoints.Currency currencies = 2; */
		for (let i = 0; i < message.currencies.length; i++)
			CMsgGCToClientCurrencyPricePoints_Currency.internalBinaryWrite(
				message.currencies[i],
				writer.tag(2, WireType.LengthDelimited).fork(),
				options,
			).join();
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToClientCurrencyPricePoints
 */
export const CMsgGCToClientCurrencyPricePoints = new CMsgGCToClientCurrencyPricePoints$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToClientCurrencyPricePoints_Currency$Type extends MessageType<CMsgGCToClientCurrencyPricePoints_Currency> {
	constructor() {
		super("CMsgGCToClientCurrencyPricePoints.Currency", [
			{
				no: 1,
				name: "currency_id",
				kind: "scalar",
				localName: "currency_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "currency_price",
				kind: "scalar",
				localName: "currency_price",
				repeat: 1 /*RepeatType.PACKED*/,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
		]);
	}
	create(
		value?: PartialMessage<CMsgGCToClientCurrencyPricePoints_Currency>,
	): CMsgGCToClientCurrencyPricePoints_Currency {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.currency_price = [];
		if (value !== undefined) reflectionMergePartial<CMsgGCToClientCurrencyPricePoints_Currency>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToClientCurrencyPricePoints_Currency,
	): CMsgGCToClientCurrencyPricePoints_Currency {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 currency_id */ 1:
					message.currency_id = reader.uint32();
					break;
				case /* repeated uint64 currency_price = 2 [packed = true];*/ 2:
					if (wireType === WireType.LengthDelimited)
						for (let e = reader.int32() + reader.pos; reader.pos < e; )
							message.currency_price.push(reader.uint64().toBigInt());
					else message.currency_price.push(reader.uint64().toBigInt());
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToClientCurrencyPricePoints_Currency,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 currency_id = 1; */
		if (message.currency_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.currency_id);
		/* repeated uint64 currency_price = 2 [packed = true]; */
		if (message.currency_price.length) {
			writer.tag(2, WireType.LengthDelimited).fork();
			for (let i = 0; i < message.currency_price.length; i++) writer.uint64(message.currency_price[i]);
			writer.join();
		}
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToClientCurrencyPricePoints.Currency
 */
export const CMsgGCToClientCurrencyPricePoints_Currency = new CMsgGCToClientCurrencyPricePoints_Currency$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgBannedWordList$Type extends MessageType<CMsgBannedWordList> {
	constructor() {
		super("CMsgBannedWordList", [
			{
				no: 1,
				name: "version",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "banned_words",
				kind: "scalar",
				localName: "banned_words",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: 9 /*ScalarType.STRING*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgBannedWordList>): CMsgBannedWordList {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.banned_words = [];
		if (value !== undefined) reflectionMergePartial<CMsgBannedWordList>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgBannedWordList,
	): CMsgBannedWordList {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 version */ 1:
					message.version = reader.uint32();
					break;
				case /* repeated string banned_words */ 2:
					message.banned_words.push(reader.string());
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(message: CMsgBannedWordList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
		/* optional uint32 version = 1; */
		if (message.version !== undefined) writer.tag(1, WireType.Varint).uint32(message.version);
		/* repeated string banned_words = 2; */
		for (let i = 0; i < message.banned_words.length; i++)
			writer.tag(2, WireType.LengthDelimited).string(message.banned_words[i]);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgBannedWordList
 */
export const CMsgBannedWordList = new CMsgBannedWordList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCFlushSteamInventoryCache$Type extends MessageType<CMsgGCToGCFlushSteamInventoryCache> {
	constructor() {
		super("CMsgGCToGCFlushSteamInventoryCache", [
			{
				no: 1,
				name: "keys",
				kind: "message",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: () => CMsgGCToGCFlushSteamInventoryCache_Key,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToGCFlushSteamInventoryCache>): CMsgGCToGCFlushSteamInventoryCache {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.keys = [];
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCFlushSteamInventoryCache>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCFlushSteamInventoryCache,
	): CMsgGCToGCFlushSteamInventoryCache {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* repeated CMsgGCToGCFlushSteamInventoryCache.Key keys */ 1:
					message.keys.push(
						CMsgGCToGCFlushSteamInventoryCache_Key.internalBinaryRead(reader, reader.uint32(), options),
					);
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCFlushSteamInventoryCache,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* repeated CMsgGCToGCFlushSteamInventoryCache.Key keys = 1; */
		for (let i = 0; i < message.keys.length; i++)
			CMsgGCToGCFlushSteamInventoryCache_Key.internalBinaryWrite(
				message.keys[i],
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join();
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCFlushSteamInventoryCache
 */
export const CMsgGCToGCFlushSteamInventoryCache = new CMsgGCToGCFlushSteamInventoryCache$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCFlushSteamInventoryCache_Key$Type extends MessageType<CMsgGCToGCFlushSteamInventoryCache_Key> {
	constructor() {
		super("CMsgGCToGCFlushSteamInventoryCache.Key", [
			{
				no: 1,
				name: "steamid",
				kind: "scalar",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 2,
				name: "contextid",
				kind: "scalar",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToGCFlushSteamInventoryCache_Key>): CMsgGCToGCFlushSteamInventoryCache_Key {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCFlushSteamInventoryCache_Key>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCFlushSteamInventoryCache_Key,
	): CMsgGCToGCFlushSteamInventoryCache_Key {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint64 steamid */ 1:
					message.steamid = reader.uint64().toBigInt();
					break;
				case /* optional uint64 contextid */ 2:
					message.contextid = reader.uint64().toBigInt();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCFlushSteamInventoryCache_Key,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint64 steamid = 1; */
		if (message.steamid !== undefined) writer.tag(1, WireType.Varint).uint64(message.steamid);
		/* optional uint64 contextid = 2; */
		if (message.contextid !== undefined) writer.tag(2, WireType.Varint).uint64(message.contextid);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCFlushSteamInventoryCache.Key
 */
export const CMsgGCToGCFlushSteamInventoryCache_Key = new CMsgGCToGCFlushSteamInventoryCache_Key$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCUpdateSubscriptionItems$Type extends MessageType<CMsgGCToGCUpdateSubscriptionItems> {
	constructor() {
		super("CMsgGCToGCUpdateSubscriptionItems", [
			{
				no: 1,
				name: "account_id",
				kind: "scalar",
				localName: "account_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "always_notify",
				kind: "scalar",
				localName: "always_notify",
				opt: true,
				T: 8 /*ScalarType.BOOL*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToGCUpdateSubscriptionItems>): CMsgGCToGCUpdateSubscriptionItems {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCUpdateSubscriptionItems>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCUpdateSubscriptionItems,
	): CMsgGCToGCUpdateSubscriptionItems {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 account_id */ 1:
					message.account_id = reader.uint32();
					break;
				case /* optional bool always_notify */ 2:
					message.always_notify = reader.bool();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCUpdateSubscriptionItems,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 account_id = 1; */
		if (message.account_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.account_id);
		/* optional bool always_notify = 2; */
		if (message.always_notify !== undefined) writer.tag(2, WireType.Varint).bool(message.always_notify);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCUpdateSubscriptionItems
 */
export const CMsgGCToGCUpdateSubscriptionItems = new CMsgGCToGCUpdateSubscriptionItems$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCSelfPing$Type extends MessageType<CMsgGCToGCSelfPing> {
	constructor() {
		super("CMsgGCToGCSelfPing", [
			{
				no: 1,
				name: "sample_id",
				kind: "scalar",
				localName: "sample_id",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToGCSelfPing>): CMsgGCToGCSelfPing {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCSelfPing>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCSelfPing,
	): CMsgGCToGCSelfPing {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 sample_id */ 1:
					message.sample_id = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(message: CMsgGCToGCSelfPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
		/* optional uint32 sample_id = 1; */
		if (message.sample_id !== undefined) writer.tag(1, WireType.Varint).uint32(message.sample_id);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCSelfPing
 */
export const CMsgGCToGCSelfPing = new CMsgGCToGCSelfPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCGetInfuxIntervalStats$Type extends MessageType<CMsgGCToGCGetInfuxIntervalStats> {
	constructor() {
		super("CMsgGCToGCGetInfuxIntervalStats", []);
	}
	create(value?: PartialMessage<CMsgGCToGCGetInfuxIntervalStats>): CMsgGCToGCGetInfuxIntervalStats {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCGetInfuxIntervalStats>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCGetInfuxIntervalStats,
	): CMsgGCToGCGetInfuxIntervalStats {
		return target ?? this.create();
	}
	internalBinaryWrite(
		message: CMsgGCToGCGetInfuxIntervalStats,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCGetInfuxIntervalStats
 */
export const CMsgGCToGCGetInfuxIntervalStats = new CMsgGCToGCGetInfuxIntervalStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCGetInfuxIntervalStatsResponse$Type extends MessageType<CMsgGCToGCGetInfuxIntervalStatsResponse> {
	constructor() {
		super("CMsgGCToGCGetInfuxIntervalStatsResponse", [
			{
				no: 1,
				name: "stat_ids",
				kind: "scalar",
				localName: "stat_ids",
				repeat: 1 /*RepeatType.PACKED*/,
				T: 7 /*ScalarType.FIXED32*/,
			},
			{
				no: 2,
				name: "stat_total",
				kind: "scalar",
				localName: "stat_total",
				repeat: 1 /*RepeatType.PACKED*/,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 3,
				name: "stat_samples",
				kind: "scalar",
				localName: "stat_samples",
				repeat: 1 /*RepeatType.PACKED*/,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 4,
				name: "stat_max",
				kind: "scalar",
				localName: "stat_max",
				repeat: 1 /*RepeatType.PACKED*/,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 5,
				name: "sample_duration_ms",
				kind: "scalar",
				localName: "sample_duration_ms",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToGCGetInfuxIntervalStatsResponse>): CMsgGCToGCGetInfuxIntervalStatsResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.stat_ids = [];
		message.stat_total = [];
		message.stat_samples = [];
		message.stat_max = [];
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCGetInfuxIntervalStatsResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCGetInfuxIntervalStatsResponse,
	): CMsgGCToGCGetInfuxIntervalStatsResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* repeated fixed32 stat_ids = 1 [packed = true];*/ 1:
					if (wireType === WireType.LengthDelimited)
						for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.stat_ids.push(reader.fixed32());
					else message.stat_ids.push(reader.fixed32());
					break;
				case /* repeated uint64 stat_total = 2 [packed = true];*/ 2:
					if (wireType === WireType.LengthDelimited)
						for (let e = reader.int32() + reader.pos; reader.pos < e; )
							message.stat_total.push(reader.uint64().toBigInt());
					else message.stat_total.push(reader.uint64().toBigInt());
					break;
				case /* repeated uint32 stat_samples = 3 [packed = true];*/ 3:
					if (wireType === WireType.LengthDelimited)
						for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.stat_samples.push(reader.uint32());
					else message.stat_samples.push(reader.uint32());
					break;
				case /* repeated uint32 stat_max = 4 [packed = true];*/ 4:
					if (wireType === WireType.LengthDelimited)
						for (let e = reader.int32() + reader.pos; reader.pos < e; ) message.stat_max.push(reader.uint32());
					else message.stat_max.push(reader.uint32());
					break;
				case /* optional uint32 sample_duration_ms */ 5:
					message.sample_duration_ms = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCGetInfuxIntervalStatsResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* repeated fixed32 stat_ids = 1 [packed = true]; */
		if (message.stat_ids.length) {
			writer.tag(1, WireType.LengthDelimited).fork();
			for (let i = 0; i < message.stat_ids.length; i++) writer.fixed32(message.stat_ids[i]);
			writer.join();
		}
		/* repeated uint64 stat_total = 2 [packed = true]; */
		if (message.stat_total.length) {
			writer.tag(2, WireType.LengthDelimited).fork();
			for (let i = 0; i < message.stat_total.length; i++) writer.uint64(message.stat_total[i]);
			writer.join();
		}
		/* repeated uint32 stat_samples = 3 [packed = true]; */
		if (message.stat_samples.length) {
			writer.tag(3, WireType.LengthDelimited).fork();
			for (let i = 0; i < message.stat_samples.length; i++) writer.uint32(message.stat_samples[i]);
			writer.join();
		}
		/* repeated uint32 stat_max = 4 [packed = true]; */
		if (message.stat_max.length) {
			writer.tag(4, WireType.LengthDelimited).fork();
			for (let i = 0; i < message.stat_max.length; i++) writer.uint32(message.stat_max[i]);
			writer.join();
		}
		/* optional uint32 sample_duration_ms = 5; */
		if (message.sample_duration_ms !== undefined) writer.tag(5, WireType.Varint).uint32(message.sample_duration_ms);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCGetInfuxIntervalStatsResponse
 */
export const CMsgGCToGCGetInfuxIntervalStatsResponse = new CMsgGCToGCGetInfuxIntervalStatsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCPurchaseSucceeded$Type extends MessageType<CMsgGCToGCPurchaseSucceeded> {
	constructor() {
		super("CMsgGCToGCPurchaseSucceeded", []);
	}
	create(value?: PartialMessage<CMsgGCToGCPurchaseSucceeded>): CMsgGCToGCPurchaseSucceeded {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCPurchaseSucceeded>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCPurchaseSucceeded,
	): CMsgGCToGCPurchaseSucceeded {
		return target ?? this.create();
	}
	internalBinaryWrite(
		message: CMsgGCToGCPurchaseSucceeded,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCPurchaseSucceeded
 */
export const CMsgGCToGCPurchaseSucceeded = new CMsgGCToGCPurchaseSucceeded$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetLimitedItemPurchaseQuantity$Type extends MessageType<CMsgClientToGCGetLimitedItemPurchaseQuantity> {
	constructor() {
		super("CMsgClientToGCGetLimitedItemPurchaseQuantity", [
			{
				no: 1,
				name: "item_def",
				kind: "scalar",
				localName: "item_def",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(
		value?: PartialMessage<CMsgClientToGCGetLimitedItemPurchaseQuantity>,
	): CMsgClientToGCGetLimitedItemPurchaseQuantity {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetLimitedItemPurchaseQuantity>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCGetLimitedItemPurchaseQuantity,
	): CMsgClientToGCGetLimitedItemPurchaseQuantity {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 item_def */ 1:
					message.item_def = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCGetLimitedItemPurchaseQuantity,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 item_def = 1; */
		if (message.item_def !== undefined) writer.tag(1, WireType.Varint).uint32(message.item_def);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetLimitedItemPurchaseQuantity
 */
export const CMsgClientToGCGetLimitedItemPurchaseQuantity = new CMsgClientToGCGetLimitedItemPurchaseQuantity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetLimitedItemPurchaseQuantityResponse$Type extends MessageType<CMsgClientToGCGetLimitedItemPurchaseQuantityResponse> {
	constructor() {
		super("CMsgClientToGCGetLimitedItemPurchaseQuantityResponse", [
			{
				no: 1,
				name: "result",
				kind: "enum",
				opt: true,
				T: () => [
					"CMsgClientToGCGetLimitedItemPurchaseQuantityResponse.EResponse",
					CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse,
				],
			},
			{
				no: 2,
				name: "quantity_purchased",
				kind: "scalar",
				localName: "quantity_purchased",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(
		value?: PartialMessage<CMsgClientToGCGetLimitedItemPurchaseQuantityResponse>,
	): CMsgClientToGCGetLimitedItemPurchaseQuantityResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined)
			reflectionMergePartial<CMsgClientToGCGetLimitedItemPurchaseQuantityResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCGetLimitedItemPurchaseQuantityResponse,
	): CMsgClientToGCGetLimitedItemPurchaseQuantityResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional CMsgClientToGCGetLimitedItemPurchaseQuantityResponse.EResponse result */ 1:
					message.result = reader.int32();
					break;
				case /* optional uint32 quantity_purchased */ 2:
					message.quantity_purchased = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCGetLimitedItemPurchaseQuantityResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional CMsgClientToGCGetLimitedItemPurchaseQuantityResponse.EResponse result = 1; */
		if (message.result !== undefined) writer.tag(1, WireType.Varint).int32(message.result);
		/* optional uint32 quantity_purchased = 2; */
		if (message.quantity_purchased !== undefined) writer.tag(2, WireType.Varint).uint32(message.quantity_purchased);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetLimitedItemPurchaseQuantityResponse
 */
export const CMsgClientToGCGetLimitedItemPurchaseQuantityResponse =
	new CMsgClientToGCGetLimitedItemPurchaseQuantityResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetInFlightItemCharges$Type extends MessageType<CMsgClientToGCGetInFlightItemCharges> {
	constructor() {
		super("CMsgClientToGCGetInFlightItemCharges", [
			{
				no: 1,
				name: "item_def",
				kind: "scalar",
				localName: "item_def",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCGetInFlightItemCharges>): CMsgClientToGCGetInFlightItemCharges {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetInFlightItemCharges>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCGetInFlightItemCharges,
	): CMsgClientToGCGetInFlightItemCharges {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 item_def */ 1:
					message.item_def = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCGetInFlightItemCharges,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 item_def = 1; */
		if (message.item_def !== undefined) writer.tag(1, WireType.Varint).uint32(message.item_def);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetInFlightItemCharges
 */
export const CMsgClientToGCGetInFlightItemCharges = new CMsgClientToGCGetInFlightItemCharges$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCGetInFlightItemChargesResponse$Type extends MessageType<CMsgClientToGCGetInFlightItemChargesResponse> {
	constructor() {
		super("CMsgClientToGCGetInFlightItemChargesResponse", [
			{
				no: 1,
				name: "result",
				kind: "enum",
				opt: true,
				T: () => [
					"CMsgClientToGCGetInFlightItemChargesResponse.EResponse",
					CMsgClientToGCGetInFlightItemChargesResponse_EResponse,
				],
			},
			{
				no: 2,
				name: "charges_in_flight",
				kind: "scalar",
				localName: "charges_in_flight",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(
		value?: PartialMessage<CMsgClientToGCGetInFlightItemChargesResponse>,
	): CMsgClientToGCGetInFlightItemChargesResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCGetInFlightItemChargesResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCGetInFlightItemChargesResponse,
	): CMsgClientToGCGetInFlightItemChargesResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional CMsgClientToGCGetInFlightItemChargesResponse.EResponse result */ 1:
					message.result = reader.int32();
					break;
				case /* optional uint32 charges_in_flight */ 2:
					message.charges_in_flight = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCGetInFlightItemChargesResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional CMsgClientToGCGetInFlightItemChargesResponse.EResponse result = 1; */
		if (message.result !== undefined) writer.tag(1, WireType.Varint).int32(message.result);
		/* optional uint32 charges_in_flight = 2; */
		if (message.charges_in_flight !== undefined) writer.tag(2, WireType.Varint).uint32(message.charges_in_flight);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCGetInFlightItemChargesResponse
 */
export const CMsgClientToGCGetInFlightItemChargesResponse = new CMsgClientToGCGetInFlightItemChargesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPurchaseChargeCostItems$Type extends MessageType<CMsgClientToGCPurchaseChargeCostItems> {
	constructor() {
		super("CMsgClientToGCPurchaseChargeCostItems", [
			{
				no: 1,
				name: "items",
				kind: "message",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: () => CMsgClientToGCPurchaseChargeCostItems_Item,
			},
			{
				no: 2,
				name: "currency",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgClientToGCPurchaseChargeCostItems>): CMsgClientToGCPurchaseChargeCostItems {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.items = [];
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCPurchaseChargeCostItems>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCPurchaseChargeCostItems,
	): CMsgClientToGCPurchaseChargeCostItems {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* repeated CMsgClientToGCPurchaseChargeCostItems.Item items */ 1:
					message.items.push(
						CMsgClientToGCPurchaseChargeCostItems_Item.internalBinaryRead(reader, reader.uint32(), options),
					);
					break;
				case /* optional uint32 currency */ 2:
					message.currency = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCPurchaseChargeCostItems,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* repeated CMsgClientToGCPurchaseChargeCostItems.Item items = 1; */
		for (let i = 0; i < message.items.length; i++)
			CMsgClientToGCPurchaseChargeCostItems_Item.internalBinaryWrite(
				message.items[i],
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* optional uint32 currency = 2; */
		if (message.currency !== undefined) writer.tag(2, WireType.Varint).uint32(message.currency);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPurchaseChargeCostItems
 */
export const CMsgClientToGCPurchaseChargeCostItems = new CMsgClientToGCPurchaseChargeCostItems$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPurchaseChargeCostItems_Item$Type extends MessageType<CMsgClientToGCPurchaseChargeCostItems_Item> {
	constructor() {
		super("CMsgClientToGCPurchaseChargeCostItems.Item", [
			{
				no: 1,
				name: "item_def_index",
				kind: "scalar",
				localName: "item_def_index",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "quantity",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 3,
				name: "source_reference_id",
				kind: "scalar",
				localName: "source_reference_id",
				opt: true,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{
				no: 4,
				name: "price_index",
				kind: "scalar",
				localName: "price_index",
				opt: true,
				T: 5 /*ScalarType.INT32*/,
			},
		]);
	}
	create(
		value?: PartialMessage<CMsgClientToGCPurchaseChargeCostItems_Item>,
	): CMsgClientToGCPurchaseChargeCostItems_Item {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCPurchaseChargeCostItems_Item>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCPurchaseChargeCostItems_Item,
	): CMsgClientToGCPurchaseChargeCostItems_Item {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 item_def_index */ 1:
					message.item_def_index = reader.uint32();
					break;
				case /* optional uint32 quantity */ 2:
					message.quantity = reader.uint32();
					break;
				case /* optional uint64 source_reference_id */ 3:
					message.source_reference_id = reader.uint64().toBigInt();
					break;
				case /* optional int32 price_index */ 4:
					message.price_index = reader.int32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCPurchaseChargeCostItems_Item,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 item_def_index = 1; */
		if (message.item_def_index !== undefined) writer.tag(1, WireType.Varint).uint32(message.item_def_index);
		/* optional uint32 quantity = 2; */
		if (message.quantity !== undefined) writer.tag(2, WireType.Varint).uint32(message.quantity);
		/* optional uint64 source_reference_id = 3; */
		if (message.source_reference_id !== undefined) writer.tag(3, WireType.Varint).uint64(message.source_reference_id);
		/* optional int32 price_index = 4; */
		if (message.price_index !== undefined) writer.tag(4, WireType.Varint).int32(message.price_index);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPurchaseChargeCostItems.Item
 */
export const CMsgClientToGCPurchaseChargeCostItems_Item = new CMsgClientToGCPurchaseChargeCostItems_Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCPurchaseChargeCostItemsResponse$Type extends MessageType<CMsgClientToGCPurchaseChargeCostItemsResponse> {
	constructor() {
		super("CMsgClientToGCPurchaseChargeCostItemsResponse", [
			{
				no: 1,
				name: "result",
				kind: "enum",
				opt: true,
				T: () => [
					"CMsgClientToGCPurchaseChargeCostItemsResponse.EResponse",
					CMsgClientToGCPurchaseChargeCostItemsResponse_EResponse,
				],
			},
			{
				no: 2,
				name: "item_ids",
				kind: "scalar",
				localName: "item_ids",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
		]);
	}
	create(
		value?: PartialMessage<CMsgClientToGCPurchaseChargeCostItemsResponse>,
	): CMsgClientToGCPurchaseChargeCostItemsResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.item_ids = [];
		if (value !== undefined)
			reflectionMergePartial<CMsgClientToGCPurchaseChargeCostItemsResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCPurchaseChargeCostItemsResponse,
	): CMsgClientToGCPurchaseChargeCostItemsResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional CMsgClientToGCPurchaseChargeCostItemsResponse.EResponse result */ 1:
					message.result = reader.int32();
					break;
				case /* repeated uint64 item_ids */ 2:
					if (wireType === WireType.LengthDelimited)
						for (let e = reader.int32() + reader.pos; reader.pos < e; )
							message.item_ids.push(reader.uint64().toBigInt());
					else message.item_ids.push(reader.uint64().toBigInt());
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCPurchaseChargeCostItemsResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional CMsgClientToGCPurchaseChargeCostItemsResponse.EResponse result = 1; */
		if (message.result !== undefined) writer.tag(1, WireType.Varint).int32(message.result);
		/* repeated uint64 item_ids = 2; */
		for (let i = 0; i < message.item_ids.length; i++) writer.tag(2, WireType.Varint).uint64(message.item_ids[i]);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCPurchaseChargeCostItemsResponse
 */
export const CMsgClientToGCPurchaseChargeCostItemsResponse = new CMsgClientToGCPurchaseChargeCostItemsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToClientInFlightChargesUpdated$Type extends MessageType<CMsgGCToClientInFlightChargesUpdated> {
	constructor() {
		super("CMsgGCToClientInFlightChargesUpdated", [
			{
				no: 2,
				name: "in_flight_charges",
				kind: "message",
				localName: "in_flight_charges",
				repeat: 2 /*RepeatType.UNPACKED*/,
				T: () => CMsgGCToClientInFlightChargesUpdated_ItemCharges,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToClientInFlightChargesUpdated>): CMsgGCToClientInFlightChargesUpdated {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.in_flight_charges = [];
		if (value !== undefined) reflectionMergePartial<CMsgGCToClientInFlightChargesUpdated>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToClientInFlightChargesUpdated,
	): CMsgGCToClientInFlightChargesUpdated {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* repeated CMsgGCToClientInFlightChargesUpdated.ItemCharges in_flight_charges */ 2:
					message.in_flight_charges.push(
						CMsgGCToClientInFlightChargesUpdated_ItemCharges.internalBinaryRead(reader, reader.uint32(), options),
					);
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToClientInFlightChargesUpdated,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* repeated CMsgGCToClientInFlightChargesUpdated.ItemCharges in_flight_charges = 2; */
		for (let i = 0; i < message.in_flight_charges.length; i++)
			CMsgGCToClientInFlightChargesUpdated_ItemCharges.internalBinaryWrite(
				message.in_flight_charges[i],
				writer.tag(2, WireType.LengthDelimited).fork(),
				options,
			).join();
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToClientInFlightChargesUpdated
 */
export const CMsgGCToClientInFlightChargesUpdated = new CMsgGCToClientInFlightChargesUpdated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToClientInFlightChargesUpdated_ItemCharges$Type extends MessageType<CMsgGCToClientInFlightChargesUpdated_ItemCharges> {
	constructor() {
		super("CMsgGCToClientInFlightChargesUpdated.ItemCharges", [
			{
				no: 1,
				name: "item_def",
				kind: "scalar",
				localName: "item_def",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
			{
				no: 2,
				name: "charges_in_flight",
				kind: "scalar",
				localName: "charges_in_flight",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(
		value?: PartialMessage<CMsgGCToClientInFlightChargesUpdated_ItemCharges>,
	): CMsgGCToClientInFlightChargesUpdated_ItemCharges {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined)
			reflectionMergePartial<CMsgGCToClientInFlightChargesUpdated_ItemCharges>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToClientInFlightChargesUpdated_ItemCharges,
	): CMsgGCToClientInFlightChargesUpdated_ItemCharges {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 item_def */ 1:
					message.item_def = reader.uint32();
					break;
				case /* optional uint32 charges_in_flight */ 2:
					message.charges_in_flight = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToClientInFlightChargesUpdated_ItemCharges,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 item_def = 1; */
		if (message.item_def !== undefined) writer.tag(1, WireType.Varint).uint32(message.item_def);
		/* optional uint32 charges_in_flight = 2; */
		if (message.charges_in_flight !== undefined) writer.tag(2, WireType.Varint).uint32(message.charges_in_flight);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToClientInFlightChargesUpdated.ItemCharges
 */
export const CMsgGCToClientInFlightChargesUpdated_ItemCharges =
	new CMsgGCToClientInFlightChargesUpdated_ItemCharges$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCCancelUnfinalizedTransactions$Type extends MessageType<CMsgClientToGCCancelUnfinalizedTransactions> {
	constructor() {
		super("CMsgClientToGCCancelUnfinalizedTransactions", [
			{
				no: 1,
				name: "unused",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(
		value?: PartialMessage<CMsgClientToGCCancelUnfinalizedTransactions>,
	): CMsgClientToGCCancelUnfinalizedTransactions {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgClientToGCCancelUnfinalizedTransactions>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCCancelUnfinalizedTransactions,
	): CMsgClientToGCCancelUnfinalizedTransactions {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 unused */ 1:
					message.unused = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCCancelUnfinalizedTransactions,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 unused = 1; */
		if (message.unused !== undefined) writer.tag(1, WireType.Varint).uint32(message.unused);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCCancelUnfinalizedTransactions
 */
export const CMsgClientToGCCancelUnfinalizedTransactions = new CMsgClientToGCCancelUnfinalizedTransactions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgClientToGCCancelUnfinalizedTransactionsResponse$Type extends MessageType<CMsgClientToGCCancelUnfinalizedTransactionsResponse> {
	constructor() {
		super("CMsgClientToGCCancelUnfinalizedTransactionsResponse", [
			{
				no: 1,
				name: "result",
				kind: "scalar",
				opt: true,
				T: 13 /*ScalarType.UINT32*/,
			},
		]);
	}
	create(
		value?: PartialMessage<CMsgClientToGCCancelUnfinalizedTransactionsResponse>,
	): CMsgClientToGCCancelUnfinalizedTransactionsResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined)
			reflectionMergePartial<CMsgClientToGCCancelUnfinalizedTransactionsResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgClientToGCCancelUnfinalizedTransactionsResponse,
	): CMsgClientToGCCancelUnfinalizedTransactionsResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional uint32 result */ 1:
					message.result = reader.uint32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgClientToGCCancelUnfinalizedTransactionsResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional uint32 result = 1; */
		if (message.result !== undefined) writer.tag(1, WireType.Varint).uint32(message.result);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgClientToGCCancelUnfinalizedTransactionsResponse
 */
export const CMsgClientToGCCancelUnfinalizedTransactionsResponse =
	new CMsgClientToGCCancelUnfinalizedTransactionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMsgGCToGCUpdateWelcomeMsg$Type extends MessageType<CMsgGCToGCUpdateWelcomeMsg> {
	constructor() {
		super("CMsgGCToGCUpdateWelcomeMsg", [
			{
				no: 1,
				name: "server",
				kind: "scalar",
				opt: true,
				T: 8 /*ScalarType.BOOL*/,
			},
			{
				no: 2,
				name: "new_msg",
				kind: "message",
				localName: "new_msg",
				T: () => CExtraMsgBlock,
			},
			{
				no: 3,
				name: "broadcast",
				kind: "scalar",
				opt: true,
				T: 8 /*ScalarType.BOOL*/,
			},
		]);
	}
	create(value?: PartialMessage<CMsgGCToGCUpdateWelcomeMsg>): CMsgGCToGCUpdateWelcomeMsg {
		const message = globalThis.Object.create(this.messagePrototype!);
		if (value !== undefined) reflectionMergePartial<CMsgGCToGCUpdateWelcomeMsg>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: CMsgGCToGCUpdateWelcomeMsg,
	): CMsgGCToGCUpdateWelcomeMsg {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* optional bool server */ 1:
					message.server = reader.bool();
					break;
				case /* optional CExtraMsgBlock new_msg */ 2:
					message.new_msg = CExtraMsgBlock.internalBinaryRead(reader, reader.uint32(), options, message.new_msg);
					break;
				case /* optional bool broadcast */ 3:
					message.broadcast = reader.bool();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
					let d = reader.skip(wireType);
					if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: CMsgGCToGCUpdateWelcomeMsg,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* optional bool server = 1; */
		if (message.server !== undefined) writer.tag(1, WireType.Varint).bool(message.server);
		/* optional CExtraMsgBlock new_msg = 2; */
		if (message.new_msg)
			CExtraMsgBlock.internalBinaryWrite(
				message.new_msg,
				writer.tag(2, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* optional bool broadcast = 3; */
		if (message.broadcast !== undefined) writer.tag(3, WireType.Varint).bool(message.broadcast);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message CMsgGCToGCUpdateWelcomeMsg
 */
export const CMsgGCToGCUpdateWelcomeMsg = new CMsgGCToGCUpdateWelcomeMsg$Type();
